<?xml version="1.0" ?>
<dictionary xmlns="http://www.cfeclipse.org/version1/dictionary" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xi="http://www.w3.org/2001/XInclude" xsi:schemaLocation="http://www.cfeclipse.org/version1/dictionary.xsd http://cfeclipse.tigris.org/version1/dictionary/dictionary.xsd">
	<tags>
		<tag name="ext:accordion" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="layout" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="form"></values>
				</parameter>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
true if the Ext.Fx class is available, otherwise
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animFloat" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel that will
close again once the user mouses out of that panel (or
clicks out if autoHide = false). Setting animFloat to
false will prevent the open and close of these floated
panels from being animated (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some panel-specific structural
markup. When applyTo is used, constituent parts of the
panel can be specified by CSS class name within the
main element, and the panel will automatically create
those components from that markup. Any required
components not specified in the markup will be
autogenerated if necessary. The following class names
are supported (baseCls will be replaced by baseCls):
baseCls + '-header' baseCls + '-header-text' baseCls +
'-bwrap' baseCls + '-tbar' baseCls + '-body' baseCls +
'-bbar' baseCls + '-footer' Using this config, a call
to render() is not required. If applyTo is specified,
any value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the panel's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some panel-specific structural
markup. When applyTo is used, constituent parts of the
panel can be specified by CSS class name within the
main element, and the panel will automatically create
those components from that markup. Any required
components not specified in the markup will be
autogenerated if necessary. The following class names
are supported (baseCls will be replaced by baseCls):
baseCls + '-header' baseCls + '-header-text' baseCls +
'-bwrap' baseCls + '-tbar' baseCls + '-body' baseCls +
'-bbar' baseCls + '-footer' Using this config, a call
to render() is not required. If applyTo is specified,
any value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the panel's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Setting autoHeight:true
means that the browser will manage the panel's height
based on its contents, and that Ext will not manage it
at all. If the panel is within a layout that manages
dimensions (fit, border, etc.) then setting
autoHeight:true can cause issues with scrolling and
will not generally work as expected since the panel
will take on the height of its contents rather than the
height required by the Ext layout.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHide" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel. If autoHide
is true, the panel will automatically hide after the
user mouses out of the panel. If autoHide is false, the
panel will continue to display until the user clicks
outside of the panel (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoLoad" type="String" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoLoadJS" type="Object/String/Function" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoScroll" type="Boolean" required="false">
					<help><![CDATA[ True to use overflow:'auto' on the panel's body element
and show scroll bars automatically when necessary,
false to clip any overflowing content (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bbar" type="Object/Array" required="false">
					<help><![CDATA[ The bottom toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
bottom toolbar after render, use getBottomToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyBorder" type="Boolean" required="false">
					<help><![CDATA[ True to display an interior border on the body element
of the panel, false to hide it (defaults to true). This
only applies when border == true. If border == true and
bodyBorder == false, the border will display as a 1px
wide inset border, giving the entire body element an
inset appearance.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyle" type="String" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyleJS" type="String/Object/Function" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the panel's body
element, false to hide them (defaults to true). By
default, the border is a 2px wide inset border, but
this can be further altered by setting bodyBorder to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonAlign" type="String" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonAlignJS" type="JS" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttons" type="Array" required="false">
					<help><![CDATA[ An array of Ext.Buttons or Ext.Button configs used to
add buttons to the footer of this panel.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cmargins" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the collapsed state in the format:{    top:
(top margin),    right: (right margin),    bottom:
(bottom margin)    left: (left margin),} May also be a
string containing space-separated, numeric margin
values. The order of the sides associated with each
value matches the way CSS processes margin values.  If
there is only one value, it applies to all sides. If
there are two values, the top and bottom borders are
set to the first value and the right and left are set
to the second. If there are three values, the top is
set to the first value, the left and right are set to
the second, and the bottom is set to the third. If
there are four values, they apply to the top, right,
bottom, and left, respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseFirst" type="Boolean" required="false">
					<help><![CDATA[ True to make sure the collapse/expand toggle button
always renders first (to the left of) any other tools
in the panel's title bar, false to render it last
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapseMode" type="String" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseModeJS" type="JS" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ By default, collapsible regions will be visible when
rendered. Set the collapsed config to true to render
the region as collapsed.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel collapsed, false to render it
expanded (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to allow the user to collapse this region
(defaults to false). If true, an expand/collapse tool
button will automatically be rendered into the title
bar of the region, otherwise the button will not be
shown. Note that a title bar is required to display the
toggle button -- if no region title is specified, the
region will only be collapsible if collapseMode is set
to 'mini'.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to make the panel collapsible and have the
expand/collapse toggle button automatically rendered
into the header tool button area, false to keep the
panel statically sized with no button (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsibleSplitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsibleSplitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentEl" type="String" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentElJS" type="JS" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this panel disabled (default is false). An
important note when using the disabled config on panels
is that IE will often fail to initialize the disabled
mask element correectly if the panel's layout has not
yet completed by the time the Panel is disabled during
the render process. If you experience this issue, you
may need to instead use the afterlayout event to
initialize the disabled state: new Ext.Panel({    ...
listeners: {        'afterlayout': {            fn:
function(p){                p.disable();            },
single: true // important, as many layouts
can occur        }    }});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of this Panel (defaults to
false). For custom drag/drop implementations, an
Ext.Panel.DD config could also be passed in this config
instead of true. Ext.Panel.DD is an internal,
undocumented class which moves a proxy Element around
in place of the Panel's element, but provides no other
behaviour during dragging or on drop. It is a subclass
of Ext.dd.DragSource, so behaviour may be added by
implementing the interface methods of Ext.dd.DragDrop
eg: new Ext.Panel({    title: 'Drag me',    x: 100,
y: 100,    renderTo: Ext.getBody(),    floating: true,
frame: true,    width: 400,    height: 200,
draggable: {//      Config option of Ext.Panel.DD
class.//      It's a floating Panel, so do not show a
placeholder proxy in the original position.
insertProxy: false,//      Called for each mousemove
event while dragging the DD object.        onDrag :
function(e){//          Record the x,y position of the
drag proxy so that we can//          position the Panel
at end of drag.            var pel =
this.proxy.getEl();            this.x =
pel.getLeft(true);            this.y =
pel.getTop(true);//          Keep the Shadow aligned if
there is one.            var s =
this.panel.getEl().shadow;            if (s) {
s.realign(this.x, this.y, pel.getWidth(),
pel.getHeight());            }        },//      Called
on the mouseup event.        endDrag : function(e){
this.panel.setPosition(this.x, this.y);        }
}}).show();
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="elements" type="String" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="elementsJS" type="JS" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="floatable" type="Boolean" required="false">
					<help><![CDATA[ True to allow clicking a collapsed region's bar to
display the region's panel floated above the layout,
false to force the user to fully expand a collapsed
region by clicking the expand button to see it again
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="floating" type="Boolean" required="false">
					<help><![CDATA[ True to float the panel (absolute position it with
automatic shimming and shadow), false to display it
inline where it is rendered (defaults to false). Note
that by default, setting floating to true will cause
the panel to display at negative offsets so that it is
hidden -- because the panel is absolute positioned, the
position must be set explicitly after render (e.g.,
myPanel.setPosition(100,100);). Also, when floating a
panel you should always assign a fixed width, otherwise
it will be auto width and will expand to fill to the
right edge of the viewport.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="footer" type="Boolean" required="false">
					<help><![CDATA[ True to create the footer element explicitly, false to
skip creating it. By default, when footer is not
specified, if one or more buttons have been added to
the panel the footer will be created automatically,
otherwise it will not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="frame" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel with custom rounded borders,
false to render with plain 1px square borders (defaults
to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="Boolean" required="false">
					<help><![CDATA[ True to create the header element explicitly, false to
skip creating it. By default, when header is not
specified, if a title is set the header will be created
automatically, otherwise it will not. If a title is set
but header is explicitly set to false, the header will
not be rendered.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="headerAsText" type="Boolean" required="false">
					<help><![CDATA[ True to display the panel title in the header, false to
hide it (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideCollapseTool" type="Boolean" required="false">
					<help><![CDATA[ True to hide the expand/collapse toggle button when
collapsible = true, false to display it (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="html" type="String" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="htmlJS" type="String/Object" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layout" type="String" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutJS" type="JS" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="margins" type="String" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="marginsJS" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width in pixels of all buttons in this panel
(defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum allowable height in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum allowable width in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events to
handle anything that is sensitive to the current size
of the viewport. This value is typically managed by the
chosen layout and should not need to be set manually.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderHidden" type="Boolean" required="false">
					<help><![CDATA[ True to hide each contained item on render (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadowOffset" type="Number" required="false">
					<help><![CDATA[ The number of pixels to offset the shadow if displayed
(defaults to 4). Note that this option only applies
when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shim" type="Boolean" required="false">
					<help><![CDATA[ False to disable the iframe shim in browsers which need
one (defaults to true). Note that this option only
applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="split" type="Boolean" required="false">
					<help><![CDATA[ True to display a Ext.SplitBar between this region and
its neighbor, allowing the user to resize the regions
dynamically (defaults to false). When split == true, it
is common to specify a minSize and maxSize for the
BoxComponent representing the region. These are not
native configs of BoxComponent, and are used only by
this class.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="splitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="splitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tbar" type="Object/Array" required="false">
					<help><![CDATA[ The top toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
top toolbar after render, use getTopToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to allow expanding and collapsing the panel (when
collapsible = true) by clicking anywhere in the header
bar, false to allow it only by clicking to tool button
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tools" type="Array" required="false">
					<help><![CDATA[ An array of tool button configs to be added to the
header tool area. When rendered, each tool is stored as
an Element referenced by a public property called
tools. Each tool config may contain the following
properties:  id : StringRequired. The type of tool to
create. Values may be toggle (Created by default when
collapsible is true) close minimize maximize restore
gear pin unpin right left up down refresh minus plus
help search save print  handler : FunctionRequired. The
function to call when clicked. Arguments passed are:
event : Ext.EventObjectThe click event. toolEl :
Ext.ElementThe tool Element. Panel : Ext.PanelThe host
Panel  scope : ObjectThe scope in which to call the
handler. qtip : String/ObjectA tip string, or a config
argument to Ext.QuickTip.register hidden : BooleanTrue
to initially render hidden. on : ObjectA listener
config object specifiying event listeners in the format
of an argument to addListener  Example usage: tools:[{
id:'refresh',    qtip: 'Refresh form Data',    //
hidden:true,    handler: function(event, toolEl,
panel){        // refresh logic    }}] Note that apart
from the toggle tool which is provided when a panel is
collapsible, these tools only provide the visual
button. Any required functionality must be provided by
adding handlers that implement the necessary behavior.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="useSplitTips" type="Boolean" required="false">
					<help><![CDATA[ True to display a tooltip when the user hovers over a
region's split bar (defaults to false). The tooltip
text will be the value of either splitTip or
collapsibleSplitTip as appropriate.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="closable" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="padding" type="Number" required="false">
					<help><![CDATA[ (ColdExt attribute) The number of pixels to use as
padding for the bodyStyle
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="region" type="String" required="false">
					<help><![CDATA[ The position within the viewport to attach this
component to. The 'center' region is always required
when using a viewport.
 ]]></help>
					<values default=""><value option="center" /><value option="east" /><value option="north" /><value option="south" /><value option="west" /></values>
				</parameter>
		</tag>
		<tag name="ext:arrayreader" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ (optional) The subscript within row Array that provides
an ID for the Record
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ (optional) The subscript within row Array that provides
an ID for the Record
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="root" type="String" required="false">
					<help><![CDATA[ name of the property which contains the Array of row
objects.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="rootJS" type="JS" required="false">
					<help><![CDATA[ name of the property which contains the Array of row
objects.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="successProperty" type="String" required="false">
					<help><![CDATA[ Name of the property from which to retrieve the success
attribute used by forms.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="successPropertyJS" type="JS" required="false">
					<help><![CDATA[ Name of the property from which to retrieve the success
attribute used by forms.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="totalProperty" type="String" required="false">
					<help><![CDATA[ Name of the property from which to retrieve the total
number of records in the dataset. This is only needed
if the whole dataset is not passed in one go, but is
being paged from the remote server.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="totalPropertyJS" type="JS" required="false">
					<help><![CDATA[ Name of the property from which to retrieve the total
number of records in the dataset. This is only needed
if the whole dataset is not passed in one go, but is
being paged from the remote server.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:asynctreenode" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowChildren" type="Boolean" required="false">
					<help><![CDATA[ False to not allow this node to have child nodes
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDrag" type="Boolean" required="false">
					<help><![CDATA[ False to make this node undraggable if draggable = true
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDrop" type="Boolean" required="false">
					<help><![CDATA[ False if this node cannot have child nodes dropped on
it (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="checked" type="Boolean" required="false">
					<help><![CDATA[ True to render a checked checkbox for this node, false
to render an unchecked checkbox (defaults to undefined
with no checkbox rendered)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ A css class to be added to the node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ A css class to be added to the node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ true to start the node disabled ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to make this node draggable (defaults to false) ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="expandable" type="Boolean" required="false">
					<help><![CDATA[ If set to true, the node will always show a plus/minus
icon, even when empty
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="expanded" type="Boolean" required="false">
					<help><![CDATA[ true to start the node expanded ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="href" type="String" required="false">
					<help><![CDATA[ URL of the link used for the node (defaults to #) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hrefJS" type="JS" required="false">
					<help><![CDATA[ URL of the link used for the node (defaults to #) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hrefTarget" type="String" required="false">
					<help><![CDATA[ target frame for the link ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hrefTargetJS" type="JS" required="false">
					<help><![CDATA[ target frame for the link ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="icon" type="String" required="false">
					<help><![CDATA[ The path to an icon for the node. The preferred way to
do this is to use the cls or iconCls attributes and add
the icon via a CSS background image.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconJS" type="JS" required="false">
					<help><![CDATA[ The path to an icon for the node. The preferred way to
do this is to use the cls or iconCls attributes and add
the icon via a CSS background image.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A css class to be added to the nodes icon element for
applying css background images
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A css class to be added to the nodes icon element for
applying css background images
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The id for this node. If one is not specified, one is
generated.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The id for this node. If one is not specified, one is
generated.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="isTarget" type="Boolean" required="false">
					<help><![CDATA[ False to not allow this node to act as a drop target
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="leaf" type="Boolean" required="false">
					<help><![CDATA[ true if this node is a leaf and does not have children ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="loader" type="TreeLoader" required="false">
					<help><![CDATA[ A TreeLoader to be used by this node (defaults to the
loader defined on the tree)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtip" type="String" required="false">
					<help><![CDATA[ An Ext QuickTip for the node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipJS" type="JS" required="false">
					<help><![CDATA[ An Ext QuickTip for the node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipCfg" type="String" required="false">
					<help><![CDATA[ An Ext QuickTip config for the node (used instead of
qtip)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipCfgJS" type="JS" required="false">
					<help><![CDATA[ An Ext QuickTip config for the node (used instead of
qtip)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="singleClickExpand" type="Boolean" required="false">
					<help><![CDATA[ True for single click expand on this node ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="text" type="String" required="false">
					<help><![CDATA[ The text for this node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textJS" type="JS" required="false">
					<help><![CDATA[ The text for this node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="uiProvider" type="Function" required="false">
					<help><![CDATA[ A UI class to use for this node (defaults to
Ext.tree.TreeNodeUI)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:button" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowDepress" type="Boolean" required="false">
					<help><![CDATA[ False to not allow a pressed Button to be depressed
(defaults to undefined). Only valid when enableToggle
is true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonSelector" type="String" required="false">
					<help><![CDATA[ (Optional) A DomQuery selector which is used to extract
the active, clickable element from the DOM structure
created. When a custom template is used, you must
ensure that this selector results in the selection of a
focussable element. Defaults to "button:first-child".
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonSelectorJS" type="JS" required="false">
					<help><![CDATA[ (Optional) A DomQuery selector which is used to extract
the active, clickable element from the DOM structure
created. When a custom template is used, you must
ensure that this selector results in the selection of a
focussable element. Defaults to "button:first-child".
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clickEvent" type="String" required="false">
					<help><![CDATA[ The type of event to map to the button's event handler
(defaults to 'click')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clickEventJS" type="JS" required="false">
					<help><![CDATA[ The type of event to map to the button's event handler
(defaults to 'click')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ True to start disabled (defaults to false) ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="enableToggle" type="Boolean" required="false">
					<help><![CDATA[ True to enable pressed/not pressed toggling (defaults
to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="handleMouseEvents" type="Boolean" required="false">
					<help><![CDATA[ False to disable visual cues on mouseover, mouseout and
mousedown (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="handler" type="Function" required="false">
					<help><![CDATA[ A function called when the button is clicked (can be
used instead of click event)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ True to start hidden (defaults to false) ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="icon" type="String" required="false">
					<help><![CDATA[ The path to an image to display in the button (the
image will be set as the background-image CSS property
of the button by default, so if you want a mixed
icon/text button, set cls:"x-btn-text-icon")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconJS" type="JS" required="false">
					<help><![CDATA[ The path to an image to display in the button (the
image will be set as the background-image CSS property
of the button by default, so if you want a mixed
icon/text button, set cls:"x-btn-text-icon")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A css class which sets a background image to be used as
the icon for this button
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A css class which sets a background image to be used as
the icon for this button
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menu" type="String" required="false">
					<help><![CDATA[ Standard menu attribute consisting of a reference to a
menu object, a menu id or a menu config blob (defaults
to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuJS" type="Mixed" required="false">
					<help><![CDATA[ Standard menu attribute consisting of a reference to a
menu object, a menu id or a menu config blob (defaults
to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuAlign" type="String" required="false">
					<help><![CDATA[ The position to align the menu to (see
Ext.Element.alignTo for more details, defaults to
'tl-bl?').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuAlignJS" type="JS" required="false">
					<help><![CDATA[ The position to align the menu to (see
Ext.Element.alignTo for more details, defaults to
'tl-bl?').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width for this button (used to give a set
of buttons a common width)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pressed" type="Boolean" required="false">
					<help><![CDATA[ True to start pressed (only if enableToggle = true) ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="repeat" type="Boolean/Object" required="false">
					<help><![CDATA[ True to repeat fire the click event while the mouse is
down. This can also be an Ext.util.ClickRepeater config
object (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="scope" type="Object" required="false">
					<help><![CDATA[ The scope of the handler ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ Set a DOM tabIndex for this button (defaults to
undefined)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="template" type="Ext.Template" required="false">
					<help><![CDATA[ (Optional) An Ext.Template with which to create the
Button's main element. This Template must contain
numeric substitution parameter 0 if it is to display
the text property. Changing the template could require
code modifications if required elements (e.g. a button)
aren't present.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="text" type="String" required="false">
					<help><![CDATA[ The button text ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textJS" type="JS" required="false">
					<help><![CDATA[ The button text ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="toggleGroup" type="String" required="false">
					<help><![CDATA[ The group this toggle button is a member of (only 1 per
group can be pressed)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="toggleGroupJS" type="JS" required="false">
					<help><![CDATA[ The group this toggle button is a member of (only 1 per
group can be pressed)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="toggleHandler" type="Function" required="false">
					<help><![CDATA[ Function called when a Button with enableToggle set to
true is clicked. Two arguments are passed: button :
Ext.Buttonthis Button object state : BooleanThe next
state if the Button, true means pressed.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltip" type="String" required="false">
					<help><![CDATA[ The tooltip for the button - can be a string or
QuickTips config object
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltipJS" type="String/Object" required="false">
					<help><![CDATA[ The tooltip for the button - can be a string or
QuickTips config object
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltipType" type="String" required="false">
					<help><![CDATA[ The type of tooltip to use. Either "qtip" (default) for
QuickTips or "title" for title attribute.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltipTypeJS" type="JS" required="false">
					<help><![CDATA[ The type of tooltip to use. Either "qtip" (default) for
QuickTips or "title" for title attribute.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="type" type="String" required="false">
					<help><![CDATA[ submit, reset or button - defaults to 'button' ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="typeJS" type="JS" required="false">
					<help><![CDATA[ submit, reset or button - defaults to 'button' ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:checkbox" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="checkbox#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="label" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#SeparateCaps(attributes.name)#"></values>
				</parameter>
				<parameter name="fieldLabel" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#attributes.label#"></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreate" type="String" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "checkbox",
autocomplete: "off"}).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreateJS" type="String/Object" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "checkbox",
autocomplete: "off"}).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="boxLabel" type="String" required="false">
					<help><![CDATA[ The text that appears beside the checkbox (defaults to
'')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="boxLabelJS" type="JS" required="false">
					<help><![CDATA[ The text that appears beside the checkbox (defaults to
'')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="checked" type="Boolean" required="false">
					<help><![CDATA[ True if the checkbox should render already checked
(defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="checkedCls" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the control is checked
(defaults to 'x-form-check-checked'). Note that this
class applies to both checkboxes and radio buttons and
is added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="checkedClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the control is checked
(defaults to 'x-form-check-checked'). Note that this
class applies to both checkboxes and radio buttons and
is added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="fieldClass" type="String" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusCls" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the control receives input
focus (defaults to 'x-form-check-focus'). Note that
this class applies to both checkboxes and radio buttons
and is added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the control receives input
focus (defaults to 'x-form-check-focus'). Note that
this class applies to both checkboxes and radio buttons
and is added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="handler" type="Function" required="false">
					<help><![CDATA[ A function called when the checked value changes (can
be used instead of handling the check event). The
handler is passed the following parameters:  checkbox :
Ext.form.CheckboxThe Checkbox being toggled. checked :
BooleanThe new checked state of the checkbox.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputType" type="String" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputTypeJS" type="JS" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputValue" type="String" required="false">
					<help><![CDATA[ The value that should go into the generated input
element's value attribute (defaults to undefined, with
no value attribute)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputValueJS" type="JS" required="false">
					<help><![CDATA[ The value that should go into the generated input
element's value attribute (defaults to undefined, with
no value attribute)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidText" type="String" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="mouseDownCls" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the control is being actively
clicked (defaults to 'x-form-check-down'). Note that
this class applies to both checkboxes and radio buttons
and is added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="mouseDownClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the control is being actively
clicked (defaults to 'x-form-check-down'). Note that
this class applies to both checkboxes and radio buttons
and is added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFx" type="String" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFxJS" type="JS" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTarget" type="String" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTargetJS" type="JS" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the control is hovered over
(defaults to 'x-form-check-over'). Note that this class
applies to both checkboxes and radio buttons and is
added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the control is hovered over
(defaults to 'x-form-check-over'). Note that this class
applies to both checkboxes and radio buttons and is
added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="readOnly" type="Boolean" required="false">
					<help><![CDATA[ True to mark the field as readOnly in HTML (defaults to
false) -- Note: this only sets the element's readOnly
DOM attribute.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="scope" type="Object" required="false">
					<help><![CDATA[ An object to use as the scope ("this" reference) of the
handler function (defaults to this Checkbox).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ The tabIndex for this field. Note this only applies to
fields that are rendered, not those which are built via
applyTo (defaults to 0, which allows the browser to
manage the tab index).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validateOnBlur" type="Boolean" required="false">
					<help><![CDATA[ Whether the field should validate when it loses focus
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validationDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds after user input
begins until validation is initiated (defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEvent" type="String" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEventJS" type="String/Boolean" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClass" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:checkboxgroup" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="checkboxGroup#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="label" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#SeparateCaps(attributes.name)#"></values>
				</parameter>
				<parameter name="fieldLabel" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#attributes.label#"></values>
				</parameter>
				<parameter name="allowBlank" type="Boolean" required="false">
					<help><![CDATA[ False to validate that at least one item in the group
is checked (defaults to true). If no items are selected
at validation time, {@link @blankText} will be used as
the error text.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreate" type="String" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreateJS" type="String/Object" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="blankText" type="String" required="false">
					<help><![CDATA[ Error text to display if the allowBlank validation
fails (defaults to "You must select at least one item
in this group")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="blankTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the allowBlank validation
fails (defaults to "You must select at least one item
in this group")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="columns" type="String" required="false">
					<help><![CDATA[ Specifies the number of columns to use when displaying
grouped checkbox/radio controls using automatic layout.
This config can take several types of values: 'auto' :
The controls will be rendered one per column on one row
and the width of each column will be evenly distributed
based on the width of the overall field container. This
is the default. Number : If you specific a number
(e.g., 3) that number of columns will be created and
the contained controls will be automatically
distributed based on the value of vertical. Array :
ObjectYou can also specify an array of column widths,
mixing integer (fixed width) and float (percentage
width) values as needed (e.g., [100, .25, .75]). Any
integer values will be rendered first, then any float
values will be calculated as a percentage of the
remaining space. Float values do not have to add up to
1 (100%) although if you want the controls to take up
the entire field container you should do so.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="columnsJS" type="String/Number/Array" required="false">
					<help><![CDATA[ Specifies the number of columns to use when displaying
grouped checkbox/radio controls using automatic layout.
This config can take several types of values: 'auto' :
The controls will be rendered one per column on one row
and the width of each column will be evenly distributed
based on the width of the overall field container. This
is the default. Number : If you specific a number
(e.g., 3) that number of columns will be created and
the contained controls will be automatically
distributed based on the value of vertical. Array :
ObjectYou can also specify an array of column widths,
mixing integer (fixed width) and float (percentage
width) values as needed (e.g., [100, .25, .75]). Any
integer values will be rendered first, then any float
values will be calculated as a percentage of the
remaining space. Float values do not have to add up to
1 (100%) although if you want the controls to take up
the entire field container you should do so.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClass" type="String" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputType" type="String" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputTypeJS" type="JS" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidText" type="String" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="Array" required="false">
					<help><![CDATA[ An Array of Checkboxes or Checkbox config objects to
arrange in the group.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFx" type="String" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFxJS" type="JS" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTarget" type="String" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTargetJS" type="JS" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="readOnly" type="Boolean" required="false">
					<help><![CDATA[ True to mark the field as readOnly in HTML (defaults to
false) -- Note: this only sets the element's readOnly
DOM attribute.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ The tabIndex for this field. Note this only applies to
fields that are rendered, not those which are built via
applyTo (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validateOnBlur" type="Boolean" required="false">
					<help><![CDATA[ Whether the field should validate when it loses focus
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validationDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds after user input
begins until validation is initiated (defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEvent" type="String" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEventJS" type="String/Boolean" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="Mixed" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vertical" type="Boolean" required="false">
					<help><![CDATA[ True to distribute contained controls across columns,
completely filling each column top to bottom before
starting on the next column. The number of controls in
each column will be automatically calculated to keep
columns as even as possible. The default value is
false, so that controls will be added to columns one at
a time, completely filling each row left to right
before starting on the next row.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:checkitem" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="activeClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the item becomes activated
(defaults to "x-menu-item-active")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the item becomes activated
(defaults to "x-menu-item-active")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="canActivate" type="Boolean" required="false">
					<help><![CDATA[ True if this item can be visually activated (defaults
to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="checked" type="Boolean" required="false">
					<help><![CDATA[ True to initialize this checkbox as checked (defaults
to false). Note that if this checkbox is part of a
radio group (group = true) only the last item in the
group that is initialized with checked = true will be
rendered as checked.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="group" type="String" required="false">
					<help><![CDATA[ All check items with the same group name will
automatically be grouped into a single-select radio
button group (defaults to '')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="groupJS" type="JS" required="false">
					<help><![CDATA[ All check items with the same group name will
automatically be grouped into a single-select radio
button group (defaults to '')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="groupClass" type="String" required="false">
					<help><![CDATA[ The default CSS class to use for radio group check
items (defaults to "x-menu-group-item")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="groupClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class to use for radio group check
items (defaults to "x-menu-group-item")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="handler" type="Function" required="false">
					<help><![CDATA[ A function that will handle the click event of this
menu item (defaults to undefined)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideDelay" type="Number" required="false">
					<help><![CDATA[ Length of time in milliseconds to wait before hiding
after a click (defaults to 100)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideOnClick" type="Boolean" required="false">
					<help><![CDATA[ True to hide the containing menu after this item is
clicked (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="href" type="String" required="false">
					<help><![CDATA[ The href attribute to use for the underlying anchor
link (defaults to '#').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hrefJS" type="JS" required="false">
					<help><![CDATA[ The href attribute to use for the underlying anchor
link (defaults to '#').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hrefTarget" type="String" required="false">
					<help><![CDATA[ The target attribute to use for the underlying anchor
link (defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hrefTargetJS" type="JS" required="false">
					<help><![CDATA[ The target attribute to use for the underlying anchor
link (defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="icon" type="String" required="false">
					<help><![CDATA[ The path to an icon to display in this item (defaults
to Ext.BLANK_IMAGE_URL). If icon is specified iconCls
should not be.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconJS" type="JS" required="false">
					<help><![CDATA[ The path to an icon to display in this item (defaults
to Ext.BLANK_IMAGE_URL). If icon is specified iconCls
should not be.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that specifies a background image that will
be used as the icon for this item (defaults to ''). If
iconCls is specified icon should not be.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that specifies a background image that will
be used as the icon for this item (defaults to ''). If
iconCls is specified icon should not be.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ The default CSS class to use for check items (defaults
to "x-menu-item x-menu-check-item")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class to use for check items (defaults
to "x-menu-item x-menu-check-item")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menu" type="String" required="false">
					<help><![CDATA[ Either an instance of Ext.menu.Menu or the config
object for an Ext.menu.Menu which acts as the submenu
when this item is activated.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuJS" type="Mixed" required="false">
					<help><![CDATA[ Either an instance of Ext.menu.Menu or the config
object for an Ext.menu.Menu which acts as the submenu
when this item is activated.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="scope" type="Object" required="false">
					<help><![CDATA[ The scope in which the handler function will be called.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="showDelay" type="Number" required="false">
					<help><![CDATA[ Length of time in milliseconds to wait before showing
this item (defaults to 200)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="text" type="String" required="false">
					<help><![CDATA[ The text to display in this item (defaults to ''). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textJS" type="JS" required="false">
					<help><![CDATA[ The text to display in this item (defaults to ''). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:coloritem" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="activeClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the item becomes activated
(defaults to "x-menu-item-active")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the item becomes activated
(defaults to "x-menu-item-active")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="canActivate" type="Boolean" required="false">
					<help><![CDATA[ True if this item can be visually activated (defaults
to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="handler" type="Function" required="false">
					<help><![CDATA[ A function that will handle the click event of this
menu item (defaults to undefined)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideDelay" type="Number" required="false">
					<help><![CDATA[ Length of time in milliseconds to wait before hiding
after a click (defaults to 100)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideOnClick" type="Boolean" required="false">
					<help><![CDATA[ True to hide the containing menu after this item is
clicked (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="scope" type="Object" required="false">
					<help><![CDATA[ The scope in which the handler function will be called.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:colormenu" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowOtherMenus" type="Boolean" required="false">
					<help><![CDATA[ True to allow multiple menus to be displayed at the
same time (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="defaultAlign" type="String" required="false">
					<help><![CDATA[ The default Ext.Element.alignTo anchor position value
for this menu relative to its element of origin
(defaults to "tl-bl?")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultAlignJS" type="JS" required="false">
					<help><![CDATA[ The default Ext.Element.alignTo anchor position value
for this menu relative to its element of origin
(defaults to "tl-bl?")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all items added
to this container either via the items config or via
the add method. The defaults config can contain any
number of name/value property pairs to be added to each
item, and should be valid for the types of items being
added to the menu.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ignoreParentClicks" type="Boolean" required="false">
					<help><![CDATA[ True to ignore clicks on any item in this menu that is
a parent item (displays a submenu) so that the submenu
is not dismissed when clicking the parent item
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ An array of items to be added to this menu. See add for
a list of valid item types.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ An array of items to be added to this menu. See add for
a list of valid item types.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width of the menu in pixels (defaults to
120)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True or "sides" for the default effect, "frame" for
4-way shadow, and "drop" for bottom-right shadow
(defaults to "sides")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True or "sides" for the default effect, "frame" for
4-way shadow, and "drop" for bottom-right shadow
(defaults to "sides")
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="subMenuAlign" type="String" required="false">
					<help><![CDATA[ The Ext.Element.alignTo anchor position value to use
for submenus of this menu (defaults to "tl-tr?")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="subMenuAlignJS" type="JS" required="false">
					<help><![CDATA[ The Ext.Element.alignTo anchor position value to use
for submenus of this menu (defaults to "tl-tr?")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:colorpalette" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowReselect" type="Boolean" required="false">
					<help><![CDATA[ If set to true then reselecting a color that is already
selected fires the select event
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ The CSS class to apply to the containing element
(defaults to "x-color-palette")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to apply to the containing element
(defaults to "x-color-palette")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tpl" type="String" required="false">
					<help><![CDATA[ An existing XTemplate instance to be used in place of
the default template for rendering the component.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tplJS" type="JS" required="false">
					<help><![CDATA[ An existing XTemplate instance to be used in place of
the default template for rendering the component.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ The initial color to highlight (should be a valid
6-digit color hex code without the # symbol). Note that
the hex codes are case-sensitive.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="JS" required="false">
					<help><![CDATA[ The initial color to highlight (should be a valid
6-digit color hex code without the # symbol). Note that
the hex codes are case-sensitive.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="colors" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:column" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="border" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="false"></values>
				</parameter>
				<parameter name="layout" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="form"></values>
				</parameter>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the columns body
element, false to hide them (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="columnWidth" type="Number" required="false">
					<help><![CDATA[ Indicates the default status of the filter (defaults to
false).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layout" type="String" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutJS" type="JS" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events to
handle anything that is sensitive to the current size
of the viewport. This value is typically managed by the
chosen layout and should not need to be set manually.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="type" type="String" required="false">
					<help><![CDATA[ The type of field to use for filtering; boolean, date,
list, numeric or string.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="typeJS" type="JS" required="false">
					<help><![CDATA[ The type of field to use for filtering; boolean, date,
list, numeric or string.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="String" required="false">
					<help><![CDATA[ The Ext.data.Store data index of the field this filter
represents. The dataIndex does not actually have to
exist in the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="widthJS" type="JS" required="false">
					<help><![CDATA[ The Ext.data.Store data index of the field this filter
represents. The dataIndex does not actually have to
exist in the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:columns" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="border" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="false"></values>
				</parameter>
				<parameter name="layout" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="column"></values>
				</parameter>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the columns body
element, false to hide them (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layout" type="String" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutJS" type="JS" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events to
handle anything that is sensitive to the current size
of the viewport. This value is typically managed by the
chosen layout and should not need to be set manually.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:combobox" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="comboBox#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="label" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#SeparateCaps(attributes.name)#"></values>
				</parameter>
				<parameter name="fieldLabel" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#attributes.label#"></values>
				</parameter>
				<parameter name="triggerAction" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="all"></values>
				</parameter>
				<parameter name="width" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#Application.ColdExt.defaultFieldWidth#"></values>
				</parameter>
				<parameter name="allQuery" type="String" required="false">
					<help><![CDATA[ The text query to send to the server to return all
records for the list with no filtering (defaults to '')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allQueryJS" type="JS" required="false">
					<help><![CDATA[ The text query to send to the server to return all
records for the list with no filtering (defaults to '')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowBlank" type="Boolean" required="false">
					<help><![CDATA[ False to validate that the value length > 0 (defaults
to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreate" type="Boolean/Object" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to: {tag: "input", type: "text", size:
"24", autocomplete: "off"})
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="blankText" type="String" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="blankTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disableKeyFilter" type="Boolean" required="false">
					<help><![CDATA[ True to disable input keystroke filtering (defaults to
false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="displayField" type="String" required="false">
					<help><![CDATA[ The underlying data field name to bind to this ComboBox
(defaults to undefined if mode = 'remote' or 'text' if
transforming a select)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="displayFieldJS" type="JS" required="false">
					<help><![CDATA[ The underlying data field name to bind to this ComboBox
(defaults to undefined if mode = 'remote' or 'text' if
transforming a select)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="editable" type="Boolean" required="false">
					<help><![CDATA[ False to prevent the user from typing text directly
into the field, just like a traditional select
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="emptyClass" type="String" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyText" type="String" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyTextJS" type="JS" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClass" type="String" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="forceSelection" type="Boolean" required="false">
					<help><![CDATA[ True to restrict the selected value to one of the
values in the list, false to allow the user to set
arbitrary text into the field (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="handleHeight" type="Number" required="false">
					<help><![CDATA[ The height in pixels of the dropdown list resize handle
if resizable = true (defaults to 8)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hiddenId" type="String" required="false">
					<help><![CDATA[ If hiddenName is specified, hiddenId can also be
provided to give the hidden field a unique id (defaults
to the hiddenName). The hiddenId and combo id should be
different, since no two DOM nodes should share the same
id.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hiddenIdJS" type="JS" required="false">
					<help><![CDATA[ If hiddenName is specified, hiddenId can also be
provided to give the hidden field a unique id (defaults
to the hiddenName). The hiddenId and combo id should be
different, since no two DOM nodes should share the same
id.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hiddenName" type="String" required="false">
					<help><![CDATA[ If specified, a hidden form field with this name is
dynamically generated to store the field's data value
(defaults to the underlying DOM element's name).
Required for the combo's value to automatically post
during a form submission. Note that the hidden field's
id will also default to this name if hiddenId is not
specified. The combo's id and the hidden field's ids
should be different, since no two DOM nodes should
share the same id, so if the combo and hidden names are
the same, you should specify a unique hiddenId.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hiddenNameJS" type="JS" required="false">
					<help><![CDATA[ If specified, a hidden form field with this name is
dynamically generated to store the field's data value
(defaults to the underlying DOM element's name).
Required for the combo's value to automatically post
during a form submission. Note that the hidden field's
id will also default to this name if hiddenId is not
specified. The combo's id and the hidden field's ids
should be different, since no two DOM nodes should
share the same id, so if the combo and hidden names are
the same, you should specify a unique hiddenId.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideTrigger" type="Boolean" required="false">
					<help><![CDATA[ True to hide the trigger element and display only the
base text field (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputType" type="String" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputTypeJS" type="JS" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidText" type="String" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemSelector" type="String" required="false">
					<help><![CDATA[ This setting is required if a custom XTemplate has been
specified in tpl which assigns a class other than
'x-combo-list-item' to dropdown list items. A simple
CSS selector (e.g. div.some-class or span:first-child)
that will be used to determine what nodes the DataView
which handles the dropdown display will be working
with.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemSelectorJS" type="JS" required="false">
					<help><![CDATA[ This setting is required if a custom XTemplate has been
specified in tpl which assigns a class other than
'x-combo-list-item' to dropdown list items. A simple
CSS selector (e.g. div.some-class or span:first-child)
that will be used to determine what nodes the DataView
which handles the dropdown display will be working
with.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="lazyInit" type="Boolean" required="false">
					<help><![CDATA[ True to not initialize the list for this combo until
the field is focused (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="lazyRender" type="Boolean" required="false">
					<help><![CDATA[ True to prevent the ComboBox from rendering until
requested (should always be used when rendering into an
Ext.Editor, defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="listAlign" type="String" required="false">
					<help><![CDATA[ A valid anchor position value. See Ext.Element.alignTo
for details on supported anchor positions (defaults to
'tl-bl')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listAlignJS" type="JS" required="false">
					<help><![CDATA[ A valid anchor position value. See Ext.Element.alignTo
for details on supported anchor positions (defaults to
'tl-bl')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listClass" type="String" required="false">
					<help><![CDATA[ CSS class to apply to the dropdown list element
(defaults to '')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class to apply to the dropdown list element
(defaults to '')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listWidth" type="Number" required="false">
					<help><![CDATA[ The width in pixels of the dropdown list (defaults to
the width of the ComboBox field)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="loadingText" type="String" required="false">
					<help><![CDATA[ The text to display in the dropdown list while data is
loading. Only applies when mode = 'remote' (defaults to
'Loading...')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="loadingTextJS" type="JS" required="false">
					<help><![CDATA[ The text to display in the dropdown list while data is
loading. Only applies when mode = 'remote' (defaults to
'Loading...')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskRe" type="RegExp" required="false">
					<help><![CDATA[ An input mask regular expression that will be used to
filter keystrokes that don't match (defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxHeight" type="Number" required="false">
					<help><![CDATA[ The maximum height in pixels of the dropdown list
before scrollbars are shown (defaults to 300)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLength" type="Number" required="false">
					<help><![CDATA[ Maximum input field length allowed (defaults to
Number.MAX_VALUE)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minChars" type="Number" required="false">
					<help><![CDATA[ The minimum number of characters the user must type
before autocomplete and typeahead activate (defaults to
4 if remote or 0 if local, does not apply if editable =
false)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum height in pixels of the dropdown list when
the list is constrained by its distance to the viewport
edges (defaults to 90)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLength" type="Number" required="false">
					<help><![CDATA[ Minimum input field length required (defaults to 0) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minListWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width of the dropdown list in pixels
(defaults to 70, will be ignored if listWidth has a
higher value)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="mode" type="String" required="false">
					<help><![CDATA[ Set to 'local' if the ComboBox loads local data
(defaults to 'remote' which loads from the server)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="modeJS" type="JS" required="false">
					<help><![CDATA[ Set to 'local' if the ComboBox loads local data
(defaults to 'remote' which loads from the server)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFx" type="String" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFxJS" type="JS" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTarget" type="String" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTargetJS" type="JS" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageSize" type="Number" required="false">
					<help><![CDATA[ If greater than 0, a paging toolbar is displayed in the
footer of the dropdown list and the filter queries will
execute with page start and limit parameters. Only
applies when mode = 'remote' (defaults to 0)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="queryDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds to delay between the
start of typing and sending the query to filter the
dropdown list (defaults to 500 if mode = 'remote' or 10
if mode = 'local')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="queryParam" type="String" required="false">
					<help><![CDATA[ Name of the query as it will be passed on the
querystring (defaults to 'query')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="queryParamJS" type="JS" required="false">
					<help><![CDATA[ Name of the query as it will be passed on the
querystring (defaults to 'query')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="readOnly" type="Boolean" required="false">
					<help><![CDATA[ True to mark the field as readOnly in HTML (defaults to
false) -- Note: this only sets the element's readOnly
DOM attribute.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="regex" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object to be tested against the
field value during validation (defaults to null). If
available, this regex will be evaluated only after the
basic validators all return true, and will be passed
the current field value. If the test fails, the field
will be marked invalid using regexText.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexText" type="String" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="resizable" type="Boolean" required="false">
					<help><![CDATA[ True to add a resize handle to the bottom of the
dropdown list (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="selectOnFocus" type="Boolean" required="false">
					<help><![CDATA[ True to select any existing text in the field
immediately on focus. Only applies when editable = true
(defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="selectedClass" type="String" required="false">
					<help><![CDATA[ CSS class to apply to the selected item in the dropdown
list (defaults to 'x-combo-selected')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selectedClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class to apply to the selected item in the dropdown
list (defaults to 'x-combo-selected')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True or "sides" for the default effect, "frame" for
4-way shadow, and "drop" for bottom-right
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True or "sides" for the default effect, "frame" for
4-way shadow, and "drop" for bottom-right
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="store" type="Ext.data.Store/Array" required="false">
					<help><![CDATA[ The data source to which this combo is bound (defaults
to undefined). This can be any Ext.data.Store subclass,
a 1-dimensional array (e.g., ['Foo','Bar']) or a
2-dimensional array (e.g., [['f','Foo'],['b','Bar']]).
Arrays will be converted to a Ext.data.SimpleStore
internally. 1-dimensional arrays will automatically be
expanded (each array item will be the combo value and
text) and for multi-dimensional arrays, the value in
index 0 of each item will be assumed to be the combo
value, while the value at index 1 is assumed to be the
combo text.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stripCharsRe" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object used to strip unwanted
content from the value before validation (defaults to
null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ The tabIndex for this field. Note this only applies to
fields that are rendered, not those which are built via
applyTo (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ If supplied, a header element is created containing
this text and added into the top of the dropdown list
(defaults to undefined, with no header element)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ If supplied, a header element is created containing
this text and added into the top of the dropdown list
(defaults to undefined, with no header element)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tpl" type="String" required="false">
					<help><![CDATA[ The template string, or Ext.XTemplate instance to use
to display each item in the dropdown list. Use this to
create custom UI layouts for items in the list.  If you
wish to preserve the default visual look of list items,
add the CSS class name x-combo-list-item to the
template's container element.  The template must
contain one or more substitution parameters using field
names from the Combo's Store. An example of a custom
template would be adding an ext:qtip attribute which
might display other fields from the Store.  The
dropdown list is displayed in a DataView. See
Ext.DataView for details.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tplJS" type="String/Ext.XTemplate" required="false">
					<help><![CDATA[ The template string, or Ext.XTemplate instance to use
to display each item in the dropdown list. Use this to
create custom UI layouts for items in the list.  If you
wish to preserve the default visual look of list items,
add the CSS class name x-combo-list-item to the
template's container element.  The template must
contain one or more substitution parameters using field
names from the Combo's Store. An example of a custom
template would be adding an ext:qtip attribute which
might display other fields from the Store.  The
dropdown list is displayed in a DataView. See
Ext.DataView for details.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="transform" type="String" required="false">
					<help><![CDATA[ The id, DOM node or element of an existing HTML SELECT
to convert to a ComboBox. Note that if you specify this
and the combo is going to be in a Ext.form.BasicForm or
Ext.form.FormPanel, you must also set lazyRender =
true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="transformJS" type="Mixed" required="false">
					<help><![CDATA[ The id, DOM node or element of an existing HTML SELECT
to convert to a ComboBox. Note that if you specify this
and the combo is going to be in a Ext.form.BasicForm or
Ext.form.FormPanel, you must also set lazyRender =
true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="triggerAction" type="String" required="false">
					<help><![CDATA[ The action to execute when the trigger is clicked. Use
'all' to run the query specified by the allQuery config
option (defaults to 'query')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="triggerActionJS" type="JS" required="false">
					<help><![CDATA[ The action to execute when the trigger is clicked. Use
'all' to run the query specified by the allQuery config
option (defaults to 'query')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="triggerClass" type="String" required="false">
					<help><![CDATA[ An additional CSS class used to style the trigger
button. The trigger will always get the class
'x-form-trigger' and triggerClass will be appended if
specified (defaults to 'x-form-arrow-trigger' which
displays a downward arrow icon).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="triggerClassJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class used to style the trigger
button. The trigger will always get the class
'x-form-trigger' and triggerClass will be appended if
specified (defaults to 'x-form-arrow-trigger' which
displays a downward arrow icon).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="typeAhead" type="Boolean" required="false">
					<help><![CDATA[ True to populate and autoselect the remainder of the
text being typed after a configurable delay
(typeAheadDelay) if it matches a known value (defaults
to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="typeAheadDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds to wait until the
typeahead text is displayed if typeAhead = true
(defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validateOnBlur" type="Boolean" required="false">
					<help><![CDATA[ Whether the field should validate when it loses focus
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validationDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds after user input
begins until validation is initiated (defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEvent" type="String" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEventJS" type="String/Boolean" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validator" type="Function" required="false">
					<help><![CDATA[ A custom validation function to be called during field
validation (defaults to null). If specified, this
function will be called only after the built-in
validations (allowBlank, minLength, maxLength) and any
configured vtype all return true. This function will be
passed the current field value and expected to return
boolean true if the value is valid or a string error
message if invalid.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="Mixed" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueField" type="String" required="false">
					<help><![CDATA[ The underlying data value name to bind to this ComboBox
(defaults to undefined if mode = 'remote' or 'value' if
transforming a select) Note: use of a valueField
requires the user to make a selection in order for a
value to be mapped.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueFieldJS" type="JS" required="false">
					<help><![CDATA[ The underlying data value name to bind to this ComboBox
(defaults to undefined if mode = 'remote' or 'value' if
transforming a select) Note: use of a valueField
requires the user to make a selection in order for a
value to be mapped.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueNotFoundText" type="String" required="false">
					<help><![CDATA[ When using a name/value combo, if the value passed to
setValue is not found in the store, valueNotFoundText
will be displayed as the field text if defined
(defaults to undefined). If this defaut text is used,
it means there is no value set and no validation will
occur on this field.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueNotFoundTextJS" type="JS" required="false">
					<help><![CDATA[ When using a name/value combo, if the value passed to
setValue is not found in the store, valueNotFoundText
will be displayed as the field text if defined
(defaults to undefined). If this defaut text is used,
it means there is no value set and no validation will
occur on this field.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtype" type="String" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeJS" type="JS" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeText" type="String" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeTextJS" type="JS" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="return" type="String" required="false">
					<help><![CDATA[ (ColdExt attribute) The data that is submitted by this
ComboBox component. 'value' to use the selected item's
underlying id/value, or 'text' to use the text that is
shown in the control when an item is selected.
 ]]></help>
					<values default="text"><value option="value" /><value option="text" /></values>
				</parameter>
		</tag>
		<tag name="ext:config" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
		</tag>
		<tag name="ext:createchild" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="class" type="String" required="false">
					<help><![CDATA[ The class of the HTML Element being created ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="classJS" type="JS" required="false">
					<help><![CDATA[ The class of the HTML Element being created ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The id of the HTML Element being created ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The id of the HTML Element being created ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="insertBefore" type="HTML Element" required="false">
					<help><![CDATA[ (optional) a child element of this element which the
node will be inserted before.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ The style of the HTML Element being created ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ The style of the HTML Element being created ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tag" type="String" required="false">
					<help><![CDATA[ The HTML element to be created (e.g. h1, h2, div, span,
etc). The text inside this tag will be inserted as node
text inside the newly created HTML element.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:dataview" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="deferEmptyText" type="Boolean" required="false">
					<help><![CDATA[ True to defer emptyText being applied until the store's
first load
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyText" type="String" required="false">
					<help><![CDATA[ The text to display in the view when there is no data
to display (defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyTextJS" type="JS" required="false">
					<help><![CDATA[ The text to display in the view when there is no data
to display (defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemSelector" type="String" required="false">
					<help><![CDATA[ This is a required setting. A simple CSS selector (e.g.
div.some-class or span:first-child) that will be used
to determine what nodes this DataView will be working
with.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemSelectorJS" type="JS" required="false">
					<help><![CDATA[ This is a required setting. A simple CSS selector (e.g.
div.some-class or span:first-child) that will be used
to determine what nodes this DataView will be working
with.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="loadingText" type="String" required="false">
					<help><![CDATA[ A string to display during data load operations
(defaults to undefined). If specified, this text will
be displayed in a loading div and the view's contents
will be cleared while loading, otherwise the view's
contents will continue to display normally until the
new data is loaded and the contents are replaced.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="loadingTextJS" type="JS" required="false">
					<help><![CDATA[ A string to display during data load operations
(defaults to undefined). If specified, this text will
be displayed in a loading div and the view's contents
will be cleared while loading, otherwise the view's
contents will continue to display normally until the
new data is loaded and the contents are replaced.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="multiSelect" type="Boolean" required="false">
					<help><![CDATA[ True to allow selection of more than one item at a
time, false to allow selection of only a single item at
a time or no selection at all, depending on the value
of singleSelect (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="overClass" type="String" required="false">
					<help><![CDATA[ A CSS class to apply to each item in the view on
mouseover (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClassJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to apply to each item in the view on
mouseover (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selectedClass" type="String" required="false">
					<help><![CDATA[ A CSS class to apply to each selected item in the view
(defaults to 'x-view-selected').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selectedClassJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to apply to each selected item in the view
(defaults to 'x-view-selected').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="simpleSelect" type="Boolean" required="false">
					<help><![CDATA[ True to enable multiselection by clicking on multiple
items without requiring the user to hold Shift or Ctrl,
false to force the user to hold Ctrl or Shift to select
more than on item (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="singleSelect" type="Boolean" required="false">
					<help><![CDATA[ True to allow selection of exactly one item at a time,
false to allow no selection at all (defaults to false).
Note that if multiSelect = true, this value will be
ignored.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="store" type="Ext.data.Store" required="false">
					<help><![CDATA[ The Ext.data.Store to bind this DataView to. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tpl" type="String" required="false">
					<help><![CDATA[ The HTML fragment or an array of fragments that will
make up the template used by this DataView. This should
be specified in the same format expected by the
constructor of Ext.XTemplate.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tplJS" type="String/Array" required="false">
					<help><![CDATA[ The HTML fragment or an array of fragments that will
make up the template used by this DataView. This should
be specified in the same format expected by the
constructor of Ext.XTemplate.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="trackOver" type="Boolean" required="false">
					<help><![CDATA[ True to enable mouseenter and mouseleave events ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:datefield" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="dateField#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="label" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#SeparateCaps(attributes.name)#"></values>
				</parameter>
				<parameter name="fieldLabel" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#attributes.label#"></values>
				</parameter>
				<parameter name="width" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#Application.ColdExt.defaultFieldWidth#"></values>
				</parameter>
				<parameter name="allowBlank" type="Boolean" required="false">
					<help><![CDATA[ False to validate that the value length > 0 (defaults
to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="altFormats" type="String" required="false">
					<help><![CDATA[ Multiple date formats separated by "|" to try when
parsing a user input value and it doesn't match the
defined format (defaults to
'm/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|
m/d|m-d|md|mdy|mdY|d|Y-m-d').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="altFormatsJS" type="JS" required="false">
					<help><![CDATA[ Multiple date formats separated by "|" to try when
parsing a user input value and it doesn't match the
defined format (defaults to
'm/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|
m/d|m-d|md|mdy|mdY|d|Y-m-d').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreate" type="String" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"10", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreateJS" type="String/Object" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"10", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="blankText" type="String" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="blankTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disableKeyFilter" type="Boolean" required="false">
					<help><![CDATA[ True to disable input keystroke filtering (defaults to
false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledDates" type="Array" required="false">
					<help><![CDATA[ An array of "dates" to disable, as strings. These
strings will be used to build a dynamic regular
expression so they are very powerful. Some examples:
["03/08/2003", "09/16/2003"] would disable those exact
dates ["03/08", "09/16"] would disable those days for
every year ["^03/08"] would only match the beginning
(useful if you are using short years) ["03/../2006"]
would disable every day in March 2006 ["^03"] would
disable every day in every March  Note that the format
of the dates included in the array should exactly match
the format config. In order to support regular
expressions, if you are using a date format that has
"." in it, you will have to escape the dot when
restricting dates. For example: ["03\\.08\\.03"].
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledDatesText" type="String" required="false">
					<help><![CDATA[ The tooltip text to display when the date falls on a
disabled date (defaults to 'Disabled')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledDatesTextJS" type="JS" required="false">
					<help><![CDATA[ The tooltip text to display when the date falls on a
disabled date (defaults to 'Disabled')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledDays" type="Array" required="false">
					<help><![CDATA[ An array of days to disable, 0 based. For example, [0,
6] disables Sunday and Saturday (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledDaysText" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the date falls on a
disabled day (defaults to 'Disabled')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledDaysTextJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the date falls on a
disabled day (defaults to 'Disabled')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClass" type="String" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyText" type="String" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyTextJS" type="JS" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClass" type="String" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="format" type="String" required="false">
					<help><![CDATA[ The default date format string which can be overriden
for localization support. The format must be valid
according to Date.parseDate (defaults to 'm/d/Y').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="formatJS" type="JS" required="false">
					<help><![CDATA[ The default date format string which can be overriden
for localization support. The format must be valid
according to Date.parseDate (defaults to 'm/d/Y').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideTrigger" type="Boolean" required="false">
					<help><![CDATA[ True to hide the trigger element and display only the
base text field (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputType" type="String" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputTypeJS" type="JS" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidText" type="String" required="false">
					<help><![CDATA[ The error text to display when the date in the field is
invalid (defaults to '{value} is not a valid date - it
must be in the format {format}').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display when the date in the field is
invalid (defaults to '{value} is not a valid date - it
must be in the format {format}').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskRe" type="RegExp" required="false">
					<help><![CDATA[ An input mask regular expression that will be used to
filter keystrokes that don't match (defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLength" type="Number" required="false">
					<help><![CDATA[ Maximum input field length allowed (defaults to
Number.MAX_VALUE)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxText" type="String" required="false">
					<help><![CDATA[ The error text to display when the date in the cell is
after maxValue (defaults to 'The date in this field
must be before {maxValue}').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display when the date in the cell is
after maxValue (defaults to 'The date in this field
must be before {maxValue}').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxValue" type="String" required="false">
					<help><![CDATA[ The maximum allowed date. Can be either a Javascript
date object or a string date in a valid format
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxValueJS" type="Date/String" required="false">
					<help><![CDATA[ The maximum allowed date. Can be either a Javascript
date object or a string date in a valid format
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLength" type="Number" required="false">
					<help><![CDATA[ Minimum input field length required (defaults to 0) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minText" type="String" required="false">
					<help><![CDATA[ The error text to display when the date in the cell is
before minValue (defaults to 'The date in this field
must be after {minValue}').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display when the date in the cell is
before minValue (defaults to 'The date in this field
must be after {minValue}').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minValue" type="String" required="false">
					<help><![CDATA[ The minimum allowed date. Can be either a Javascript
date object or a string date in a valid format
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minValueJS" type="Date/String" required="false">
					<help><![CDATA[ The minimum allowed date. Can be either a Javascript
date object or a string date in a valid format
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFx" type="String" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFxJS" type="JS" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTarget" type="String" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTargetJS" type="JS" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="readOnly" type="Boolean" required="false">
					<help><![CDATA[ True to mark the field as readOnly in HTML (defaults to
false) -- Note: this only sets the element's readOnly
DOM attribute.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="regex" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object to be tested against the
field value during validation (defaults to null). If
available, this regex will be evaluated only after the
basic validators all return true, and will be passed
the current field value. If the test fails, the field
will be marked invalid using regexText.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexText" type="String" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selectOnFocus" type="Boolean" required="false">
					<help><![CDATA[ True to automatically select any existing field text
when the field receives input focus (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="showToday" type="Boolean" required="false">
					<help><![CDATA[ False to hide the footer area of the DatePicker
containing the Today button and disable the keyboard
handler for spacebar that selects the current date
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stripCharsRe" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object used to strip unwanted
content from the value before validation (defaults to
null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ The tabIndex for this field. Note this only applies to
fields that are rendered, not those which are built via
applyTo (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="triggerClass" type="String" required="false">
					<help><![CDATA[ An additional CSS class used to style the trigger
button. The trigger will always get the class
'x-form-trigger' and triggerClass will be appended if
specified (defaults to 'x-form-date-trigger' which
displays a calendar icon).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="triggerClassJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class used to style the trigger
button. The trigger will always get the class
'x-form-trigger' and triggerClass will be appended if
specified (defaults to 'x-form-date-trigger' which
displays a calendar icon).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validateOnBlur" type="Boolean" required="false">
					<help><![CDATA[ Whether the field should validate when it loses focus
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validationDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds after user input
begins until validation is initiated (defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEvent" type="String" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEventJS" type="String/Boolean" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validator" type="Function" required="false">
					<help><![CDATA[ A custom validation function to be called during field
validation (defaults to null). If specified, this
function will be called only after the built-in
validations (allowBlank, minLength, maxLength) and any
configured vtype all return true. This function will be
passed the current field value and expected to return
boolean true if the value is valid or a string error
message if invalid.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="Mixed" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtype" type="String" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeJS" type="JS" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeText" type="String" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeTextJS" type="JS" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:dateitem" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="activeClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the item becomes activated
(defaults to "x-menu-item-active")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the item becomes activated
(defaults to "x-menu-item-active")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="canActivate" type="Boolean" required="false">
					<help><![CDATA[ True if this item can be visually activated (defaults
to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="handler" type="Function" required="false">
					<help><![CDATA[ A function that will handle the click event of this
menu item (defaults to undefined)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideDelay" type="Number" required="false">
					<help><![CDATA[ Length of time in milliseconds to wait before hiding
after a click (defaults to 100)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideOnClick" type="Boolean" required="false">
					<help><![CDATA[ True to hide the containing menu after this item is
clicked (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="scope" type="Object" required="false">
					<help><![CDATA[ The scope in which the handler function will be called.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:datemenu" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowOtherMenus" type="Boolean" required="false">
					<help><![CDATA[ True to allow multiple menus to be displayed at the
same time (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="defaultAlign" type="String" required="false">
					<help><![CDATA[ The default Ext.Element.alignTo anchor position value
for this menu relative to its element of origin
(defaults to "tl-bl?")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultAlignJS" type="JS" required="false">
					<help><![CDATA[ The default Ext.Element.alignTo anchor position value
for this menu relative to its element of origin
(defaults to "tl-bl?")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all items added
to this container either via the items config or via
the add method. The defaults config can contain any
number of name/value property pairs to be added to each
item, and should be valid for the types of items being
added to the menu.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ignoreParentClicks" type="Boolean" required="false">
					<help><![CDATA[ True to ignore clicks on any item in this menu that is
a parent item (displays a submenu) so that the submenu
is not dismissed when clicking the parent item
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ An array of items to be added to this menu. See add for
a list of valid item types.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ An array of items to be added to this menu. See add for
a list of valid item types.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width of the menu in pixels (defaults to
120)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True or "sides" for the default effect, "frame" for
4-way shadow, and "drop" for bottom-right shadow
(defaults to "sides")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True or "sides" for the default effect, "frame" for
4-way shadow, and "drop" for bottom-right shadow
(defaults to "sides")
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="subMenuAlign" type="String" required="false">
					<help><![CDATA[ The Ext.Element.alignTo anchor position value to use
for submenus of this menu (defaults to "tl-tr?")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="subMenuAlignJS" type="JS" required="false">
					<help><![CDATA[ The Ext.Element.alignTo anchor position value to use
for submenus of this menu (defaults to "tl-tr?")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:datepicker" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="cancelText" type="String" required="false">
					<help><![CDATA[ The text to display on the cancel button ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cancelTextJS" type="JS" required="false">
					<help><![CDATA[ The text to display on the cancel button ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="constrainToViewport" type="Boolean" required="false">
					<help><![CDATA[ Deprecated (not currently used). True to constrain the
date picker to the viewport (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dayNames" type="Array" required="false">
					<help><![CDATA[ An array of textual day names which can be overriden
for localization support (defaults to Date.dayNames)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledDates" type="Array" required="false">
					<help><![CDATA[ An array of "dates" to disable, as strings. These
strings will be used to build a dynamic regular
expression so they are very powerful. Some examples:
["03/08/2003", "09/16/2003"] would disable those exact
dates ["03/08", "09/16"] would disable those days for
every year ["^03/08"] would only match the beginning
(useful if you are using short years) ["03/../2006"]
would disable every day in March 2006 ["^03"] would
disable every day in every March  Note that the format
of the dates included in the array should exactly match
the format config. In order to support regular
expressions, if you are using a date format that has
"." in it, you will have to escape the dot when
restricting dates. For example: ["03\\.08\\.03"].
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledDatesRE" type="RegExp" required="false">
					<help><![CDATA[ JavaScript regular expression used to disable a pattern
of dates (defaults to null). The disabledDates config
will generate this regex internally, but if you specify
disabledDatesRE it will take precedence over the
disabledDates value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledDatesText" type="String" required="false">
					<help><![CDATA[ The tooltip text to display when the date falls on a
disabled date (defaults to "Disabled")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledDatesTextJS" type="JS" required="false">
					<help><![CDATA[ The tooltip text to display when the date falls on a
disabled date (defaults to "Disabled")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledDays" type="Array" required="false">
					<help><![CDATA[ An array of days to disable, 0-based. For example, [0,
6] disables Sunday and Saturday (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledDaysText" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the date falls on a
disabled day (defaults to "Disabled")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledDaysTextJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the date falls on a
disabled day (defaults to "Disabled")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="format" type="String" required="false">
					<help><![CDATA[ The default date format string which can be overriden
for localization support. The format must be valid
according to Date.parseDate (defaults to 'm/d/y').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="formatJS" type="JS" required="false">
					<help><![CDATA[ The default date format string which can be overriden
for localization support. The format must be valid
according to Date.parseDate (defaults to 'm/d/y').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxDate" type="Date" required="false">
					<help><![CDATA[ Maximum allowable date (JavaScript date object,
defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxText" type="String" required="false">
					<help><![CDATA[ The error text to display if the maxDate validation
fails (defaults to "This date is after the maximum
date")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display if the maxDate validation
fails (defaults to "This date is after the maximum
date")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minDate" type="Date" required="false">
					<help><![CDATA[ Minimum allowable date (JavaScript date object,
defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minText" type="String" required="false">
					<help><![CDATA[ The error text to display if the minDate validation
fails (defaults to "This date is before the minimum
date")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display if the minDate validation
fails (defaults to "This date is before the minimum
date")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monthNames" type="Array" required="false">
					<help><![CDATA[ An array of textual month names which can be overriden
for localization support (defaults to Date.monthNames)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monthYearText" type="String" required="false">
					<help><![CDATA[ The header month selector tooltip (defaults to 'Choose
a month (Control+Up/Down to move years)')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monthYearTextJS" type="JS" required="false">
					<help><![CDATA[ The header month selector tooltip (defaults to 'Choose
a month (Control+Up/Down to move years)')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nextText" type="String" required="false">
					<help><![CDATA[ The next month navigation button tooltip (defaults to
'Next Month (Control+Right)')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nextTextJS" type="JS" required="false">
					<help><![CDATA[ The next month navigation button tooltip (defaults to
'Next Month (Control+Right)')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="okText" type="String" required="false">
					<help><![CDATA[ The text to display on the ok button ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="okTextJS" type="JS" required="false">
					<help><![CDATA[ The text to display on the ok button ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="prevText" type="String" required="false">
					<help><![CDATA[ The previous month navigation button tooltip (defaults
to 'Previous Month (Control+Left)')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="prevTextJS" type="JS" required="false">
					<help><![CDATA[ The previous month navigation button tooltip (defaults
to 'Previous Month (Control+Left)')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="showToday" type="Boolean" required="false">
					<help><![CDATA[ False to hide the footer area containing the Today
button and disable the keyboard handler for spacebar
that selects the current date (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="startDay" type="Number" required="false">
					<help><![CDATA[ Day index at which the week should begin, 0-based
(defaults to 0, which is Sunday)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="todayText" type="String" required="false">
					<help><![CDATA[ The text to display on the button that selects the
current date (defaults to "Today")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="todayTextJS" type="JS" required="false">
					<help><![CDATA[ The text to display on the button that selects the
current date (defaults to "Today")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="todayTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display for the button that selects the
current date (defaults to "{current date} (Spacebar)")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="todayTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display for the button that selects the
current date (defaults to "{current date} (Spacebar)")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:editorgridpanel" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
true if the Ext.Fx class is available, otherwise
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animFloat" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel that will
close again once the user mouses out of that panel (or
clicks out if autoHide = false). Setting animFloat to
false will prevent the open and close of these floated
panels from being animated (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEncode" type="Boolean" required="false">
					<help><![CDATA[ True to automatically HTML encode and decode values pre
and post edit (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoExpandColumn" type="String" required="false">
					<help><![CDATA[ The id of a column in this grid that should expand to
fill unused space. This id can not be 0.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoExpandColumnJS" type="JS" required="false">
					<help><![CDATA[ The id of a column in this grid that should expand to
fill unused space. This id can not be 0.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoExpandMax" type="Number" required="false">
					<help><![CDATA[ The maximum width the autoExpandColumn can have (if
enabled). Defaults to 1000.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoExpandMin" type="Number" required="false">
					<help><![CDATA[ The minimum width the autoExpandColumn can have (if
enabled). defaults to 50.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHide" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel. If autoHide
is true, the panel will automatically hide after the
user mouses out of the panel. If autoHide is false, the
panel will continue to display until the user clicks
outside of the panel (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoLoad" type="String" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoLoadJS" type="Object/String/Function" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoScroll" type="Boolean" required="false">
					<help><![CDATA[ True to use overflow:'auto' on the panel's body element
and show scroll bars automatically when necessary,
false to clip any overflowing content (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bbar" type="Object/Array" required="false">
					<help><![CDATA[ The bottom toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
bottom toolbar after render, use getBottomToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyBorder" type="Boolean" required="false">
					<help><![CDATA[ True to display an interior border on the body element
of the panel, false to hide it (defaults to true). This
only applies when border == true. If border == true and
bodyBorder == false, the border will display as a 1px
wide inset border, giving the entire body element an
inset appearance.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyle" type="String" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyleJS" type="String/Object/Function" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the panel's body
element, false to hide them (defaults to true). By
default, the border is a 2px wide inset border, but
this can be further altered by setting bodyBorder to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonAlign" type="String" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonAlignJS" type="JS" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttons" type="Array" required="false">
					<help><![CDATA[ An array of Ext.Buttons or Ext.Button configs used to
add buttons to the footer of this panel.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clicksToEdit" type="Number" required="false">
					<help><![CDATA[ The number of clicks on a cell required to display the
cell's editor (defaults to 2). Setting this option to
'auto' means that mousedown on the selected cell starts
editing that cell.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cm" type="Object" required="false">
					<help><![CDATA[ Shorthand for colModel. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cmargins" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the collapsed state in the format:{    top:
(top margin),    right: (right margin),    bottom:
(bottom margin)    left: (left margin),} May also be a
string containing space-separated, numeric margin
values. The order of the sides associated with each
value matches the way CSS processes margin values.  If
there is only one value, it applies to all sides. If
there are two values, the top and bottom borders are
set to the first value and the right and left are set
to the second. If there are three values, the top is
set to the first value, the left and right are set to
the second, and the bottom is set to the third. If
there are four values, they apply to the top, right,
bottom, and left, respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="colModel" type="Object" required="false">
					<help><![CDATA[ The Ext.grid.ColumnModel to use when rendering the grid
(required).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseFirst" type="Boolean" required="false">
					<help><![CDATA[ True to make sure the collapse/expand toggle button
always renders first (to the left of) any other tools
in the panel's title bar, false to render it last
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapseMode" type="String" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseModeJS" type="JS" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ By default, collapsible regions will be visible when
rendered. Set the collapsed config to true to render
the region as collapsed.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel collapsed, false to render it
expanded (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to allow the user to collapse this region
(defaults to false). If true, an expand/collapse tool
button will automatically be rendered into the title
bar of the region, otherwise the button will not be
shown. Note that a title bar is required to display the
toggle button -- if no region title is specified, the
region will only be collapsible if collapseMode is set
to 'mini'.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to make the panel collapsible and have the
expand/collapse toggle button automatically rendered
into the header tool button area, false to keep the
panel statically sized with no button (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsibleSplitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsibleSplitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="columns" type="Array" required="false">
					<help><![CDATA[ An array of columns to auto create a ColumnModel ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentEl" type="String" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentElJS" type="JS" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="deferRowRender" type="Boolean" required="false">
					<help><![CDATA[ True to enable deferred row rendering. Default is true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disableSelection" type="Boolean" required="false">
					<help><![CDATA[ True to disable selections in the grid (defaults to
false). - ignored if a SelectionModel is specified
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of this Panel (defaults to
false). For custom drag/drop implementations, an
Ext.Panel.DD config could also be passed in this config
instead of true. Ext.Panel.DD is an internal,
undocumented class which moves a proxy Element around
in place of the Panel's element, but provides no other
behaviour during dragging or on drop. It is a subclass
of Ext.dd.DragSource, so behaviour may be added by
implementing the interface methods of Ext.dd.DragDrop
eg: new Ext.Panel({    title: 'Drag me',    x: 100,
y: 100,    renderTo: Ext.getBody(),    floating: true,
frame: true,    width: 400,    height: 200,
draggable: {//      Config option of Ext.Panel.DD
class.//      It's a floating Panel, so do not show a
placeholder proxy in the original position.
insertProxy: false,//      Called for each mousemove
event while dragging the DD object.        onDrag :
function(e){//          Record the x,y position of the
drag proxy so that we can//          position the Panel
at end of drag.            var pel =
this.proxy.getEl();            this.x =
pel.getLeft(true);            this.y =
pel.getTop(true);//          Keep the Shadow aligned if
there is one.            var s =
this.panel.getEl().shadow;            if (s) {
s.realign(this.x, this.y, pel.getWidth(),
pel.getHeight());            }        },//      Called
on the mouseup event.        endDrag : function(e){
this.panel.setPosition(this.x, this.y);        }
}}).show();
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="elements" type="String" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="elementsJS" type="JS" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="enableColumnHide" type="Boolean" required="false">
					<help><![CDATA[ True to enable hiding of columns with the header
context menu.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableColumnMove" type="Boolean" required="false">
					<help><![CDATA[ True to enable drag and drop reorder of columns. ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableColumnResize" type="Boolean" required="false">
					<help><![CDATA[ False to turn off column resizing for the whole grid
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableDragDrop" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of the selected rows of the
GridPanel. Setting this to true causes this GridPanel's
GridView to create an instance of
Ext.grid.GridDragZone. This is available (only after
the Grid has been rendered) as the GridView's dragZone
property. A cooperating DropZone must be created who's
implementations of onNodeEnter, onNodeOver, onNodeOut
and onNodeDrop are able to process the data which is
provided.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableHdMenu" type="Boolean" required="false">
					<help><![CDATA[ True to enable the drop down button for menu in the
headers.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="extraCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="floatable" type="Boolean" required="false">
					<help><![CDATA[ True to allow clicking a collapsed region's bar to
display the region's panel floated above the layout,
false to force the user to fully expand a collapsed
region by clicking the expand button to see it again
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="floating" type="Boolean" required="false">
					<help><![CDATA[ True to float the panel (absolute position it with
automatic shimming and shadow), false to display it
inline where it is rendered (defaults to false). Note
that by default, setting floating to true will cause
the panel to display at negative offsets so that it is
hidden -- because the panel is absolute positioned, the
position must be set explicitly after render (e.g.,
myPanel.setPosition(100,100);). Also, when floating a
panel you should always assign a fixed width, otherwise
it will be auto width and will expand to fill to the
right edge of the viewport.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="footer" type="Boolean" required="false">
					<help><![CDATA[ True to create the footer element explicitly, false to
skip creating it. By default, when footer is not
specified, if one or more buttons have been added to
the panel the footer will be created automatically,
otherwise it will not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="frame" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel with custom rounded borders,
false to render with plain 1px square borders (defaults
to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="Boolean" required="false">
					<help><![CDATA[ True to create the header element explicitly, false to
skip creating it. By default, when header is not
specified, if a title is set the header will be created
automatically, otherwise it will not. If a title is set
but header is explicitly set to false, the header will
not be rendered.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="headerAsText" type="Boolean" required="false">
					<help><![CDATA[ True to display the panel title in the header, false to
hide it (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideCollapseTool" type="Boolean" required="false">
					<help><![CDATA[ True to hide the expand/collapse toggle button when
collapsible = true, false to display it (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideHeaders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the grid's header (defaults to false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="html" type="String" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="htmlJS" type="String/Object" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layout" type="String" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutJS" type="JS" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="loadMask" type="Object" required="false">
					<help><![CDATA[ An Ext.LoadMask config or true to mask the grid while
loading (defaults to false).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="margins" type="String" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="marginsJS" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="maxHeight" type="Number" required="false">
					<help><![CDATA[ Sets the maximum height of the grid - ignored if
autoHeight is not on.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width in pixels of all buttons in this panel
(defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minColumnWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width a column can be resized to. Defaults
to 25.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum allowable height in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum allowable width in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events to
handle anything that is sensitive to the current size
of the viewport. This value is typically managed by the
chosen layout and should not need to be set manually.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderHidden" type="Boolean" required="false">
					<help><![CDATA[ True to hide each contained item on render (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selModel" type="Object" required="false">
					<help><![CDATA[ Any subclass of AbstractSelectionModel that will
provide the selection model for the grid (defaults to
Ext.grid.CellSelectionModel if not specified). Note
that the SelectionModel must be compatible with the
model of selecting cells individually, and should
support a method named getSelectedCell (for these
reasons, Ext.grid.RowSelectionModel is not compatible).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadowOffset" type="Number" required="false">
					<help><![CDATA[ The number of pixels to offset the shadow if displayed
(defaults to 4). Note that this option only applies
when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shim" type="Boolean" required="false">
					<help><![CDATA[ False to disable the iframe shim in browsers which need
one (defaults to true). Note that this option only
applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="sm" type="Object" required="false">
					<help><![CDATA[ Shorthand for selModel. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="split" type="Boolean" required="false">
					<help><![CDATA[ True to display a Ext.SplitBar between this region and
its neighbor, allowing the user to resize the regions
dynamically (defaults to false). When split == true, it
is common to specify a minSize and maxSize for the
BoxComponent representing the region. These are not
native configs of BoxComponent, and are used only by
this class.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="splitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="splitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="store" type="Ext.data.Store" required="false">
					<help><![CDATA[ The Ext.data.Store the grid should use as its data
source (required).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stripeRows" type="Boolean" required="false">
					<help><![CDATA[ True to stripe the rows. Default is false. This causes
the CSS class x-grid3-row-alt to be added to alternate
rows of the grid. A default CSS rule is provided which
sets a background colour, but you can override this
with a rule which either overrides the background-color
style using the "!important" modifier, or which uses a
CSS selector of higher specificity.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tbar" type="Object/Array" required="false">
					<help><![CDATA[ The top toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
top toolbar after render, use getTopToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to allow expanding and collapsing the panel (when
collapsible = true) by clicking anywhere in the header
bar, false to allow it only by clicking to tool button
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tools" type="Array" required="false">
					<help><![CDATA[ An array of tool button configs to be added to the
header tool area. When rendered, each tool is stored as
an Element referenced by a public property called
tools. Each tool config may contain the following
properties:  id : StringRequired. The type of tool to
create. Values may be toggle (Created by default when
collapsible is true) close minimize maximize restore
gear pin unpin right left up down refresh minus plus
help search save print  handler : FunctionRequired. The
function to call when clicked. Arguments passed are:
event : Ext.EventObjectThe click event. toolEl :
Ext.ElementThe tool Element. Panel : Ext.PanelThe host
Panel  scope : ObjectThe scope in which to call the
handler. qtip : String/ObjectA tip string, or a config
argument to Ext.QuickTip.register hidden : BooleanTrue
to initially render hidden. on : ObjectA listener
config object specifiying event listeners in the format
of an argument to addListener  Example usage: tools:[{
id:'refresh',    qtip: 'Refresh form Data',    //
hidden:true,    handler: function(event, toolEl,
panel){        // refresh logic    }}] Note that apart
from the toggle tool which is provided when a panel is
collapsible, these tools only provide the visual
button. Any required functionality must be provided by
adding handlers that implement the necessary behavior.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="useSplitTips" type="Boolean" required="false">
					<help><![CDATA[ True to display a tooltip when the user hovers over a
region's split bar (defaults to false). The tooltip
text will be the value of either splitTip or
collapsibleSplitTip as appropriate.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="view" type="Object" required="false">
					<help><![CDATA[ The Ext.grid.GridView used by the grid. This can be set
before a call to render().
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="viewConfig" type="Object" required="false">
					<help><![CDATA[ A config object that will be used to create the grid's
UI view. Any of the config options available for
Ext.grid.GridView can be specified here. This option is
ignored if view is xpecified.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="region" type="String" required="false">
					<help><![CDATA[ The position within the viewport to attach this
component to. The 'center' region is always required
when using a viewport.
 ]]></help>
					<values default=""><value option="center" /><value option="east" /><value option="north" /><value option="south" /><value option="west" /></values>
				</parameter>
		</tag>
		<tag name="ext:failure" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
		</tag>
		<tag name="ext:field" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="convert" type="Function" required="false">
					<help><![CDATA[ (Optional) A function which converts the value provided
by the Reader into an object that will be stored in the
Record. It is passed the following parameters: * v :
Mixed The data value as read by the Reader. * rec :
Mixed The data object containting the row as read by
the Reader. Depending on Reader type, this could be an
Array, an object, or an XML element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dateFormat" type="String" required="false">
					<help><![CDATA[ (Optional) A format String for the Date.parseDate
function.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dateFormatJS" type="JS" required="false">
					<help><![CDATA[ (Optional) A format String for the Date.parseDate
function.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="mapping" type="String" required="false">
					<help><![CDATA[ (Optional) A path specification for use by the
Ext.data.Reader implementation that is creating the
Record to access the data value from the data object.
If an Ext.data.JsonReader is being used, then this is a
string containing the javascript expression to
reference the data relative to the record item's root.
If an Ext.data.XmlReader is being used, this is an
Ext.DomQuery path to the data item relative to the
record element. If the mapping expression is the same
as the field name, this may be omitted.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="mappingJS" type="JS" required="false">
					<help><![CDATA[ (Optional) A path specification for use by the
Ext.data.Reader implementation that is creating the
Record to access the data value from the data object.
If an Ext.data.JsonReader is being used, then this is a
string containing the javascript expression to
reference the data relative to the record item's root.
If an Ext.data.XmlReader is being used, this is an
Ext.DomQuery path to the data item relative to the
record element. If the mapping expression is the same
as the field name, this may be omitted.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The name by which the field is referenced within the
Record. This is referenced by, for example the
dataIndex property in column definition objects passed
to Ext.grid.ColumnModel
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The name by which the field is referenced within the
Record. This is referenced by, for example the
dataIndex property in column definition objects passed
to Ext.grid.ColumnModel
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="sortDir" type="String" required="false">
					<help><![CDATA[ (Optional) Initial direction to sort. "ASC" or "DESC" ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="sortDirJS" type="JS" required="false">
					<help><![CDATA[ (Optional) Initial direction to sort. "ASC" or "DESC" ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="sortType" type="String" required="false">
					<help><![CDATA[ (Optional) A member of Ext.data.SortTypes. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="sortTypeJS" type="Mixed" required="false">
					<help><![CDATA[ (Optional) A member of Ext.data.SortTypes. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="type" type="String" required="false">
					<help><![CDATA[ (Optional) The data type for conversion to displayable
value. Possible values are * auto (Default, implies no
conversion) * string * int * float * boolean * date
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="typeJS" type="JS" required="false">
					<help><![CDATA[ (Optional) The data type for conversion to displayable
value. Possible values are * auto (Default, implies no
conversion) * string * int * float * boolean * date
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:fieldset" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="autoHeight" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#_autoHeight#"></values>
				</parameter>
				<parameter name="autoWidth" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#_autoWidth#"></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoLoad" type="String" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoLoadJS" type="Object/String/Function" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoScroll" type="Boolean" required="false">
					<help><![CDATA[ True to use overflow:'auto' on the panel's body element
and show scroll bars automatically when necessary,
false to clip any overflowing content (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class applied to the fieldset (defaults to
'x-fieldset').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class applied to the fieldset (defaults to
'x-fieldset').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyle" type="String" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyleJS" type="String/Object/Function" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="checkboxName" type="String" required="false">
					<help><![CDATA[ The name to assign to the fieldset's checkbox if
checkboxToggle = true (defaults to '[checkbox
id]-checkbox').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="checkboxNameJS" type="JS" required="false">
					<help><![CDATA[ The name to assign to the fieldset's checkbox if
checkboxToggle = true (defaults to '[checkbox
id]-checkbox').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="checkboxToggle" type="String" required="false">
					<help><![CDATA[ True to render a checkbox into the fieldset frame just
in front of the legend, or a DomHelper config object to
create the checkbox. (defaults to false). The fieldset
will be expanded or collapsed when the checkbox is
toggled.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="checkboxToggleJS" type="Mixed" required="false">
					<help><![CDATA[ True to render a checkbox into the fieldset frame just
in front of the legend, or a DomHelper config object to
create the checkbox. (defaults to false). The fieldset
will be expanded or collapsed when the checkbox is
toggled.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel collapsed, false to render it
expanded (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to make the panel collapsible and have the
expand/collapse toggle button automatically rendered
into the header tool button area, false to keep the
panel statically sized with no button (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="contentEl" type="String" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentElJS" type="JS" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of this Panel (defaults to
false). For custom drag/drop implementations, an
Ext.Panel.DD config could also be passed in this config
instead of true. Ext.Panel.DD is an internal,
undocumented class which moves a proxy Element around
in place of the Panel's element, but provides no other
behaviour during dragging or on drop. It is a subclass
of Ext.dd.DragSource, so behaviour may be added by
implementing the interface methods of Ext.dd.DragDrop
eg: new Ext.Panel({    title: 'Drag me',    x: 100,
y: 100,    renderTo: Ext.getBody(),    floating: true,
frame: true,    width: 400,    height: 200,
draggable: {//      Config option of Ext.Panel.DD
class.//      It's a floating Panel, so do not show a
placeholder proxy in the original position.
insertProxy: false,//      Called for each mousemove
event while dragging the DD object.        onDrag :
function(e){//          Record the x,y position of the
drag proxy so that we can//          position the Panel
at end of drag.            var pel =
this.proxy.getEl();            this.x =
pel.getLeft(true);            this.y =
pel.getTop(true);//          Keep the Shadow aligned if
there is one.            var s =
this.panel.getEl().shadow;            if (s) {
s.realign(this.x, this.y, pel.getWidth(),
pel.getHeight());            }        },//      Called
on the mouseup event.        endDrag : function(e){
this.panel.setPosition(this.x, this.y);        }
}}).show();
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="html" type="String" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="htmlJS" type="String/Object" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ A css class to apply to the x-form-item of fields. This
property cascades to child containers.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ A css class to apply to the x-form-item of fields. This
property cascades to child containers.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelWidth" type="Number" required="false">
					<help><![CDATA[ The width of labels. This property cascades to child
containers.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layout" type="String" required="false">
					<help><![CDATA[ The Ext.Container.layout to use inside the fieldset
(defaults to 'form').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutJS" type="JS" required="false">
					<help><![CDATA[ The Ext.Container.layout to use inside the fieldset
(defaults to 'form').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width in pixels of all buttons in this panel
(defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events to
handle anything that is sensitive to the current size
of the viewport. This value is typically managed by the
chosen layout and should not need to be set manually.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:formpanel" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="labelWidth" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#Application.ColdExt.defaultLabelWidth#"></values>
				</parameter>
				<parameter name="width" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#Application.ColdExt.defaultFormPanelWidth#"></values>
				</parameter>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
true if the Ext.Fx class is available, otherwise
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animFloat" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel that will
close again once the user mouses out of that panel (or
clicks out if autoHide = false). Setting animFloat to
false will prevent the open and close of these floated
panels from being animated (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHide" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel. If autoHide
is true, the panel will automatically hide after the
user mouses out of the panel. If autoHide is false, the
panel will continue to display until the user clicks
outside of the panel (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoLoad" type="String" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoLoadJS" type="Object/String/Function" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoScroll" type="Boolean" required="false">
					<help><![CDATA[ True to use overflow:'auto' on the panel's body element
and show scroll bars automatically when necessary,
false to clip any overflowing content (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseParams" type="Object" required="false">
					<help><![CDATA[ Parameters to pass with all requests. e.g. baseParams:
{id: '123', foo: 'bar'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bbar" type="Object/Array" required="false">
					<help><![CDATA[ The bottom toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
bottom toolbar after render, use getBottomToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyBorder" type="Boolean" required="false">
					<help><![CDATA[ True to display an interior border on the body element
of the panel, false to hide it (defaults to true). This
only applies when border == true. If border == true and
bodyBorder == false, the border will display as a 1px
wide inset border, giving the entire body element an
inset appearance.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyle" type="String" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyleJS" type="String/Object/Function" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the panel's body
element, false to hide them (defaults to true). By
default, the border is a 2px wide inset border, but
this can be further altered by setting bodyBorder to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonAlign" type="String" required="false">
					<help><![CDATA[ Valid values are "left," "center" and "right" (defaults
to "center")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonAlignJS" type="JS" required="false">
					<help><![CDATA[ Valid values are "left," "center" and "right" (defaults
to "center")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttons" type="Array" required="false">
					<help><![CDATA[ An array of Ext.Buttons or Ext.Button configs used to
add buttons to the footer of this FormPanel. Buttons in
the footer of a FormPanel may be configured with the
option formBind: true. This causes the form's valid
state monitor task to enable/disable those Buttons
depending on the form's valid/invalid state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cmargins" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the collapsed state in the format:{    top:
(top margin),    right: (right margin),    bottom:
(bottom margin)    left: (left margin),} May also be a
string containing space-separated, numeric margin
values. The order of the sides associated with each
value matches the way CSS processes margin values.  If
there is only one value, it applies to all sides. If
there are two values, the top and bottom borders are
set to the first value and the right and left are set
to the second. If there are three values, the top is
set to the first value, the left and right are set to
the second, and the bottom is set to the third. If
there are four values, they apply to the top, right,
bottom, and left, respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseFirst" type="Boolean" required="false">
					<help><![CDATA[ True to make sure the collapse/expand toggle button
always renders first (to the left of) any other tools
in the panel's title bar, false to render it last
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapseMode" type="String" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseModeJS" type="JS" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ By default, collapsible regions will be visible when
rendered. Set the collapsed config to true to render
the region as collapsed.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel collapsed, false to render it
expanded (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to allow the user to collapse this region
(defaults to false). If true, an expand/collapse tool
button will automatically be rendered into the title
bar of the region, otherwise the button will not be
shown. Note that a title bar is required to display the
toggle button -- if no region title is specified, the
region will only be collapsible if collapseMode is set
to 'mini'.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to make the panel collapsible and have the
expand/collapse toggle button automatically rendered
into the header tool button area, false to keep the
panel statically sized with no button (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsibleSplitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsibleSplitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentEl" type="String" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentElJS" type="JS" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of this Panel (defaults to
false). For custom drag/drop implementations, an
Ext.Panel.DD config could also be passed in this config
instead of true. Ext.Panel.DD is an internal,
undocumented class which moves a proxy Element around
in place of the Panel's element, but provides no other
behaviour during dragging or on drop. It is a subclass
of Ext.dd.DragSource, so behaviour may be added by
implementing the interface methods of Ext.dd.DragDrop
eg: new Ext.Panel({    title: 'Drag me',    x: 100,
y: 100,    renderTo: Ext.getBody(),    floating: true,
frame: true,    width: 400,    height: 200,
draggable: {//      Config option of Ext.Panel.DD
class.//      It's a floating Panel, so do not show a
placeholder proxy in the original position.
insertProxy: false,//      Called for each mousemove
event while dragging the DD object.        onDrag :
function(e){//          Record the x,y position of the
drag proxy so that we can//          position the Panel
at end of drag.            var pel =
this.proxy.getEl();            this.x =
pel.getLeft(true);            this.y =
pel.getTop(true);//          Keep the Shadow aligned if
there is one.            var s =
this.panel.getEl().shadow;            if (s) {
s.realign(this.x, this.y, pel.getWidth(),
pel.getHeight());            }        },//      Called
on the mouseup event.        endDrag : function(e){
this.panel.setPosition(this.x, this.y);        }
}}).show();
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="elements" type="String" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="elementsJS" type="JS" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="errorReader" type="DataReader" required="false">
					<help><![CDATA[ An Ext.data.DataReader (e.g. Ext.data.XmlReader) to be
used to read field error messages returned from
"submit" actions. This is completely optional as there
is built-in support for processing JSON. The Records
which provide messages for the invalid Fields must use
the Field name (or id) as the Record ID, and must
contain a field called "msg" which contains the error
message. The errorReader does not have to be a
full-blown implementation of a DataReader. It simply
needs to implement a read(xhr) function which returns
an Array of Records in an object with the following
structure:{    records: recordArray}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fileUpload" type="Boolean" required="false">
					<help><![CDATA[ Set to true if this form is a file upload. File uploads
are not performed using normal "Ajax" techniques, that
is they are not performed using XMLHttpRequests.
Instead the form is submitted in the standard manner
with the DOM  element temporarily modified to have its
target set to refer to a dynamically generated, hidden
which is inserted into the document but removed after
the return data has been gathered. The server response
is parsed by the browser to create the document for the
IFRAME. If the server is using JSON to send the return
object, then the Content-Type header must be set to
"text/html" in order to tell the browser to insert the
text unchanged into the document body. Characters which
are significant to an HTML parser must be sent as HTML
entities, so encode "<" as "&lt;", "&" as "&amp;" etc.
The response text is retrieved from the document, and a
fake XMLHttpRequest object is created containing a
responseText property in order to conform to the
requirements of event handlers and callbacks. Be aware
that file upload packets are sent with the content type
multipart/form and some server technologies (notably
JEE) may require some custom processing in order to
retrieve parameter names and parameter values from the
packet content.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="floatable" type="Boolean" required="false">
					<help><![CDATA[ True to allow clicking a collapsed region's bar to
display the region's panel floated above the layout,
false to force the user to fully expand a collapsed
region by clicking the expand button to see it again
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="floating" type="Boolean" required="false">
					<help><![CDATA[ True to float the panel (absolute position it with
automatic shimming and shadow), false to display it
inline where it is rendered (defaults to false). Note
that by default, setting floating to true will cause
the panel to display at negative offsets so that it is
hidden -- because the panel is absolute positioned, the
position must be set explicitly after render (e.g.,
myPanel.setPosition(100,100);). Also, when floating a
panel you should always assign a fixed width, otherwise
it will be auto width and will expand to fill to the
right edge of the viewport.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="footer" type="Boolean" required="false">
					<help><![CDATA[ True to create the footer element explicitly, false to
skip creating it. By default, when footer is not
specified, if one or more buttons have been added to
the panel the footer will be created automatically,
otherwise it will not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="formId" type="String" required="false">
					<help><![CDATA[ (optional) The id of the FORM tag (defaults to an
auto-generated id).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="formIdJS" type="JS" required="false">
					<help><![CDATA[ (optional) The id of the FORM tag (defaults to an
auto-generated id).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="frame" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel with custom rounded borders,
false to render with plain 1px square borders (defaults
to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="Boolean" required="false">
					<help><![CDATA[ True to create the header element explicitly, false to
skip creating it. By default, when header is not
specified, if a title is set the header will be created
automatically, otherwise it will not. If a title is set
but header is explicitly set to false, the header will
not be rendered.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="headerAsText" type="Boolean" required="false">
					<help><![CDATA[ True to display the panel title in the header, false to
hide it (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideCollapseTool" type="Boolean" required="false">
					<help><![CDATA[ True to hide the expand/collapse toggle button when
collapsible = true, false to display it (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="html" type="String" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="htmlJS" type="String/Object" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ A css class to apply to the x-form-item of fields. This
property cascades to child containers.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ A css class to apply to the x-form-item of fields. This
property cascades to child containers.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelAlign" type="String" required="false">
					<help><![CDATA[ Valid values are "left," "top" and "right" (defaults to
"left"). This property cascades to child containers and
can be overridden on any child container (e.g., a
fieldset can specify a different labelAlign for its
fields).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelAlignJS" type="JS" required="false">
					<help><![CDATA[ Valid values are "left," "top" and "right" (defaults to
"left"). This property cascades to child containers and
can be overridden on any child container (e.g., a
fieldset can specify a different labelAlign for its
fields).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelWidth" type="Number" required="false">
					<help><![CDATA[ The width of labels. This property cascades to child
containers and can be overridden on any child container
(e.g., a fieldset can specify a different labelWidth
for its fields).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="margins" type="String" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="marginsJS" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="method" type="String" required="false">
					<help><![CDATA[ The request method to use (GET or POST) for form
actions if one isn't supplied in the action options.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="methodJS" type="JS" required="false">
					<help><![CDATA[ The request method to use (GET or POST) for form
actions if one isn't supplied in the action options.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width of all buttons in pixels (defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum allowable height in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum allowable width in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorPoll" type="Number" required="false">
					<help><![CDATA[ The milliseconds to poll valid state, ignored if
monitorValid is not true (defaults to 200)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events to
handle anything that is sensitive to the current size
of the viewport. This value is typically managed by the
chosen layout and should not need to be set manually.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="monitorValid" type="Boolean" required="false">
					<help><![CDATA[ If true, the form monitors its valid state client-side
and regularly fires the clientvalidation event passing
that state. When monitoring valid state, the FormPanel
enables/disables any of its configured buttons which
have been configured with formBind: true depending on
whether the form is valid or not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="reader" type="DataReader" required="false">
					<help><![CDATA[ An Ext.data.DataReader (e.g. Ext.data.XmlReader) to be
used to read data when executing "load" actions. This
is optional as there is built-in support for processing
JSON.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderHidden" type="Boolean" required="false">
					<help><![CDATA[ True to hide each contained item on render (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadowOffset" type="Number" required="false">
					<help><![CDATA[ The number of pixels to offset the shadow if displayed
(defaults to 4). Note that this option only applies
when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shim" type="Boolean" required="false">
					<help><![CDATA[ False to disable the iframe shim in browsers which need
one (defaults to true). Note that this option only
applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="split" type="Boolean" required="false">
					<help><![CDATA[ True to display a Ext.SplitBar between this region and
its neighbor, allowing the user to resize the regions
dynamically (defaults to false). When split == true, it
is common to specify a minSize and maxSize for the
BoxComponent representing the region. These are not
native configs of BoxComponent, and are used only by
this class.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="splitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="splitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="standardSubmit" type="Boolean" required="false">
					<help><![CDATA[ If set to true, standard HTML form submits are used
instead of XHR (Ajax) style form submissions. (defaults
to false) Note: When using standardSubmit, any the
options to submit are ignored because Ext's Ajax
infrastracture is bypassed. To pass extra parameters,
you will need to create hidden fields within the form.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tbar" type="Object/Array" required="false">
					<help><![CDATA[ The top toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
top toolbar after render, use getTopToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="timeout" type="Number" required="false">
					<help><![CDATA[ Timeout for form actions in seconds (default is 30
seconds).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to allow expanding and collapsing the panel (when
collapsible = true) by clicking anywhere in the header
bar, false to allow it only by clicking to tool button
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tools" type="Array" required="false">
					<help><![CDATA[ An array of tool button configs to be added to the
header tool area. When rendered, each tool is stored as
an Element referenced by a public property called
tools. Each tool config may contain the following
properties:  id : StringRequired. The type of tool to
create. Values may be toggle (Created by default when
collapsible is true) close minimize maximize restore
gear pin unpin right left up down refresh minus plus
help search save print  handler : FunctionRequired. The
function to call when clicked. Arguments passed are:
event : Ext.EventObjectThe click event. toolEl :
Ext.ElementThe tool Element. Panel : Ext.PanelThe host
Panel  scope : ObjectThe scope in which to call the
handler. qtip : String/ObjectA tip string, or a config
argument to Ext.QuickTip.register hidden : BooleanTrue
to initially render hidden. on : ObjectA listener
config object specifiying event listeners in the format
of an argument to addListener  Example usage: tools:[{
id:'refresh',    qtip: 'Refresh form Data',    //
hidden:true,    handler: function(event, toolEl,
panel){        // refresh logic    }}] Note that apart
from the toggle tool which is provided when a panel is
collapsible, these tools only provide the visual
button. Any required functionality must be provided by
adding handlers that implement the necessary behavior.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="trackResetOnLoad" type="Boolean" required="false">
					<help><![CDATA[ If set to true, form.reset() resets to the last loaded
or setValues() data instead of when the form was first
created.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="url" type="String" required="false">
					<help><![CDATA[ The URL to use for form actions if one isn't supplied
in the action options.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="urlJS" type="JS" required="false">
					<help><![CDATA[ The URL to use for form actions if one isn't supplied
in the action options.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="useSplitTips" type="Boolean" required="false">
					<help><![CDATA[ True to display a tooltip when the user hovers over a
region's split bar (defaults to false). The tooltip
text will be the value of either splitTip or
collapsibleSplitTip as appropriate.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="padding" type="Number" required="false">
					<help><![CDATA[ (ColdExt attribute) The number of pixels to use as
padding for the bodyStyle
 ]]></help>
					<values default="#Application.ColdExt.defaultFormPanelPadding#"></values>
				</parameter>
		</tag>
		<tag name="ext:gridcheckboxselectionmodel" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="header" type="String" required="false">
					<help><![CDATA[ Any valid text or HTML fragment to display in the
header cell for the checkbox column (defaults to '[div
class="x-grid3-hd-checker"] [/div]'). The default CSS
class of 'x-grid3-hd-checker' displays a checkbox in
the header and provides support for automatic check
all/none behavior on header click. This string can be
replaced by any valid HTML fragment, including a simple
text string (e.g., 'Select Rows'), but the automatic
check all/none behavior will only work if the
'x-grid3-hd-checker' class is supplied.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="headerJS" type="JS" required="false">
					<help><![CDATA[ Any valid text or HTML fragment to display in the
header cell for the checkbox column (defaults to '[div
class="x-grid3-hd-checker"] [/div]'). The default CSS
class of 'x-grid3-hd-checker' displays a checkbox in
the header and provides support for automatic check
all/none behavior on header click. This string can be
replaced by any valid HTML fragment, including a simple
text string (e.g., 'Select Rows'), but the automatic
check all/none behavior will only work if the
'x-grid3-hd-checker' class is supplied.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="moveEditorOnEnter" type="Boolean" required="false">
					<help><![CDATA[ False to turn off moving the editor to the next cell
when the enter key is pressed
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="singleSelect" type="Boolean" required="false">
					<help><![CDATA[ True to allow selection of only one row at a time
(defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="sortable" type="Boolean" required="false">
					<help><![CDATA[ True if the checkbox column is sortable (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The default width in pixels of the checkbox column
(defaults to 20).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:gridcolumn" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="align" type="String" required="false">
					<help><![CDATA[ (optional) Set the CSS text-align property of the
column. Defaults to undefined.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="alignJS" type="JS" required="false">
					<help><![CDATA[ (optional) Set the CSS text-align property of the
column. Defaults to undefined.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="css" type="String" required="false">
					<help><![CDATA[ (optional) Set custom CSS for all table cells in the
column (excluding headers). Defaults to undefined.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cssJS" type="JS" required="false">
					<help><![CDATA[ (optional) Set custom CSS for all table cells in the
column (excluding headers). Defaults to undefined.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dataIndex" type="String" required="false">
					<help><![CDATA[ (optional) The name of the field in the grid's
Ext.data.Store's Ext.data.Record definition from which
to draw the column's value. If not specified, the
column's index is used as an index into the Record's
data Array.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dataIndexJS" type="JS" required="false">
					<help><![CDATA[ (optional) The name of the field in the grid's
Ext.data.Store's Ext.data.Record definition from which
to draw the column's value. If not specified, the
column's index is used as an index into the Record's
data Array.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="editor" type="Ext.form.Field" required="false">
					<help><![CDATA[ (optional) The Ext.form.Field to use when editing
values in this column if editing is supported by the
grid.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fixed" type="Boolean" required="false">
					<help><![CDATA[ (optional) True if the column width cannot be changed.
Defaults to false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="String" required="false">
					<help><![CDATA[ The header text to display in the Grid view. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="headerJS" type="JS" required="false">
					<help><![CDATA[ The header text to display in the Grid view. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ (optional) True to hide the column. Defaults to false. ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideable" type="Boolean" required="false">
					<help><![CDATA[ (optional) Specify as false to prevent the user from
hiding this column (defaults to true). To disallow
column hiding globally for all columns in the grid, use
Ext.grid.GridPanel.enableColumnHide instead.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ (optional) Defaults to the column's initial ordinal
position. A name which identifies this column. The id
is used to create a CSS class name which is applied to
all table cells (including headers) in that column. The
class name takes the form of x-grid3-td-id  Header
cells will also recieve this class name, but will also
have the class x-grid3-hd, so to target header cells,
use CSS selectors such as:.x-grid3-hd.x-grid3-td-id The
Ext.grid.GridPanel.autoExpandColumn grid config option
references the column via this identifier.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ (optional) Defaults to the column's initial ordinal
position. A name which identifies this column. The id
is used to create a CSS class name which is applied to
all table cells (including headers) in that column. The
class name takes the form of x-grid3-td-id  Header
cells will also recieve this class name, but will also
have the class x-grid3-hd, so to target header cells,
use CSS selectors such as:.x-grid3-hd.x-grid3-td-id The
Ext.grid.GridPanel.autoExpandColumn grid config option
references the column via this identifier.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuDisabled" type="Boolean" required="false">
					<help><![CDATA[ (optional) True to disable the column menu. Defaults to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderer" type="Function" required="false">
					<help><![CDATA[ (optional) A function used to generate HTML markup for
a cell given the cell's data value. See setRenderer. If
not specified, the default renderer uses the raw data
value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="resizable" type="Boolean" required="false">
					<help><![CDATA[ (optional) False to disable column resizing. Defaults
to true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="sortable" type="Boolean" required="false">
					<help><![CDATA[ (optional) True if sorting is to be allowed on this
column. Defaults to the value of the defaultSortable
property. Whether local/remote sorting is used is
specified in Ext.data.Store.remoteSort.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tooltip" type="String" required="false">
					<help><![CDATA[ (optional) A text string to use as the column header's
tooltip. If Quicktips are enabled, this value will be
used as the text of the quick tip, otherwise it will be
set as the header's HTML title attribute. Defaults to
''.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltipJS" type="JS" required="false">
					<help><![CDATA[ (optional) A text string to use as the column header's
tooltip. If Quicktips are enabled, this value will be
used as the text of the quick tip, otherwise it will be
set as the header's HTML title attribute. Defaults to
''.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ (optional) The initial width in pixels of the column.
This is ignored if the Grid's view is configured with
forceFit true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugin" type="String" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable which holds
the plugin component that will be used at the source of
this grid column
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="summaryRenderer" type="Function" required="false">
					<help><![CDATA[ (ux Group Summary) Renderer function to return output
for the summary field.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="summaryType" type="String" required="false">
					<help><![CDATA[ (ux Group Summary) The type of operation to perform to
calculate the column summary value. Custom functions
can be added to the
Ext.grid.GroupSummary.Calculations[] array.
 ]]></help>
					<values default=""><value option="average" /><value option="count" /><value option="max" /><value option="min" /><value option="sum" /></values>
				</parameter>
		</tag>
		<tag name="ext:gridpanel" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
true if the Ext.Fx class is available, otherwise
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animFloat" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel that will
close again once the user mouses out of that panel (or
clicks out if autoHide = false). Setting animFloat to
false will prevent the open and close of these floated
panels from being animated (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoExpandColumn" type="String" required="false">
					<help><![CDATA[ The id of a column in this grid that should expand to
fill unused space. This id can not be 0.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoExpandColumnJS" type="JS" required="false">
					<help><![CDATA[ The id of a column in this grid that should expand to
fill unused space. This id can not be 0.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoExpandMax" type="Number" required="false">
					<help><![CDATA[ The maximum width the autoExpandColumn can have (if
enabled). Defaults to 1000.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoExpandMin" type="Number" required="false">
					<help><![CDATA[ The minimum width the autoExpandColumn can have (if
enabled). defaults to 50.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHide" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel. If autoHide
is true, the panel will automatically hide after the
user mouses out of the panel. If autoHide is false, the
panel will continue to display until the user clicks
outside of the panel (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bbar" type="Object/Array" required="false">
					<help><![CDATA[ The bottom toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
bottom toolbar after render, use getBottomToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the panel's body
element, false to hide them (defaults to true). By
default, the border is a 2px wide inset border, but
this can be further altered by setting bodyBorder to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonAlign" type="String" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonAlignJS" type="JS" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttons" type="Array" required="false">
					<help><![CDATA[ An array of Ext.Buttons or Ext.Button configs used to
add buttons to the footer of this panel.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cm" type="Object" required="false">
					<help><![CDATA[ Shorthand for colModel. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cmargins" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the collapsed state in the format:{    top:
(top margin),    right: (right margin),    bottom:
(bottom margin)    left: (left margin),} May also be a
string containing space-separated, numeric margin
values. The order of the sides associated with each
value matches the way CSS processes margin values.  If
there is only one value, it applies to all sides. If
there are two values, the top and bottom borders are
set to the first value and the right and left are set
to the second. If there are three values, the top is
set to the first value, the left and right are set to
the second, and the bottom is set to the third. If
there are four values, they apply to the top, right,
bottom, and left, respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="colModel" type="Object" required="false">
					<help><![CDATA[ The Ext.grid.ColumnModel to use when rendering the grid
(required).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseFirst" type="Boolean" required="false">
					<help><![CDATA[ True to make sure the collapse/expand toggle button
always renders first (to the left of) any other tools
in the panel's title bar, false to render it last
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapseMode" type="String" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseModeJS" type="JS" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ By default, collapsible regions will be visible when
rendered. Set the collapsed config to true to render
the region as collapsed.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel collapsed, false to render it
expanded (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to allow the user to collapse this region
(defaults to false). If true, an expand/collapse tool
button will automatically be rendered into the title
bar of the region, otherwise the button will not be
shown. Note that a title bar is required to display the
toggle button -- if no region title is specified, the
region will only be collapsible if collapseMode is set
to 'mini'.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to make the panel collapsible and have the
expand/collapse toggle button automatically rendered
into the header tool button area, false to keep the
panel statically sized with no button (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsibleSplitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsibleSplitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="columns" type="Array" required="false">
					<help><![CDATA[ An array of columns to auto create a ColumnModel ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="deferRowRender" type="Boolean" required="false">
					<help><![CDATA[ True to enable deferred row rendering. Default is true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disableSelection" type="Boolean" required="false">
					<help><![CDATA[ True to disable selections in the grid (defaults to
false). - ignored if a SelectionModel is specified
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of this Panel (defaults to
false). For custom drag/drop implementations, an
Ext.Panel.DD config could also be passed in this config
instead of true. Ext.Panel.DD is an internal,
undocumented class which moves a proxy Element around
in place of the Panel's element, but provides no other
behaviour during dragging or on drop. It is a subclass
of Ext.dd.DragSource, so behaviour may be added by
implementing the interface methods of Ext.dd.DragDrop
eg: new Ext.Panel({    title: 'Drag me',    x: 100,
y: 100,    renderTo: Ext.getBody(),    floating: true,
frame: true,    width: 400,    height: 200,
draggable: {//      Config option of Ext.Panel.DD
class.//      It's a floating Panel, so do not show a
placeholder proxy in the original position.
insertProxy: false,//      Called for each mousemove
event while dragging the DD object.        onDrag :
function(e){//          Record the x,y position of the
drag proxy so that we can//          position the Panel
at end of drag.            var pel =
this.proxy.getEl();            this.x =
pel.getLeft(true);            this.y =
pel.getTop(true);//          Keep the Shadow aligned if
there is one.            var s =
this.panel.getEl().shadow;            if (s) {
s.realign(this.x, this.y, pel.getWidth(),
pel.getHeight());            }        },//      Called
on the mouseup event.        endDrag : function(e){
this.panel.setPosition(this.x, this.y);        }
}}).show();
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableColumnHide" type="Boolean" required="false">
					<help><![CDATA[ True to enable hiding of columns with the header
context menu.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableColumnMove" type="Boolean" required="false">
					<help><![CDATA[ True to enable drag and drop reorder of columns. ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableColumnResize" type="Boolean" required="false">
					<help><![CDATA[ False to turn off column resizing for the whole grid
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableDragDrop" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of the selected rows of the
GridPanel. Setting this to true causes this GridPanel's
GridView to create an instance of
Ext.grid.GridDragZone. This is available (only after
the Grid has been rendered) as the GridView's dragZone
property. A cooperating DropZone must be created who's
implementations of onNodeEnter, onNodeOver, onNodeOut
and onNodeDrop are able to process the data which is
provided.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableHdMenu" type="Boolean" required="false">
					<help><![CDATA[ True to enable the drop down button for menu in the
headers.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="extraCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="floatable" type="Boolean" required="false">
					<help><![CDATA[ True to allow clicking a collapsed region's bar to
display the region's panel floated above the layout,
false to force the user to fully expand a collapsed
region by clicking the expand button to see it again
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="floating" type="Boolean" required="false">
					<help><![CDATA[ True to float the panel (absolute position it with
automatic shimming and shadow), false to display it
inline where it is rendered (defaults to false). Note
that by default, setting floating to true will cause
the panel to display at negative offsets so that it is
hidden -- because the panel is absolute positioned, the
position must be set explicitly after render (e.g.,
myPanel.setPosition(100,100);). Also, when floating a
panel you should always assign a fixed width, otherwise
it will be auto width and will expand to fill to the
right edge of the viewport.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="footer" type="Boolean" required="false">
					<help><![CDATA[ True to create the footer element explicitly, false to
skip creating it. By default, when footer is not
specified, if one or more buttons have been added to
the panel the footer will be created automatically,
otherwise it will not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="frame" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel with custom rounded borders,
false to render with plain 1px square borders (defaults
to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="Boolean" required="false">
					<help><![CDATA[ True to create the header element explicitly, false to
skip creating it. By default, when header is not
specified, if a title is set the header will be created
automatically, otherwise it will not. If a title is set
but header is explicitly set to false, the header will
not be rendered.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="headerAsText" type="Boolean" required="false">
					<help><![CDATA[ True to display the panel title in the header, false to
hide it (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideCollapseTool" type="Boolean" required="false">
					<help><![CDATA[ True to hide the expand/collapse toggle button when
collapsible = true, false to display it (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideHeaders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the grid's header (defaults to false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="loadMask" type="Object" required="false">
					<help><![CDATA[ An Ext.LoadMask config or true to mask the grid while
loading (defaults to false).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="margins" type="String" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="marginsJS" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="maxHeight" type="Number" required="false">
					<help><![CDATA[ Sets the maximum height of the grid - ignored if
autoHeight is not on.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width in pixels of all buttons in this panel
(defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minColumnWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width a column can be resized to. Defaults
to 25.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum allowable height in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum allowable width in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderHidden" type="Boolean" required="false">
					<help><![CDATA[ True to hide each contained item on render (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selModel" type="Object" required="false">
					<help><![CDATA[ Any subclass of Ext.grid.AbstractSelectionModel that
will provide the selection model for the grid (defaults
to Ext.grid.RowSelectionModel if not specified).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadowOffset" type="Number" required="false">
					<help><![CDATA[ The number of pixels to offset the shadow if displayed
(defaults to 4). Note that this option only applies
when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shim" type="Boolean" required="false">
					<help><![CDATA[ False to disable the iframe shim in browsers which need
one (defaults to true). Note that this option only
applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="sm" type="Object" required="false">
					<help><![CDATA[ Shorthand for selModel. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="split" type="Boolean" required="false">
					<help><![CDATA[ True to display a Ext.SplitBar between this region and
its neighbor, allowing the user to resize the regions
dynamically (defaults to false). When split == true, it
is common to specify a minSize and maxSize for the
BoxComponent representing the region. These are not
native configs of BoxComponent, and are used only by
this class.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="splitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="splitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to
["columnmove", "columnresize", "sortchange"]). These
can be any types of events supported by this component,
including browser or custom events (e.g., ['click',
'customerchange']). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="store" type="Ext.data.Store" required="false">
					<help><![CDATA[ The Ext.data.Store the grid should use as its data
source (required).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stripeRows" type="Boolean" required="false">
					<help><![CDATA[ True to stripe the rows. Default is false. This causes
the CSS class x-grid3-row-alt to be added to alternate
rows of the grid. A default CSS rule is provided which
sets a background colour, but you can override this
with a rule which either overrides the background-color
style using the "!important" modifier, or which uses a
CSS selector of higher specificity.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tbar" type="Object/Array" required="false">
					<help><![CDATA[ The top toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
top toolbar after render, use getTopToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to allow expanding and collapsing the panel (when
collapsible = true) by clicking anywhere in the header
bar, false to allow it only by clicking to tool button
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tools" type="Array" required="false">
					<help><![CDATA[ An array of tool button configs to be added to the
header tool area. When rendered, each tool is stored as
an Element referenced by a public property called
tools. Each tool config may contain the following
properties:  id : StringRequired. The type of tool to
create. Values may be toggle (Created by default when
collapsible is true) close minimize maximize restore
gear pin unpin right left up down refresh minus plus
help search save print  handler : FunctionRequired. The
function to call when clicked. Arguments passed are:
event : Ext.EventObjectThe click event. toolEl :
Ext.ElementThe tool Element. Panel : Ext.PanelThe host
Panel  scope : ObjectThe scope in which to call the
handler. qtip : String/ObjectA tip string, or a config
argument to Ext.QuickTip.register hidden : BooleanTrue
to initially render hidden. on : ObjectA listener
config object specifiying event listeners in the format
of an argument to addListener  Example usage: tools:[{
id:'refresh',    qtip: 'Refresh form Data',    //
hidden:true,    handler: function(event, toolEl,
panel){        // refresh logic    }}] Note that apart
from the toggle tool which is provided when a panel is
collapsible, these tools only provide the visual
button. Any required functionality must be provided by
adding handlers that implement the necessary behavior.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="trackMouseOver" type="Boolean" required="false">
					<help><![CDATA[ True to highlight rows when the mouse is over. Default
is true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="useSplitTips" type="Boolean" required="false">
					<help><![CDATA[ True to display a tooltip when the user hovers over a
region's split bar (defaults to false). The tooltip
text will be the value of either splitTip or
collapsibleSplitTip as appropriate.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="view" type="Object" required="false">
					<help><![CDATA[ The Ext.grid.GridView used by the grid. This can be set
before a call to render().
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="viewConfig" type="Object" required="false">
					<help><![CDATA[ A config object that will be used to create the grid's
UI view. Any of the config options available for
Ext.grid.GridView can be specified here. This option is
ignored if view is xpecified.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="region" type="String" required="false">
					<help><![CDATA[ The position within the viewport to attach this
component to. The 'center' region is always required
when using a viewport.
 ]]></help>
					<values default=""><value option="center" /><value option="east" /><value option="north" /><value option="south" /><value option="west" /></values>
				</parameter>
		</tag>
		<tag name="ext:gridrownumberer" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="header" type="String" required="false">
					<help><![CDATA[ Any valid text or HTML fragment to display in the
header cell for the row number column (defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="headerJS" type="JS" required="false">
					<help><![CDATA[ Any valid text or HTML fragment to display in the
header cell for the row number column (defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The default width in pixels of the row number column
(defaults to 23).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:groupingstore" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="autoLoad" type="Boolean/Object" required="false">
					<help><![CDATA[ If passed, this store's load method is automatically
called after creation with the autoLoad object
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseParams" type="Object" required="false">
					<help><![CDATA[ An object containing properties which are to be sent as
parameters on any HTTP request
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="data" type="Array" required="false">
					<help><![CDATA[ Inline data to be loaded when the store is initialized.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="groupField" type="String" required="false">
					<help><![CDATA[ The field name by which to sort the store's data
(defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="groupFieldJS" type="JS" required="false">
					<help><![CDATA[ The field name by which to sort the store's data
(defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="groupOnSort" type="Boolean" required="false">
					<help><![CDATA[ True to sort the data on the grouping field when a
grouping operation occurs, false to sort based on the
existing sort info (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="proxy" type="Ext.data.DataProxy" required="false">
					<help><![CDATA[ The Proxy object which provides access to a data
object.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pruneModifiedRecords" type="boolean" required="false">
					<help><![CDATA[ True to clear all modified record information each time
the store is loaded or when a record is removed.
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="reader" type="Ext.data.DataReader" required="false">
					<help><![CDATA[ The DataReader object which processes the data object
and returns an Array of Ext.data.Record objects which
are cached keyed by their id property.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="remoteGroup" type="Boolean" required="false">
					<help><![CDATA[ True if the grouping should apply on the server side,
false if it is local only (defaults to false). If the
grouping is local, it can be applied immediately to the
data. If it is remote, then it will simply act as a
helper, automatically sending the grouping field name
as the 'groupBy' param with each XHR call.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="remoteSort" type="boolean" required="false">
					<help><![CDATA[ True if sorting is to be handled by requesting the
Proxy to provide a refreshed version of the data object
in sorted order, as opposed to sorting the Record cache
in place (defaults to false). If remote sorting is
specified, then clicking on a column header causes the
current page to be requested from the server with the
addition of the following two parameters:  sort :
StringThe name (as specified in the Record's Field
definition) of the field to sort on. dir : StringThe
direction of the sort, "ASC" or "DESC"
(case-sensitive).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="sortInfo" type="Object" required="false">
					<help><![CDATA[ A config object in the format: {field: "fieldName",
direction: "ASC|DESC"} to specify the sort order in the
request of a remote Store's load operation. Note that
for local sorting, the direction property is
case-sensitive.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="storeId" type="String" required="false">
					<help><![CDATA[ If passed, the id to use to register with the StoreMgr ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="storeIdJS" type="JS" required="false">
					<help><![CDATA[ If passed, the id to use to register with the StoreMgr ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="url" type="String" required="false">
					<help><![CDATA[ If passed, an HttpProxy is created for the passed URL ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="urlJS" type="JS" required="false">
					<help><![CDATA[ If passed, an HttpProxy is created for the passed URL ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:groupingview" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="autoFill" type="Boolean" required="false">
					<help><![CDATA[ True to auto expand the columns to fit the grid when
the grid is created.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="cellSelector" type="String" required="false">
					<help><![CDATA[ The selector used to find cells internally ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cellSelectorJS" type="JS" required="false">
					<help><![CDATA[ The selector used to find cells internally ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cellSelectorDepth" type="Number" required="false">
					<help><![CDATA[ The number of levels to search for cells in event
delegation (defaults to 4)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="deferEmptyText" type="Boolean" required="false">
					<help><![CDATA[ True to defer emptyText being applied until the store's
first load
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="emptyGroupText" type="String" required="false">
					<help><![CDATA[ The text to display when there is an empty group value ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyGroupTextJS" type="JS" required="false">
					<help><![CDATA[ The text to display when there is an empty group value ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyText" type="String" required="false">
					<help><![CDATA[ Default text to display in the grid body when no rows
are available (defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyTextJS" type="JS" required="false">
					<help><![CDATA[ Default text to display in the grid body when no rows
are available (defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="enableGrouping" type="Boolean" required="false">
					<help><![CDATA[ False to disable grouping functionality (defaults to
true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableGroupingMenu" type="Boolean" required="false">
					<help><![CDATA[ True to enable the grouping control in the column menu ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableNoGroups" type="Boolean" required="false">
					<help><![CDATA[ True to allow the user to turn off grouping ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableRowBody" type="Boolean" required="false">
					<help><![CDATA[ True to add a second TR element per row that can be
used to provide a row body that spans beneath the data
row. Use the getRowClass method's rowParams config to
customize the row body.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="forceFit" type="Boolean" required="false">
					<help><![CDATA[ True to auto expand/contract the size of the columns to
fit the grid width and prevent horizontal scrolling.
This option overrides any (@link
Ext.grid.ColumnModel#width width} settings in the
ColumnModel.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="groupByText" type="String" required="false">
					<help><![CDATA[ Text displayed in the grid header menu for grouping by
a column (defaults to 'Group By This Field').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="groupByTextJS" type="JS" required="false">
					<help><![CDATA[ Text displayed in the grid header menu for grouping by
a column (defaults to 'Group By This Field').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="groupRenderer" type="Function" required="false">
					<help><![CDATA[ The function used to format the grouping field value
for display in the group header. Should return a string
value. This takes the following parameters:  v :
ObjectThe new value of the group field. unused :
undefinedUnused parameter. r : Ext.data.RecordThe
Record providing the data for the row which caused
group change. rowIndex : NumberThe row index of the
Record which caused group change. colIndex : NumberThe
column index of the group field. ds : Ext.data.StoreThe
Store which is providing the data Model.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="groupTextTpl" type="String" required="false">
					<help><![CDATA[ The template used to render the group header. This is
used to format an object which contains the following
properties:  group : StringThe rendered value of the
group field. By default this is the unchanged value of
the group field. If a groupRenderer is specified, it is
the result of a call to that. gvalue : ObjectThe raw
value of the group field. text : StringThe configured
header (If showGroupName is true) plus the
renderedgroup field value. groupId : StringA unique,
generated ID which is applied to the View Element which
contains the group. startRow : NumberThe row index of
the Record which caused group change. rs :
Array.Contains a single element: The Record providing
the data for the row which caused group change. cls :
StringThe generated class name string to apply to the
group header Element. style : StringThe inline style
rules to apply to the group header Element.  See
Ext.XTemplate for information on how to format data
using a template.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="groupTextTplJS" type="JS" required="false">
					<help><![CDATA[ The template used to render the group header. This is
used to format an object which contains the following
properties:  group : StringThe rendered value of the
group field. By default this is the unchanged value of
the group field. If a groupRenderer is specified, it is
the result of a call to that. gvalue : ObjectThe raw
value of the group field. text : StringThe configured
header (If showGroupName is true) plus the
renderedgroup field value. groupId : StringA unique,
generated ID which is applied to the View Element which
contains the group. startRow : NumberThe row index of
the Record which caused group change. rs :
Array.Contains a single element: The Record providing
the data for the row which caused group change. cls :
StringThe generated class name string to apply to the
group header Element. style : StringThe inline style
rules to apply to the group header Element.  See
Ext.XTemplate for information on how to format data
using a template.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="header" type="String" required="false">
					<help><![CDATA[ The text with which to prefix the group field value in
the group header line.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="headerJS" type="JS" required="false">
					<help><![CDATA[ The text with which to prefix the group field value in
the group header line.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideGroupedColumn" type="Boolean" required="false">
					<help><![CDATA[ True to hide the column that is currently grouped ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="ignoreAdd" type="Boolean" required="false">
					<help><![CDATA[ True to skip refreshing the view when new rows are
added (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="rowSelector" type="String" required="false">
					<help><![CDATA[ The selector used to find rows internally ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="rowSelectorJS" type="JS" required="false">
					<help><![CDATA[ The selector used to find rows internally ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="rowSelectorDepth" type="Number" required="false">
					<help><![CDATA[ The number of levels to search for rows in event
delegation (defaults to 10)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="showGroupName" type="Boolean" required="false">
					<help><![CDATA[ True to display the name for each set of grouped rows
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="showGroupsText" type="String" required="false">
					<help><![CDATA[ Text displayed in the grid header for
enabling/disabling grouping (defaults to 'Show in
Groups').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="showGroupsTextJS" type="JS" required="false">
					<help><![CDATA[ Text displayed in the grid header for
enabling/disabling grouping (defaults to 'Show in
Groups').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="startCollapsed" type="Boolean" required="false">
					<help><![CDATA[ True to start all groups collapsed ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:handler" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="type" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="form" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:hidden" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="hidden#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreate" type="String" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreateJS" type="String/Object" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClass" type="String" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputType" type="String" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputTypeJS" type="JS" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidText" type="String" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFx" type="String" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFxJS" type="JS" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTarget" type="String" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTargetJS" type="JS" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="readOnly" type="Boolean" required="false">
					<help><![CDATA[ True to mark the field as readOnly in HTML (defaults to
false) -- Note: this only sets the element's readOnly
DOM attribute.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ The tabIndex for this field. Note this only applies to
fields that are rendered, not those which are built via
applyTo (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validateOnBlur" type="Boolean" required="false">
					<help><![CDATA[ Whether the field should validate when it loses focus
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validationDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds after user input
begins until validation is initiated (defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEvent" type="String" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEventJS" type="String/Boolean" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="Mixed" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:html" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
		</tag>
		<tag name="ext:htmleditor" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="htmlEditor#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="createLinkText" type="String" required="false">
					<help><![CDATA[ The default text for the create link prompt ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="createLinkTextJS" type="JS" required="false">
					<help><![CDATA[ The default text for the create link prompt ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultLinkValue" type="String" required="false">
					<help><![CDATA[ The default value for the create link prompt (defaults
to http:/ /)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultLinkValueJS" type="JS" required="false">
					<help><![CDATA[ The default value for the create link prompt (defaults
to http:/ /)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="enableAlignments" type="Boolean" required="false">
					<help><![CDATA[ Enable the left, center, right alignment buttons
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableColors" type="Boolean" required="false">
					<help><![CDATA[ Enable the fore/highlight color buttons (defaults to
true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableFont" type="Boolean" required="false">
					<help><![CDATA[ Enable font selection. Not available in Safari.
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableFontSize" type="Boolean" required="false">
					<help><![CDATA[ Enable the increase/decrease font size buttons
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableFormat" type="Boolean" required="false">
					<help><![CDATA[ Enable the bold, italic and underline buttons (defaults
to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableLinks" type="Boolean" required="false">
					<help><![CDATA[ Enable the create link button. Not available in Safari.
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableLists" type="Boolean" required="false">
					<help><![CDATA[ Enable the bullet and numbered list buttons. Not
available in Safari. (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableSourceEdit" type="Boolean" required="false">
					<help><![CDATA[ Enable the switch to source edit button. Not available
in Safari. (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fontFamilies" type="Array" required="false">
					<help><![CDATA[ An array of available font families ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="Mixed" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="anchor" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:init" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="debug" type="Boolean" required="false">
					<help><![CDATA[ True to enable the use of the debugging version of Ext
JavaScript resources for easier troubleshooting
 ]]></help>
					<values default="#Application.ColdExt.debug#"><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="js" type="String" required="false">
					<help><![CDATA[ (Optional) Path to the Ext JavaScript resources ]]></help>
					<values default="#Application.ColdExt.js#"></values>
				</parameter>
				<parameter name="css" type="String" required="false">
					<help><![CDATA[ (Optional) Path to the Ext CSS resources ]]></help>
					<values default="#Application.ColdExt.css#"></values>
				</parameter>
				<parameter name="images" type="String" required="false">
					<help><![CDATA[ (Optional) Path to the Ext image resources ]]></help>
					<values default="#Application.ColdExt.images#"></values>
				</parameter>
				<parameter name="theme" type="String" required="false">
					<help><![CDATA[ (Optional) Path to an Ext CSS Theme resource ]]></help>
					<values default="#Application.ColdExt.theme#"></values>
				</parameter>
				<parameter name="blankImageURL" type="String" required="false">
					<help><![CDATA[ (Optional) Path to the Ext 1x1 blank pixel image ]]></help>
					<values default="#Application.ColdExt.blankImageURL#"></values>
				</parameter>
				<parameter name="quickTips" type="String" required="false">
					<help><![CDATA[ (Optional) True to enable quick tips ]]></help>
					<values default="#Application.ColdExt.quickTips#"></values>
				</parameter>
				<parameter name="validationTarget" type="String" required="false">
					<help><![CDATA[ (Optional) Specify the target for validation error
quick tips
 ]]></help>
					<values default="#Application.ColdExt.validationTarget#"></values>
				</parameter>
				<parameter name="loadingMask" type="Boolean" required="false">
					<help><![CDATA[ (Optional) True to use a full screen mask with a
loading indicator while resources are loading (defaults
to false)
 ]]></help>
					<values default="#Application.ColdExt.loadingMask#"><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="uxLoad" type="List" required="false">
					<help><![CDATA[ (Optional) A comma separated list of User Extensions to
be loaded up front. Use this attribute to load the
resources for extensions which may be loaded via Ajax,
e.g. ux="portal,gridfilters". The extension name is the
folder name in the /ext/ux folder.
 ]]></help>
					<values default="#Application.ColdExt.uxLoad#"></values>
				</parameter>
		</tag>
		<tag name="ext:input" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="textField#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="label" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#SeparateCaps(attributes.name)#"></values>
				</parameter>
				<parameter name="fieldLabel" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#attributes.label#"></values>
				</parameter>
				<parameter name="width" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#Application.ColdExt.defaultFieldWidth#"></values>
				</parameter>
				<parameter name="allowBlank" type="Boolean" required="false">
					<help><![CDATA[ False to validate that the value length > 0 (defaults
to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreate" type="String" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreateJS" type="String/Object" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="blankText" type="String" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="blankTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disableKeyFilter" type="Boolean" required="false">
					<help><![CDATA[ True to disable input keystroke filtering (defaults to
false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClass" type="String" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyText" type="String" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyTextJS" type="JS" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClass" type="String" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="grow" type="Boolean" required="false">
					<help><![CDATA[ True if this field should automatically grow and shrink
to its content
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="growMax" type="Number" required="false">
					<help><![CDATA[ The maximum width to allow when grow = true (defaults
to 800)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="growMin" type="Number" required="false">
					<help><![CDATA[ The minimum width to allow when grow = true (defaults
to 30)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputType" type="String" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputTypeJS" type="JS" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidText" type="String" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskRe" type="RegExp" required="false">
					<help><![CDATA[ An input mask regular expression that will be used to
filter keystrokes that don't match (defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLength" type="Number" required="false">
					<help><![CDATA[ Maximum input field length allowed (defaults to
Number.MAX_VALUE)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLength" type="Number" required="false">
					<help><![CDATA[ Minimum input field length required (defaults to 0) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFx" type="String" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFxJS" type="JS" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTarget" type="String" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTargetJS" type="JS" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="readOnly" type="Boolean" required="false">
					<help><![CDATA[ True to mark the field as readOnly in HTML (defaults to
false) -- Note: this only sets the element's readOnly
DOM attribute.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="regex" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object to be tested against the
field value during validation (defaults to null). If
available, this regex will be evaluated only after the
basic validators all return true, and will be passed
the current field value. If the test fails, the field
will be marked invalid using regexText.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexText" type="String" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selectOnFocus" type="Boolean" required="false">
					<help><![CDATA[ True to automatically select any existing field text
when the field receives input focus (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stripCharsRe" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object used to strip unwanted
content from the value before validation (defaults to
null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ The tabIndex for this field. Note this only applies to
fields that are rendered, not those which are built via
applyTo (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validateOnBlur" type="Boolean" required="false">
					<help><![CDATA[ Whether the field should validate when it loses focus
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validationDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds after user input
begins until validation is initiated (defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEvent" type="String" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEventJS" type="String/Boolean" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validator" type="Function" required="false">
					<help><![CDATA[ A custom validation function to be called during field
validation (defaults to null). If specified, this
function will be called only after the built-in
validations (allowBlank, minLength, maxLength) and any
configured vtype all return true. This function will be
passed the current field value and expected to return
boolean true if the value is valid or a string error
message if invalid.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="Mixed" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtype" type="String" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeJS" type="JS" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeText" type="String" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeTextJS" type="JS" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="anchor" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="required" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:jsonreader" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ Name of the property within a row object that contains
a record identifier value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ Name of the property within a row object that contains
a record identifier value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="root" type="String" required="false">
					<help><![CDATA[ name of the property which contains the Array of row
objects.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="rootJS" type="JS" required="false">
					<help><![CDATA[ name of the property which contains the Array of row
objects.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="successProperty" type="String" required="false">
					<help><![CDATA[ Name of the property from which to retrieve the success
attribute used by forms.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="successPropertyJS" type="JS" required="false">
					<help><![CDATA[ Name of the property from which to retrieve the success
attribute used by forms.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="totalProperty" type="String" required="false">
					<help><![CDATA[ Name of the property from which to retrieve the total
number of records in the dataset. This is only needed
if the whole dataset is not passed in one go, but is
being paged from the remote server.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="totalPropertyJS" type="JS" required="false">
					<help><![CDATA[ Name of the property from which to retrieve the total
number of records in the dataset. This is only needed
if the whole dataset is not passed in one go, but is
being paged from the remote server.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:jsonstore" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="autoLoad" type="Boolean/Object" required="false">
					<help><![CDATA[ If passed, this store's load method is automatically
called after creation with the autoLoad object
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseParams" type="Object" required="false">
					<help><![CDATA[ An object containing properties which are to be sent as
parameters on any HTTP request
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="data" type="Object" required="false">
					<help><![CDATA[ A data object readable by this object's JsonReader.
Either this option, or the url option must be
specified.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fields" type="Array" required="false">
					<help><![CDATA[ Either an Array of field definition objects as passed
to Ext.data.Record.create, or a Record constructor
created using Ext.data.Record.create. This config is
used to create the recordType parameter to the
JsonReader constructor that is implicitly called, and
creates the Record definition used by the Store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ Name of the property within a row object that contains
a record identifier value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ Name of the property within a row object that contains
a record identifier value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pruneModifiedRecords" type="boolean" required="false">
					<help><![CDATA[ True to clear all modified record information each time
the store is loaded or when a record is removed.
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="remoteSort" type="boolean" required="false">
					<help><![CDATA[ True if sorting is to be handled by requesting the
Proxy to provide a refreshed version of the data object
in sorted order, as opposed to sorting the Record cache
in place (defaults to false). If remote sorting is
specified, then clicking on a column header causes the
current page to be requested from the server with the
addition of the following two parameters:  sort :
StringThe name (as specified in the Record's Field
definition) of the field to sort on. dir : StringThe
direction of the sort, "ASC" or "DESC"
(case-sensitive).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="root" type="String" required="false">
					<help><![CDATA[ name of the property which contains the Array of row
objects.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="rootJS" type="JS" required="false">
					<help><![CDATA[ name of the property which contains the Array of row
objects.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="sortInfo" type="Object" required="false">
					<help><![CDATA[ A config object in the format: {field: "fieldName",
direction: "ASC|DESC"} to specify the sort order in the
request of a remote Store's load operation. Note that
for local sorting, the direction property is
case-sensitive.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="storeId" type="String" required="false">
					<help><![CDATA[ If passed, the id to use to register with the StoreMgr ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="storeIdJS" type="JS" required="false">
					<help><![CDATA[ If passed, the id to use to register with the StoreMgr ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="successProperty" type="String" required="false">
					<help><![CDATA[ Name of the property from which to retrieve the success
attribute used by forms.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="successPropertyJS" type="JS" required="false">
					<help><![CDATA[ Name of the property from which to retrieve the success
attribute used by forms.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="totalProperty" type="String" required="false">
					<help><![CDATA[ Name of the property from which to retrieve the total
number of records in the dataset. This is only needed
if the whole dataset is not passed in one go, but is
being paged from the remote server.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="totalPropertyJS" type="JS" required="false">
					<help><![CDATA[ Name of the property from which to retrieve the total
number of records in the dataset. This is only needed
if the whole dataset is not passed in one go, but is
being paged from the remote server.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="url" type="String" required="false">
					<help><![CDATA[ The URL from which to load data through an HttpProxy.
Either this option, or the data option must be
specified.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="urlJS" type="JS" required="false">
					<help><![CDATA[ The URL from which to load data through an HttpProxy.
Either this option, or the data option must be
specified.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:label" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="forId" type="String" required="false">
					<help><![CDATA[ The id of the input element to which this label will be
bound via the standard HTML 'for' attribute. If not
specified, the attribute will not be added to the
label.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="forIdJS" type="JS" required="false">
					<help><![CDATA[ The id of the input element to which this label will be
bound via the standard HTML 'for' attribute. If not
specified, the attribute will not be added to the
label.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="html" type="String" required="false">
					<help><![CDATA[ An HTML fragment that will be used as the label's
innerHTML (defaults to ''). Note that if text is
specified it will take precedence and this value will
be ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="htmlJS" type="JS" required="false">
					<help><![CDATA[ An HTML fragment that will be used as the label's
innerHTML (defaults to ''). Note that if text is
specified it will take precedence and this value will
be ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="text" type="String" required="false">
					<help><![CDATA[ The plain text to display within the label (defaults to
''). If you need to include HTML tags within the
label's innerHTML, use the html config instead.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textJS" type="JS" required="false">
					<help><![CDATA[ The plain text to display within the label (defaults to
''). If you need to include HTML tags within the
label's innerHTML, use the html config instead.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:listener" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="eventName" type="String" required="false">
					<help><![CDATA[ The type of event to listen for ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="handler" type="Function" required="false">
					<help><![CDATA[ The method the event invokes ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="scope" type="Object" required="false">
					<help><![CDATA[ (optional) The scope in which to execute the handler
function. The handler function's "this" context.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="options" type="Object" required="false">
					<help><![CDATA[ (optional) An object containing handler configuration
properties. This may contain any of the following
properties: * scope : Object The scope in which to
execute the handler function. The handler function's
"this" context. * delay : Number The number of
milliseconds to delay the invocation of the handler
after the event fires. * single : Boolean True to add a
handler to handle just the next firing of the event,
and then remove itself. * buffer : Number Causes the
handler to be scheduled to run in an
Ext.util.DelayedTask delayed by the specified number of
milliseconds. If the event fires again within that
time, the original handler is not invoked, but the new
handler is scheduled in its place.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buffer" type="Number" required="false">
					<help><![CDATA[ Causes the handler to be scheduled to run in an
Ext.util.DelayedTask delayed by the specified number of
milliseconds. If the event fires again within that
time, the original handler is not invoked, but the new
handler is scheduled in its place.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="delay" type="Number" required="false">
					<help><![CDATA[ The number of milliseconds to delay the invocation of
the handler after the event fires.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="single" type="Boolean" required="false">
					<help><![CDATA[ True to add a handler to handle just the next firing of
the event, and then remove itself.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
		</tag>
		<tag name="ext:menu" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowOtherMenus" type="Boolean" required="false">
					<help><![CDATA[ True to allow multiple menus to be displayed at the
same time (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="defaultAlign" type="String" required="false">
					<help><![CDATA[ The default Ext.Element.alignTo anchor position value
for this menu relative to its element of origin
(defaults to "tl-bl?")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultAlignJS" type="JS" required="false">
					<help><![CDATA[ The default Ext.Element.alignTo anchor position value
for this menu relative to its element of origin
(defaults to "tl-bl?")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all items added
to this container either via the items config or via
the add method. The defaults config can contain any
number of name/value property pairs to be added to each
item, and should be valid for the types of items being
added to the menu.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ignoreParentClicks" type="Boolean" required="false">
					<help><![CDATA[ True to ignore clicks on any item in this menu that is
a parent item (displays a submenu) so that the submenu
is not dismissed when clicking the parent item
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ An array of items to be added to this menu. See add for
a list of valid item types.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ An array of items to be added to this menu. See add for
a list of valid item types.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width of the menu in pixels (defaults to
120)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True or "sides" for the default effect, "frame" for
4-way shadow, and "drop" for bottom-right shadow
(defaults to "sides")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True or "sides" for the default effect, "frame" for
4-way shadow, and "drop" for bottom-right shadow
(defaults to "sides")
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="subMenuAlign" type="String" required="false">
					<help><![CDATA[ The Ext.Element.alignTo anchor position value to use
for submenus of this menu (defaults to "tl-tr?")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="subMenuAlignJS" type="JS" required="false">
					<help><![CDATA[ The Ext.Element.alignTo anchor position value to use
for submenus of this menu (defaults to "tl-tr?")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="text" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:numberfield" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="numberField#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="label" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#SeparateCaps(attributes.name)#"></values>
				</parameter>
				<parameter name="fieldLabel" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#attributes.label#"></values>
				</parameter>
				<parameter name="width" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#Application.ColdExt.defaultFieldWidth#"></values>
				</parameter>
				<parameter name="allowBlank" type="Boolean" required="false">
					<help><![CDATA[ False to validate that the value length > 0 (defaults
to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDecimals" type="Boolean" required="false">
					<help><![CDATA[ False to disallow decimal values (defaults to true) ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowNegative" type="Boolean" required="false">
					<help><![CDATA[ False to prevent entering a negative sign (defaults to
true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreate" type="String" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreateJS" type="String/Object" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseChars" type="String" required="false">
					<help><![CDATA[ The base set of characters to evaluate as valid numbers
(defaults to '0123456789').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseCharsJS" type="JS" required="false">
					<help><![CDATA[ The base set of characters to evaluate as valid numbers
(defaults to '0123456789').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="blankText" type="String" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="blankTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="decimalPrecision" type="Number" required="false">
					<help><![CDATA[ The maximum precision to display after the decimal
separator (defaults to 2)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="decimalSeparator" type="String" required="false">
					<help><![CDATA[ Character(s) to allow as the decimal separator
(defaults to '.')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="decimalSeparatorJS" type="JS" required="false">
					<help><![CDATA[ Character(s) to allow as the decimal separator
(defaults to '.')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disableKeyFilter" type="Boolean" required="false">
					<help><![CDATA[ True to disable input keystroke filtering (defaults to
false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClass" type="String" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyText" type="String" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyTextJS" type="JS" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClass" type="String" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field x-form-num-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field x-form-num-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="grow" type="Boolean" required="false">
					<help><![CDATA[ True if this field should automatically grow and shrink
to its content
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="growMax" type="Number" required="false">
					<help><![CDATA[ The maximum width to allow when grow = true (defaults
to 800)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="growMin" type="Number" required="false">
					<help><![CDATA[ The minimum width to allow when grow = true (defaults
to 30)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputType" type="String" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputTypeJS" type="JS" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidText" type="String" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskRe" type="RegExp" required="false">
					<help><![CDATA[ An input mask regular expression that will be used to
filter keystrokes that don't match (defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLength" type="Number" required="false">
					<help><![CDATA[ Maximum input field length allowed (defaults to
Number.MAX_VALUE)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxText" type="String" required="false">
					<help><![CDATA[ Error text to display if the maximum value validation
fails (defaults to "The maximum value for this field is
{maxValue}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the maximum value validation
fails (defaults to "The maximum value for this field is
{maxValue}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxValue" type="Number" required="false">
					<help><![CDATA[ The maximum allowed value (defaults to
Number.MAX_VALUE)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLength" type="Number" required="false">
					<help><![CDATA[ Minimum input field length required (defaults to 0) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minText" type="String" required="false">
					<help><![CDATA[ Error text to display if the minimum value validation
fails (defaults to "The minimum value for this field is
{minValue}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the minimum value validation
fails (defaults to "The minimum value for this field is
{minValue}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minValue" type="Number" required="false">
					<help><![CDATA[ The minimum allowed value (defaults to
Number.NEGATIVE_INFINITY)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFx" type="String" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFxJS" type="JS" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTarget" type="String" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTargetJS" type="JS" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nanText" type="String" required="false">
					<help><![CDATA[ Error text to display if the value is not a valid
number. For example, this can happen if a valid
character like '.' or '-' is left in the field with no
number (defaults to "{value} is not a valid number")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nanTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the value is not a valid
number. For example, this can happen if a valid
character like '.' or '-' is left in the field with no
number (defaults to "{value} is not a valid number")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="readOnly" type="Boolean" required="false">
					<help><![CDATA[ True to mark the field as readOnly in HTML (defaults to
false) -- Note: this only sets the element's readOnly
DOM attribute.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="regex" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object to be tested against the
field value during validation (defaults to null). If
available, this regex will be evaluated only after the
basic validators all return true, and will be passed
the current field value. If the test fails, the field
will be marked invalid using regexText.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexText" type="String" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selectOnFocus" type="Boolean" required="false">
					<help><![CDATA[ True to automatically select any existing field text
when the field receives input focus (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ The tabIndex for this field. Note this only applies to
fields that are rendered, not those which are built via
applyTo (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validateOnBlur" type="Boolean" required="false">
					<help><![CDATA[ Whether the field should validate when it loses focus
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validationDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds after user input
begins until validation is initiated (defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEvent" type="String" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEventJS" type="String/Boolean" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validator" type="Function" required="false">
					<help><![CDATA[ A custom validation function to be called during field
validation (defaults to null). If specified, this
function will be called only after the built-in
validations (allowBlank, minLength, maxLength) and any
configured vtype all return true. This function will be
passed the current field value and expected to return
boolean true if the value is valid or a string error
message if invalid.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="Mixed" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtype" type="String" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeJS" type="JS" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeText" type="String" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeTextJS" type="JS" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:onclick" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
		</tag>
		<tag name="ext:onready" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="debug" type="Boolean" required="false">
					<help><![CDATA[ True to enable the use of the debugging version of Ext
JavaScript resources for easier troubleshooting
 ]]></help>
					<values default="#Application.ColdExt.debug#"><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="js" type="String" required="false">
					<help><![CDATA[ (Optional) Path to the Ext JavaScript resources ]]></help>
					<values default="#Application.ColdExt.js#"></values>
				</parameter>
				<parameter name="css" type="String" required="false">
					<help><![CDATA[ (Optional) Path to the Ext CSS resources ]]></help>
					<values default="#Application.ColdExt.css#"></values>
				</parameter>
				<parameter name="images" type="String" required="false">
					<help><![CDATA[ (Optional) Path to the Ext image resources ]]></help>
					<values default="#Application.ColdExt.images#"></values>
				</parameter>
				<parameter name="theme" type="String" required="false">
					<help><![CDATA[ (Optional) Path to an Ext CSS Theme resource ]]></help>
					<values default="#Application.ColdExt.theme#"></values>
				</parameter>
				<parameter name="blankImageURL" type="String" required="false">
					<help><![CDATA[ (Optional) Path to the Ext 1x1 blank pixel image ]]></help>
					<values default="#Application.ColdExt.blankImageURL#"></values>
				</parameter>
				<parameter name="quickTips" type="String" required="false">
					<help><![CDATA[ (Optional) True to enable quick tips ]]></help>
					<values default="#Application.ColdExt.quickTips#"></values>
				</parameter>
				<parameter name="validationTarget" type="String" required="false">
					<help><![CDATA[ (Optional) Specify the target for validation error
quick tips
 ]]></help>
					<values default="#Application.ColdExt.validationTarget#"></values>
				</parameter>
				<parameter name="loadingMask" type="Boolean" required="false">
					<help><![CDATA[ (Optional) True to use a full screen mask with a
loading indicator while resources are loading (defaults
to false)
 ]]></help>
					<values default="#Application.ColdExt.loadingMask#"><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="uxLoad" type="List" required="false">
					<help><![CDATA[ (Optional) A comma separated list of User Extensions to
be loaded up front. Use this attribute to load the
resources for extensions which may be loaded via Ajax,
e.g. ux="portal,gridfilters". The extension name is the
folder name in the /ext/ux folder.
 ]]></help>
					<values default="#Application.ColdExt.uxLoad#"></values>
				</parameter>
		</tag>
		<tag name="ext:option" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="value" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:pagingtoolbar" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="displayInfo" type="Boolean" required="false">
					<help><![CDATA[ True to display the displayMsg (defaults to false) ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="displayMsg" type="String" required="false">
					<help><![CDATA[ The paging status message to display (defaults to
"Displaying {0} - {1} of {2}"). Note that this string
is formatted using the braced numbers 0-2 as tokens
that are replaced by the values for start, end and
total respectively. These tokens should be preserved
when overriding this string if showing those values is
desired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="displayMsgJS" type="JS" required="false">
					<help><![CDATA[ The paging status message to display (defaults to
"Displaying {0} - {1} of {2}"). Note that this string
is formatted using the braced numbers 0-2 as tokens
that are replaced by the values for start, end and
total respectively. These tokens should be preserved
when overriding this string if showing those values is
desired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyMsg" type="String" required="false">
					<help><![CDATA[ The message to display when no records are found
(defaults to "No data to display")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyMsgJS" type="JS" required="false">
					<help><![CDATA[ The message to display when no records are found
(defaults to "No data to display")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageSize" type="Number" required="false">
					<help><![CDATA[ The number of records to display per page (defaults to
20)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="store" type="Ext.data.Store" required="false">
					<help><![CDATA[ The Ext.data.Store the paging toolbar should use as its
data source (required).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="position" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="bottom"></values>
				</parameter>
		</tag>
		<tag name="ext:panel" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="layout" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="form"></values>
				</parameter>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
true if the Ext.Fx class is available, otherwise
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animFloat" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel that will
close again once the user mouses out of that panel (or
clicks out if autoHide = false). Setting animFloat to
false will prevent the open and close of these floated
panels from being animated (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some panel-specific structural
markup. When applyTo is used, constituent parts of the
panel can be specified by CSS class name within the
main element, and the panel will automatically create
those components from that markup. Any required
components not specified in the markup will be
autogenerated if necessary. The following class names
are supported (baseCls will be replaced by baseCls):
baseCls + '-header' baseCls + '-header-text' baseCls +
'-bwrap' baseCls + '-tbar' baseCls + '-body' baseCls +
'-bbar' baseCls + '-footer' Using this config, a call
to render() is not required. If applyTo is specified,
any value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the panel's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some panel-specific structural
markup. When applyTo is used, constituent parts of the
panel can be specified by CSS class name within the
main element, and the panel will automatically create
those components from that markup. Any required
components not specified in the markup will be
autogenerated if necessary. The following class names
are supported (baseCls will be replaced by baseCls):
baseCls + '-header' baseCls + '-header-text' baseCls +
'-bwrap' baseCls + '-tbar' baseCls + '-body' baseCls +
'-bbar' baseCls + '-footer' Using this config, a call
to render() is not required. If applyTo is specified,
any value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the panel's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Setting autoHeight:true
means that the browser will manage the panel's height
based on its contents, and that Ext will not manage it
at all. If the panel is within a layout that manages
dimensions (fit, border, etc.) then setting
autoHeight:true can cause issues with scrolling and
will not generally work as expected since the panel
will take on the height of its contents rather than the
height required by the Ext layout.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHide" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel. If autoHide
is true, the panel will automatically hide after the
user mouses out of the panel. If autoHide is false, the
panel will continue to display until the user clicks
outside of the panel (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoLoad" type="String" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoLoadJS" type="Object/String/Function" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoScroll" type="Boolean" required="false">
					<help><![CDATA[ True to use overflow:'auto' on the panel's body element
and show scroll bars automatically when necessary,
false to clip any overflowing content (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bbar" type="Object/Array" required="false">
					<help><![CDATA[ The bottom toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
bottom toolbar after render, use getBottomToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyBorder" type="Boolean" required="false">
					<help><![CDATA[ True to display an interior border on the body element
of the panel, false to hide it (defaults to true). This
only applies when border == true. If border == true and
bodyBorder == false, the border will display as a 1px
wide inset border, giving the entire body element an
inset appearance.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyle" type="String" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyleJS" type="String/Object/Function" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the panel's body
element, false to hide them (defaults to true). By
default, the border is a 2px wide inset border, but
this can be further altered by setting bodyBorder to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonAlign" type="String" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonAlignJS" type="JS" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttons" type="Array" required="false">
					<help><![CDATA[ An array of Ext.Buttons or Ext.Button configs used to
add buttons to the footer of this panel.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cmargins" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the collapsed state in the format:{    top:
(top margin),    right: (right margin),    bottom:
(bottom margin)    left: (left margin),} May also be a
string containing space-separated, numeric margin
values. The order of the sides associated with each
value matches the way CSS processes margin values.  If
there is only one value, it applies to all sides. If
there are two values, the top and bottom borders are
set to the first value and the right and left are set
to the second. If there are three values, the top is
set to the first value, the left and right are set to
the second, and the bottom is set to the third. If
there are four values, they apply to the top, right,
bottom, and left, respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseFirst" type="Boolean" required="false">
					<help><![CDATA[ True to make sure the collapse/expand toggle button
always renders first (to the left of) any other tools
in the panel's title bar, false to render it last
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapseMode" type="String" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseModeJS" type="JS" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ By default, collapsible regions will be visible when
rendered. Set the collapsed config to true to render
the region as collapsed.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel collapsed, false to render it
expanded (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to allow the user to collapse this region
(defaults to false). If true, an expand/collapse tool
button will automatically be rendered into the title
bar of the region, otherwise the button will not be
shown. Note that a title bar is required to display the
toggle button -- if no region title is specified, the
region will only be collapsible if collapseMode is set
to 'mini'.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to make the panel collapsible and have the
expand/collapse toggle button automatically rendered
into the header tool button area, false to keep the
panel statically sized with no button (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsibleSplitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsibleSplitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentEl" type="String" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentElJS" type="JS" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this panel disabled (default is false). An
important note when using the disabled config on panels
is that IE will often fail to initialize the disabled
mask element correectly if the panel's layout has not
yet completed by the time the Panel is disabled during
the render process. If you experience this issue, you
may need to instead use the afterlayout event to
initialize the disabled state: new Ext.Panel({    ...
listeners: {        'afterlayout': {            fn:
function(p){                p.disable();            },
single: true // important, as many layouts
can occur        }    }});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of this Panel (defaults to
false). For custom drag/drop implementations, an
Ext.Panel.DD config could also be passed in this config
instead of true. Ext.Panel.DD is an internal,
undocumented class which moves a proxy Element around
in place of the Panel's element, but provides no other
behaviour during dragging or on drop. It is a subclass
of Ext.dd.DragSource, so behaviour may be added by
implementing the interface methods of Ext.dd.DragDrop
eg: new Ext.Panel({    title: 'Drag me',    x: 100,
y: 100,    renderTo: Ext.getBody(),    floating: true,
frame: true,    width: 400,    height: 200,
draggable: {//      Config option of Ext.Panel.DD
class.//      It's a floating Panel, so do not show a
placeholder proxy in the original position.
insertProxy: false,//      Called for each mousemove
event while dragging the DD object.        onDrag :
function(e){//          Record the x,y position of the
drag proxy so that we can//          position the Panel
at end of drag.            var pel =
this.proxy.getEl();            this.x =
pel.getLeft(true);            this.y =
pel.getTop(true);//          Keep the Shadow aligned if
there is one.            var s =
this.panel.getEl().shadow;            if (s) {
s.realign(this.x, this.y, pel.getWidth(),
pel.getHeight());            }        },//      Called
on the mouseup event.        endDrag : function(e){
this.panel.setPosition(this.x, this.y);        }
}}).show();
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="elements" type="String" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="elementsJS" type="JS" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="floatable" type="Boolean" required="false">
					<help><![CDATA[ True to allow clicking a collapsed region's bar to
display the region's panel floated above the layout,
false to force the user to fully expand a collapsed
region by clicking the expand button to see it again
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="floating" type="Boolean" required="false">
					<help><![CDATA[ True to float the panel (absolute position it with
automatic shimming and shadow), false to display it
inline where it is rendered (defaults to false). Note
that by default, setting floating to true will cause
the panel to display at negative offsets so that it is
hidden -- because the panel is absolute positioned, the
position must be set explicitly after render (e.g.,
myPanel.setPosition(100,100);). Also, when floating a
panel you should always assign a fixed width, otherwise
it will be auto width and will expand to fill to the
right edge of the viewport.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="footer" type="Boolean" required="false">
					<help><![CDATA[ True to create the footer element explicitly, false to
skip creating it. By default, when footer is not
specified, if one or more buttons have been added to
the panel the footer will be created automatically,
otherwise it will not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="frame" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel with custom rounded borders,
false to render with plain 1px square borders (defaults
to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="Boolean" required="false">
					<help><![CDATA[ True to create the header element explicitly, false to
skip creating it. By default, when header is not
specified, if a title is set the header will be created
automatically, otherwise it will not. If a title is set
but header is explicitly set to false, the header will
not be rendered.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="headerAsText" type="Boolean" required="false">
					<help><![CDATA[ True to display the panel title in the header, false to
hide it (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideCollapseTool" type="Boolean" required="false">
					<help><![CDATA[ True to hide the expand/collapse toggle button when
collapsible = true, false to display it (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="html" type="String" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="htmlJS" type="String/Object" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layout" type="String" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutJS" type="JS" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="margins" type="String" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="marginsJS" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width in pixels of all buttons in this panel
(defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum allowable height in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum allowable width in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events to
handle anything that is sensitive to the current size
of the viewport. This value is typically managed by the
chosen layout and should not need to be set manually.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderHidden" type="Boolean" required="false">
					<help><![CDATA[ True to hide each contained item on render (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadowOffset" type="Number" required="false">
					<help><![CDATA[ The number of pixels to offset the shadow if displayed
(defaults to 4). Note that this option only applies
when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shim" type="Boolean" required="false">
					<help><![CDATA[ False to disable the iframe shim in browsers which need
one (defaults to true). Note that this option only
applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="split" type="Boolean" required="false">
					<help><![CDATA[ True to display a Ext.SplitBar between this region and
its neighbor, allowing the user to resize the regions
dynamically (defaults to false). When split == true, it
is common to specify a minSize and maxSize for the
BoxComponent representing the region. These are not
native configs of BoxComponent, and are used only by
this class.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="splitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="splitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tbar" type="Object/Array" required="false">
					<help><![CDATA[ The top toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
top toolbar after render, use getTopToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to allow expanding and collapsing the panel (when
collapsible = true) by clicking anywhere in the header
bar, false to allow it only by clicking to tool button
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tools" type="Array" required="false">
					<help><![CDATA[ An array of tool button configs to be added to the
header tool area. When rendered, each tool is stored as
an Element referenced by a public property called
tools. Each tool config may contain the following
properties:  id : StringRequired. The type of tool to
create. Values may be toggle (Created by default when
collapsible is true) close minimize maximize restore
gear pin unpin right left up down refresh minus plus
help search save print  handler : FunctionRequired. The
function to call when clicked. Arguments passed are:
event : Ext.EventObjectThe click event. toolEl :
Ext.ElementThe tool Element. Panel : Ext.PanelThe host
Panel  scope : ObjectThe scope in which to call the
handler. qtip : String/ObjectA tip string, or a config
argument to Ext.QuickTip.register hidden : BooleanTrue
to initially render hidden. on : ObjectA listener
config object specifiying event listeners in the format
of an argument to addListener  Example usage: tools:[{
id:'refresh',    qtip: 'Refresh form Data',    //
hidden:true,    handler: function(event, toolEl,
panel){        // refresh logic    }}] Note that apart
from the toggle tool which is provided when a panel is
collapsible, these tools only provide the visual
button. Any required functionality must be provided by
adding handlers that implement the necessary behavior.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="useSplitTips" type="Boolean" required="false">
					<help><![CDATA[ True to display a tooltip when the user hovers over a
region's split bar (defaults to false). The tooltip
text will be the value of either splitTip or
collapsibleSplitTip as appropriate.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="closable" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="padding" type="Number" required="false">
					<help><![CDATA[ (ColdExt attribute) The number of pixels to use as
padding for the bodyStyle
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="region" type="String" required="false">
					<help><![CDATA[ The position within the viewport to attach this
component to. The 'center' region is always required
when using a viewport.
 ]]></help>
					<values default=""><value option="center" /><value option="east" /><value option="north" /><value option="south" /><value option="west" /></values>
				</parameter>
		</tag>
		<tag name="ext:param" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="value" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:progressbar" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animate" type="Boolean" required="false">
					<help><![CDATA[ True to animate the progress bar during transitions
(defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class to apply to the progress bar's
wrapper element (defaults to 'x-progress')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class to apply to the progress bar's
wrapper element (defaults to 'x-progress')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The progress bar element's id (defaults to an
auto-generated id)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The progress bar element's id (defaults to an
auto-generated id)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="text" type="String" required="false">
					<help><![CDATA[ The progress bar text (defaults to '') ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textJS" type="JS" required="false">
					<help><![CDATA[ The progress bar text (defaults to '') ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textEl" type="String" required="false">
					<help><![CDATA[ The element to render the progress text to (defaults to
the progress bar's internal text element)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textElJS" type="Mixed" required="false">
					<help><![CDATA[ The element to render the progress text to (defaults to
the progress bar's internal text element)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="value" type="Float" required="false">
					<help><![CDATA[ A floating point value between 0 and 1 (e.g., .5,
defaults to 0)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:propertycolumn" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="align" type="String" required="false">
					<help><![CDATA[ (optional) Set the CSS text-align property of the
column. Defaults to undefined.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="alignJS" type="JS" required="false">
					<help><![CDATA[ (optional) Set the CSS text-align property of the
column. Defaults to undefined.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="css" type="String" required="false">
					<help><![CDATA[ (optional) Set custom CSS for all table cells in the
column (excluding headers). Defaults to undefined.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cssJS" type="JS" required="false">
					<help><![CDATA[ (optional) Set custom CSS for all table cells in the
column (excluding headers). Defaults to undefined.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dataIndex" type="String" required="false">
					<help><![CDATA[ (optional) The name of the field in the grid's
Ext.data.Store's Ext.data.Record definition from which
to draw the column's value. If not specified, the
column's index is used as an index into the Record's
data Array.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dataIndexJS" type="JS" required="false">
					<help><![CDATA[ (optional) The name of the field in the grid's
Ext.data.Store's Ext.data.Record definition from which
to draw the column's value. If not specified, the
column's index is used as an index into the Record's
data Array.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="editor" type="Ext.form.Field" required="false">
					<help><![CDATA[ (optional) The Ext.form.Field to use when editing
values in this column if editing is supported by the
grid.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fixed" type="Boolean" required="false">
					<help><![CDATA[ (optional) True if the column width cannot be changed.
Defaults to false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="String" required="false">
					<help><![CDATA[ The header text to display in the Grid view. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="headerJS" type="JS" required="false">
					<help><![CDATA[ The header text to display in the Grid view. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ (optional) True to hide the column. Defaults to false. ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideable" type="Boolean" required="false">
					<help><![CDATA[ (optional) Specify as false to prevent the user from
hiding this column (defaults to true). To disallow
column hiding globally for all columns in the grid, use
Ext.grid.GridPanel.enableColumnHide instead.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ (optional) Defaults to the column's initial ordinal
position. A name which identifies this column. The id
is used to create a CSS class name which is applied to
all table cells (including headers) in that column. The
class name takes the form of x-grid3-td-id  Header
cells will also recieve this class name, but will also
have the class x-grid3-hd, so to target header cells,
use CSS selectors such as:.x-grid3-hd.x-grid3-td-id The
Ext.grid.GridPanel.autoExpandColumn grid config option
references the column via this identifier.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ (optional) Defaults to the column's initial ordinal
position. A name which identifies this column. The id
is used to create a CSS class name which is applied to
all table cells (including headers) in that column. The
class name takes the form of x-grid3-td-id  Header
cells will also recieve this class name, but will also
have the class x-grid3-hd, so to target header cells,
use CSS selectors such as:.x-grid3-hd.x-grid3-td-id The
Ext.grid.GridPanel.autoExpandColumn grid config option
references the column via this identifier.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuDisabled" type="Boolean" required="false">
					<help><![CDATA[ (optional) True to disable the column menu. Defaults to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderer" type="Function" required="false">
					<help><![CDATA[ (optional) A function used to generate HTML markup for
a cell given the cell's data value. See setRenderer. If
not specified, the default renderer uses the raw data
value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="resizable" type="Boolean" required="false">
					<help><![CDATA[ (optional) False to disable column resizing. Defaults
to true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="sortable" type="Boolean" required="false">
					<help><![CDATA[ (optional) True if sorting is to be allowed on this
column. Defaults to the value of the defaultSortable
property. Whether local/remote sorting is used is
specified in Ext.data.Store.remoteSort.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tooltip" type="String" required="false">
					<help><![CDATA[ (optional) A text string to use as the column header's
tooltip. If Quicktips are enabled, this value will be
used as the text of the quick tip, otherwise it will be
set as the header's HTML title attribute. Defaults to
''.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltipJS" type="JS" required="false">
					<help><![CDATA[ (optional) A text string to use as the column header's
tooltip. If Quicktips are enabled, this value will be
used as the text of the quick tip, otherwise it will be
set as the header's HTML title attribute. Defaults to
''.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ (optional) The initial width in pixels of the column.
This is ignored if the Grid's view is configured with
forceFit true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:propertygrid" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
true if the Ext.Fx class is available, otherwise
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animFloat" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel that will
close again once the user mouses out of that panel (or
clicks out if autoHide = false). Setting animFloat to
false will prevent the open and close of these floated
panels from being animated (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEncode" type="Boolean" required="false">
					<help><![CDATA[ True to automatically HTML encode and decode values pre
and post edit (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoExpandColumn" type="String" required="false">
					<help><![CDATA[ The id of a column in this grid that should expand to
fill unused space. This id can not be 0.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoExpandColumnJS" type="JS" required="false">
					<help><![CDATA[ The id of a column in this grid that should expand to
fill unused space. This id can not be 0.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoExpandMax" type="Number" required="false">
					<help><![CDATA[ The maximum width the autoExpandColumn can have (if
enabled). Defaults to 1000.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoExpandMin" type="Number" required="false">
					<help><![CDATA[ The minimum width the autoExpandColumn can have (if
enabled). defaults to 50.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHide" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel. If autoHide
is true, the panel will automatically hide after the
user mouses out of the panel. If autoHide is false, the
panel will continue to display until the user clicks
outside of the panel (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoLoad" type="String" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoLoadJS" type="Object/String/Function" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoScroll" type="Boolean" required="false">
					<help><![CDATA[ True to use overflow:'auto' on the panel's body element
and show scroll bars automatically when necessary,
false to clip any overflowing content (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bbar" type="Object/Array" required="false">
					<help><![CDATA[ The bottom toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
bottom toolbar after render, use getBottomToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyBorder" type="Boolean" required="false">
					<help><![CDATA[ True to display an interior border on the body element
of the panel, false to hide it (defaults to true). This
only applies when border == true. If border == true and
bodyBorder == false, the border will display as a 1px
wide inset border, giving the entire body element an
inset appearance.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyle" type="String" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyleJS" type="String/Object/Function" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the panel's body
element, false to hide them (defaults to true). By
default, the border is a 2px wide inset border, but
this can be further altered by setting bodyBorder to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonAlign" type="String" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonAlignJS" type="JS" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttons" type="Array" required="false">
					<help><![CDATA[ An array of Ext.Buttons or Ext.Button configs used to
add buttons to the footer of this panel.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clicksToEdit" type="Number" required="false">
					<help><![CDATA[ The number of clicks on a cell required to display the
cell's editor (defaults to 2). Setting this option to
'auto' means that mousedown on the selected cell starts
editing that cell.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cm" type="Object" required="false">
					<help><![CDATA[ Shorthand for colModel. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cmargins" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the collapsed state in the format:{    top:
(top margin),    right: (right margin),    bottom:
(bottom margin)    left: (left margin),} May also be a
string containing space-separated, numeric margin
values. The order of the sides associated with each
value matches the way CSS processes margin values.  If
there is only one value, it applies to all sides. If
there are two values, the top and bottom borders are
set to the first value and the right and left are set
to the second. If there are three values, the top is
set to the first value, the left and right are set to
the second, and the bottom is set to the third. If
there are four values, they apply to the top, right,
bottom, and left, respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="colModel" type="Object" required="false">
					<help><![CDATA[ The Ext.grid.ColumnModel to use when rendering the grid
(required).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseFirst" type="Boolean" required="false">
					<help><![CDATA[ True to make sure the collapse/expand toggle button
always renders first (to the left of) any other tools
in the panel's title bar, false to render it last
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapseMode" type="String" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseModeJS" type="JS" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ By default, collapsible regions will be visible when
rendered. Set the collapsed config to true to render
the region as collapsed.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel collapsed, false to render it
expanded (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to allow the user to collapse this region
(defaults to false). If true, an expand/collapse tool
button will automatically be rendered into the title
bar of the region, otherwise the button will not be
shown. Note that a title bar is required to display the
toggle button -- if no region title is specified, the
region will only be collapsible if collapseMode is set
to 'mini'.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to make the panel collapsible and have the
expand/collapse toggle button automatically rendered
into the header tool button area, false to keep the
panel statically sized with no button (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsibleSplitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsibleSplitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="columns" type="Array" required="false">
					<help><![CDATA[ An array of columns to auto create a ColumnModel ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentEl" type="String" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentElJS" type="JS" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="customEditors" type="Object" required="false">
					<help><![CDATA[ An object containing name/value pairs of custom editor
type definitions that allow the grid to support
additional types of editable fields. By default, the
grid supports strongly-typed editing of strings, dates,
numbers and booleans using built-in form editors, but
any custom type can be supported and associated with a
custom input control by specifying a custom editor. The
name of the editor type should correspond with the name
of the property that will use the editor. Example
usage: var grid = new Ext.grid.PropertyGrid({    ...
customEditors: {        'Start Time': new
Ext.grid.GridEditor(new
Ext.form.TimeField({selectOnFocus:true}))    },
source: {        'Start Time': '10:00 AM'    }});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="deferRowRender" type="Boolean" required="false">
					<help><![CDATA[ True to enable deferred row rendering. Default is true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disableSelection" type="Boolean" required="false">
					<help><![CDATA[ True to disable selections in the grid (defaults to
false). - ignored if a SelectionModel is specified
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of this Panel (defaults to
false). For custom drag/drop implementations, an
Ext.Panel.DD config could also be passed in this config
instead of true. Ext.Panel.DD is an internal,
undocumented class which moves a proxy Element around
in place of the Panel's element, but provides no other
behaviour during dragging or on drop. It is a subclass
of Ext.dd.DragSource, so behaviour may be added by
implementing the interface methods of Ext.dd.DragDrop
eg: new Ext.Panel({    title: 'Drag me',    x: 100,
y: 100,    renderTo: Ext.getBody(),    floating: true,
frame: true,    width: 400,    height: 200,
draggable: {//      Config option of Ext.Panel.DD
class.//      It's a floating Panel, so do not show a
placeholder proxy in the original position.
insertProxy: false,//      Called for each mousemove
event while dragging the DD object.        onDrag :
function(e){//          Record the x,y position of the
drag proxy so that we can//          position the Panel
at end of drag.            var pel =
this.proxy.getEl();            this.x =
pel.getLeft(true);            this.y =
pel.getTop(true);//          Keep the Shadow aligned if
there is one.            var s =
this.panel.getEl().shadow;            if (s) {
s.realign(this.x, this.y, pel.getWidth(),
pel.getHeight());            }        },//      Called
on the mouseup event.        endDrag : function(e){
this.panel.setPosition(this.x, this.y);        }
}}).show();
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="elements" type="String" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="elementsJS" type="JS" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="enableColumnHide" type="Boolean" required="false">
					<help><![CDATA[ True to enable hiding of columns with the header
context menu.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableColumnMove" type="Boolean" required="false">
					<help><![CDATA[ True to enable drag and drop reorder of columns. ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableColumnResize" type="Boolean" required="false">
					<help><![CDATA[ False to turn off column resizing for the whole grid
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableDragDrop" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of the selected rows of the
GridPanel. Setting this to true causes this GridPanel's
GridView to create an instance of
Ext.grid.GridDragZone. This is available (only after
the Grid has been rendered) as the GridView's dragZone
property. A cooperating DropZone must be created who's
implementations of onNodeEnter, onNodeOver, onNodeOut
and onNodeDrop are able to process the data which is
provided.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableHdMenu" type="Boolean" required="false">
					<help><![CDATA[ True to enable the drop down button for menu in the
headers.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="extraCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="floatable" type="Boolean" required="false">
					<help><![CDATA[ True to allow clicking a collapsed region's bar to
display the region's panel floated above the layout,
false to force the user to fully expand a collapsed
region by clicking the expand button to see it again
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="floating" type="Boolean" required="false">
					<help><![CDATA[ True to float the panel (absolute position it with
automatic shimming and shadow), false to display it
inline where it is rendered (defaults to false). Note
that by default, setting floating to true will cause
the panel to display at negative offsets so that it is
hidden -- because the panel is absolute positioned, the
position must be set explicitly after render (e.g.,
myPanel.setPosition(100,100);). Also, when floating a
panel you should always assign a fixed width, otherwise
it will be auto width and will expand to fill to the
right edge of the viewport.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="footer" type="Boolean" required="false">
					<help><![CDATA[ True to create the footer element explicitly, false to
skip creating it. By default, when footer is not
specified, if one or more buttons have been added to
the panel the footer will be created automatically,
otherwise it will not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="frame" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel with custom rounded borders,
false to render with plain 1px square borders (defaults
to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="Boolean" required="false">
					<help><![CDATA[ True to create the header element explicitly, false to
skip creating it. By default, when header is not
specified, if a title is set the header will be created
automatically, otherwise it will not. If a title is set
but header is explicitly set to false, the header will
not be rendered.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="headerAsText" type="Boolean" required="false">
					<help><![CDATA[ True to display the panel title in the header, false to
hide it (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideCollapseTool" type="Boolean" required="false">
					<help><![CDATA[ True to hide the expand/collapse toggle button when
collapsible = true, false to display it (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideHeaders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the grid's header (defaults to false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="html" type="String" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="htmlJS" type="String/Object" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layout" type="String" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutJS" type="JS" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="loadMask" type="Object" required="false">
					<help><![CDATA[ An Ext.LoadMask config or true to mask the grid while
loading (defaults to false).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="margins" type="String" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="marginsJS" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="maxHeight" type="Number" required="false">
					<help><![CDATA[ Sets the maximum height of the grid - ignored if
autoHeight is not on.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width in pixels of all buttons in this panel
(defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minColumnWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width a column can be resized to. Defaults
to 25.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum allowable height in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum allowable width in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events to
handle anything that is sensitive to the current size
of the viewport. This value is typically managed by the
chosen layout and should not need to be set manually.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="propertyNames" type="Object" required="false">
					<help><![CDATA[ An object containing property name/display name pairs.
If specified, the display name will be shown in the
name column instead of the property name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderHidden" type="Boolean" required="false">
					<help><![CDATA[ True to hide each contained item on render (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selModel" type="Object" required="false">
					<help><![CDATA[ Any subclass of Ext.grid.AbstractSelectionModel that
will provide the selection model for the grid (defaults
to Ext.grid.RowSelectionModel if not specified).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadowOffset" type="Number" required="false">
					<help><![CDATA[ The number of pixels to offset the shadow if displayed
(defaults to 4). Note that this option only applies
when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shim" type="Boolean" required="false">
					<help><![CDATA[ False to disable the iframe shim in browsers which need
one (defaults to true). Note that this option only
applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="sm" type="Object" required="false">
					<help><![CDATA[ Shorthand for selModel. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="source" type="Object" required="false">
					<help><![CDATA[ A data object to use as the data source of the grid
(see setSource for details).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="split" type="Boolean" required="false">
					<help><![CDATA[ True to display a Ext.SplitBar between this region and
its neighbor, allowing the user to resize the regions
dynamically (defaults to false). When split == true, it
is common to specify a minSize and maxSize for the
BoxComponent representing the region. These are not
native configs of BoxComponent, and are used only by
this class.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="splitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="splitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="store" type="Ext.data.Store" required="false">
					<help><![CDATA[ The Ext.data.Store the grid should use as its data
source (required).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stripeRows" type="Boolean" required="false">
					<help><![CDATA[ True to stripe the rows. Default is false. This causes
the CSS class x-grid3-row-alt to be added to alternate
rows of the grid. A default CSS rule is provided which
sets a background colour, but you can override this
with a rule which either overrides the background-color
style using the "!important" modifier, or which uses a
CSS selector of higher specificity.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tbar" type="Object/Array" required="false">
					<help><![CDATA[ The top toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
top toolbar after render, use getTopToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to allow expanding and collapsing the panel (when
collapsible = true) by clicking anywhere in the header
bar, false to allow it only by clicking to tool button
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tools" type="Array" required="false">
					<help><![CDATA[ An array of tool button configs to be added to the
header tool area. When rendered, each tool is stored as
an Element referenced by a public property called
tools. Each tool config may contain the following
properties:  id : StringRequired. The type of tool to
create. Values may be toggle (Created by default when
collapsible is true) close minimize maximize restore
gear pin unpin right left up down refresh minus plus
help search save print  handler : FunctionRequired. The
function to call when clicked. Arguments passed are:
event : Ext.EventObjectThe click event. toolEl :
Ext.ElementThe tool Element. Panel : Ext.PanelThe host
Panel  scope : ObjectThe scope in which to call the
handler. qtip : String/ObjectA tip string, or a config
argument to Ext.QuickTip.register hidden : BooleanTrue
to initially render hidden. on : ObjectA listener
config object specifiying event listeners in the format
of an argument to addListener  Example usage: tools:[{
id:'refresh',    qtip: 'Refresh form Data',    //
hidden:true,    handler: function(event, toolEl,
panel){        // refresh logic    }}] Note that apart
from the toggle tool which is provided when a panel is
collapsible, these tools only provide the visual
button. Any required functionality must be provided by
adding handlers that implement the necessary behavior.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="trackMouseOver" type="Boolean" required="false">
					<help><![CDATA[ True to highlight rows when the mouse is over. Default
is true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="useSplitTips" type="Boolean" required="false">
					<help><![CDATA[ True to display a tooltip when the user hovers over a
region's split bar (defaults to false). The tooltip
text will be the value of either splitTip or
collapsibleSplitTip as appropriate.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="view" type="Object" required="false">
					<help><![CDATA[ The Ext.grid.GridView used by the grid. This can be set
before a call to render().
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="viewConfig" type="Object" required="false">
					<help><![CDATA[ A config object that will be used to create the grid's
UI view. Any of the config options available for
Ext.grid.GridView can be specified here. This option is
ignored if view is xpecified.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="region" type="String" required="false">
					<help><![CDATA[ The position within the viewport to attach this
component to. The 'center' region is always required
when using a viewport.
 ]]></help>
					<values default=""><value option="center" /><value option="east" /><value option="north" /><value option="south" /><value option="west" /></values>
				</parameter>
		</tag>
		<tag name="ext:propertyrecord" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="value" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:quicktip" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
true if the Ext.Fx class is available, otherwise
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHide" type="Boolean" required="false">
					<help><![CDATA[ True to automatically hide the tooltip after the mouse
exits the target element or after the dismissDelay has
expired if set (defaults to true). If closable = true a
close tool button will be rendered into the tooltip
header.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoLoad" type="String" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoLoadJS" type="Object/String/Function" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoScroll" type="Boolean" required="false">
					<help><![CDATA[ True to use overflow:'auto' on the panel's body element
and show scroll bars automatically when necessary,
false to clip any overflowing content (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bbar" type="Object/Array" required="false">
					<help><![CDATA[ The bottom toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
bottom toolbar after render, use getBottomToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyBorder" type="Boolean" required="false">
					<help><![CDATA[ True to display an interior border on the body element
of the panel, false to hide it (defaults to true). This
only applies when border == true. If border == true and
bodyBorder == false, the border will display as a 1px
wide inset border, giving the entire body element an
inset appearance.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyle" type="String" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyleJS" type="String/Object/Function" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the panel's body
element, false to hide them (defaults to true). By
default, the border is a 2px wide inset border, but
this can be further altered by setting bodyBorder to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonAlign" type="String" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonAlignJS" type="JS" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttons" type="Array" required="false">
					<help><![CDATA[ An array of Ext.Buttons or Ext.Button configs used to
add buttons to the footer of this panel.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="closable" type="Boolean" required="false">
					<help><![CDATA[ True to render a close tool button into the tooltip
header (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseFirst" type="Boolean" required="false">
					<help><![CDATA[ True to make sure the collapse/expand toggle button
always renders first (to the left of) any other tools
in the panel's title bar, false to render it last
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel collapsed, false to render it
expanded (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to make the panel collapsible and have the
expand/collapse toggle button automatically rendered
into the header tool button area, false to keep the
panel statically sized with no button (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="contentEl" type="String" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentElJS" type="JS" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultAlign" type="String" required="false">
					<help><![CDATA[ Experimental. The default Ext.Element.alignTo anchor
position value for this tip relative to its element of
origin (defaults to "tl-bl?").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultAlignJS" type="JS" required="false">
					<help><![CDATA[ Experimental. The default Ext.Element.alignTo anchor
position value for this tip relative to its element of
origin (defaults to "tl-bl?").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dismissDelay" type="Number" required="false">
					<help><![CDATA[ Delay in milliseconds before the tooltip automatically
hides (defaults to 5000). To disable automatic hiding,
set dismissDelay = 0.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of this Panel (defaults to
false). For custom drag/drop implementations, an
Ext.Panel.DD config could also be passed in this config
instead of true. Ext.Panel.DD is an internal,
undocumented class which moves a proxy Element around
in place of the Panel's element, but provides no other
behaviour during dragging or on drop. It is a subclass
of Ext.dd.DragSource, so behaviour may be added by
implementing the interface methods of Ext.dd.DragDrop
eg: new Ext.Panel({    title: 'Drag me',    x: 100,
y: 100,    renderTo: Ext.getBody(),    floating: true,
frame: true,    width: 400,    height: 200,
draggable: {//      Config option of Ext.Panel.DD
class.//      It's a floating Panel, so do not show a
placeholder proxy in the original position.
insertProxy: false,//      Called for each mousemove
event while dragging the DD object.        onDrag :
function(e){//          Record the x,y position of the
drag proxy so that we can//          position the Panel
at end of drag.            var pel =
this.proxy.getEl();            this.x =
pel.getLeft(true);            this.y =
pel.getTop(true);//          Keep the Shadow aligned if
there is one.            var s =
this.panel.getEl().shadow;            if (s) {
s.realign(this.x, this.y, pel.getWidth(),
pel.getHeight());            }        },//      Called
on the mouseup event.        endDrag : function(e){
this.panel.setPosition(this.x, this.y);        }
}}).show();
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="elements" type="String" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="elementsJS" type="JS" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="floating" type="Boolean" required="false">
					<help><![CDATA[ True to float the panel (absolute position it with
automatic shimming and shadow), false to display it
inline where it is rendered (defaults to false). Note
that by default, setting floating to true will cause
the panel to display at negative offsets so that it is
hidden -- because the panel is absolute positioned, the
position must be set explicitly after render (e.g.,
myPanel.setPosition(100,100);). Also, when floating a
panel you should always assign a fixed width, otherwise
it will be auto width and will expand to fill to the
right edge of the viewport.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="footer" type="Boolean" required="false">
					<help><![CDATA[ True to create the footer element explicitly, false to
skip creating it. By default, when footer is not
specified, if one or more buttons have been added to
the panel the footer will be created automatically,
otherwise it will not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="frame" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel with custom rounded borders,
false to render with plain 1px square borders (defaults
to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="Boolean" required="false">
					<help><![CDATA[ True to create the header element explicitly, false to
skip creating it. By default, when header is not
specified, if a title is set the header will be created
automatically, otherwise it will not. If a title is set
but header is explicitly set to false, the header will
not be rendered.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="headerAsText" type="Boolean" required="false">
					<help><![CDATA[ True to display the panel title in the header, false to
hide it (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideCollapseTool" type="Boolean" required="false">
					<help><![CDATA[ True to hide the expand/collapse toggle button when
collapsible = true, false to display it (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideDelay" type="Number" required="false">
					<help><![CDATA[ Delay in milliseconds after the mouse exits the target
element but before the tooltip actually hides (defaults
to 200). Set to 0 for the tooltip to hide immediately.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="html" type="String" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="htmlJS" type="String/Object" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="interceptTitles" type="Boolean" required="false">
					<help><![CDATA[ True to automatically use the element's DOM title value
if available (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layout" type="String" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutJS" type="JS" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="maxWidth" type="Number" required="false">
					<help><![CDATA[ The maximum width of the tip in pixels (defaults to
300). The maximum supported value is 500.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width in pixels of all buttons in this panel
(defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width of the tip in pixels (defaults to
40).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events to
handle anything that is sensitive to the current size
of the viewport. This value is typically managed by the
chosen layout and should not need to be set manually.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="mouseOffset" type="Array" required="false">
					<help><![CDATA[ An XY offset from the mouse position where the tooltip
should be shown (defaults to [15,18]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadowOffset" type="Number" required="false">
					<help><![CDATA[ The number of pixels to offset the shadow if displayed
(defaults to 4). Note that this option only applies
when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shim" type="Boolean" required="false">
					<help><![CDATA[ False to disable the iframe shim in browsers which need
one (defaults to true). Note that this option only
applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="showDelay" type="Number" required="false">
					<help><![CDATA[ Delay in milliseconds before the tooltip displays after
the mouse enters the target element (defaults to 500)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="target" type="String" required="false">
					<help><![CDATA[ The target HTMLElement, Ext.Element or id to associate
with this quicktip (defaults to the document).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="targetJS" type="Mixed" required="false">
					<help><![CDATA[ The target HTMLElement, Ext.Element or id to associate
with this quicktip (defaults to the document).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tbar" type="Object/Array" required="false">
					<help><![CDATA[ The top toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
top toolbar after render, use getTopToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to allow expanding and collapsing the panel (when
collapsible = true) by clicking anywhere in the header
bar, false to allow it only by clicking to tool button
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tools" type="Array" required="false">
					<help><![CDATA[ An array of tool button configs to be added to the
header tool area. When rendered, each tool is stored as
an Element referenced by a public property called
tools. Each tool config may contain the following
properties:  id : StringRequired. The type of tool to
create. Values may be toggle (Created by default when
collapsible is true) close minimize maximize restore
gear pin unpin right left up down refresh minus plus
help search save print  handler : FunctionRequired. The
function to call when clicked. Arguments passed are:
event : Ext.EventObjectThe click event. toolEl :
Ext.ElementThe tool Element. Panel : Ext.PanelThe host
Panel  scope : ObjectThe scope in which to call the
handler. qtip : String/ObjectA tip string, or a config
argument to Ext.QuickTip.register hidden : BooleanTrue
to initially render hidden. on : ObjectA listener
config object specifiying event listeners in the format
of an argument to addListener  Example usage: tools:[{
id:'refresh',    qtip: 'Refresh form Data',    //
hidden:true,    handler: function(event, toolEl,
panel){        // refresh logic    }}] Note that apart
from the toggle tool which is provided when a panel is
collapsible, these tools only provide the visual
button. Any required functionality must be provided by
adding handlers that implement the necessary behavior.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="trackMouse" type="Boolean" required="false">
					<help><![CDATA[ True to have the tooltip follow the mouse as it moves
over the target element (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:radio" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="radio#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="label" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#SeparateCaps(attributes.name)#"></values>
				</parameter>
				<parameter name="fieldLabel" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#attributes.label#"></values>
				</parameter>
				<parameter name="inputValue" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#attributes.value#"></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreate" type="String" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreateJS" type="String/Object" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="boxLabel" type="String" required="false">
					<help><![CDATA[ The text that appears beside the checkbox (defaults to
'')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="boxLabelJS" type="JS" required="false">
					<help><![CDATA[ The text that appears beside the checkbox (defaults to
'')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="checked" type="Boolean" required="false">
					<help><![CDATA[ True if the checkbox should render already checked
(defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="checkedCls" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the control is checked
(defaults to 'x-form-check-checked'). Note that this
class applies to both checkboxes and radio buttons and
is added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="checkedClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the control is checked
(defaults to 'x-form-check-checked'). Note that this
class applies to both checkboxes and radio buttons and
is added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClass" type="String" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusCls" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the control receives input
focus (defaults to 'x-form-check-focus'). Note that
this class applies to both checkboxes and radio buttons
and is added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the control receives input
focus (defaults to 'x-form-check-focus'). Note that
this class applies to both checkboxes and radio buttons
and is added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="handler" type="Function" required="false">
					<help><![CDATA[ A function called when the checked value changes (can
be used instead of handling the check event). The
handler is passed the following parameters:  checkbox :
Ext.form.CheckboxThe Checkbox being toggled. checked :
BooleanThe new checked state of the checkbox.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputType" type="String" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputTypeJS" type="JS" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputValue" type="String" required="false">
					<help><![CDATA[ The value that should go into the generated input
element's value attribute (defaults to undefined, with
no value attribute)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputValueJS" type="JS" required="false">
					<help><![CDATA[ The value that should go into the generated input
element's value attribute (defaults to undefined, with
no value attribute)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidText" type="String" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="mouseDownCls" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the control is being actively
clicked (defaults to 'x-form-check-down'). Note that
this class applies to both checkboxes and radio buttons
and is added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="mouseDownClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the control is being actively
clicked (defaults to 'x-form-check-down'). Note that
this class applies to both checkboxes and radio buttons
and is added to the control's wrapper element.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFx" type="String" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFxJS" type="JS" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTarget" type="String" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTargetJS" type="JS" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="readOnly" type="Boolean" required="false">
					<help><![CDATA[ True to mark the field as readOnly in HTML (defaults to
false) -- Note: this only sets the element's readOnly
DOM attribute.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="scope" type="Object" required="false">
					<help><![CDATA[ An object to use as the scope ("this" reference) of the
handler function (defaults to this Checkbox).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ The tabIndex for this field. Note this only applies to
fields that are rendered, not those which are built via
applyTo (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validateOnBlur" type="Boolean" required="false">
					<help><![CDATA[ Whether the field should validate when it loses focus
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validationDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds after user input
begins until validation is initiated (defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEvent" type="String" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEventJS" type="String/Boolean" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="Mixed" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClass" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:radiogroup" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="radioGroup#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="label" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#SeparateCaps(attributes.name)#"></values>
				</parameter>
				<parameter name="fieldLabel" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#attributes.label#"></values>
				</parameter>
				<parameter name="allowBlank" type="Boolean" required="false">
					<help><![CDATA[ True to allow every item in the group to be blank
(defaults to false). If allowBlank = false and no items
are selected at validation time, {@link @blankText}
will be used as the error text.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreate" type="String" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreateJS" type="String/Object" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="blankText" type="String" required="false">
					<help><![CDATA[ Error text to display if the allowBlank validation
fails (defaults to "You must select one item in this
group")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="blankTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the allowBlank validation
fails (defaults to "You must select one item in this
group")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="columns" type="String" required="false">
					<help><![CDATA[ Specifies the number of columns to use when displaying
grouped checkbox/radio controls using automatic layout.
This config can take several types of values: 'auto' :
The controls will be rendered one per column on one row
and the width of each column will be evenly distributed
based on the width of the overall field container. This
is the default. Number : If you specific a number
(e.g., 3) that number of columns will be created and
the contained controls will be automatically
distributed based on the value of vertical. Array :
ObjectYou can also specify an array of column widths,
mixing integer (fixed width) and float (percentage
width) values as needed (e.g., [100, .25, .75]). Any
integer values will be rendered first, then any float
values will be calculated as a percentage of the
remaining space. Float values do not have to add up to
1 (100%) although if you want the controls to take up
the entire field container you should do so.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="columnsJS" type="String/Number/Array" required="false">
					<help><![CDATA[ Specifies the number of columns to use when displaying
grouped checkbox/radio controls using automatic layout.
This config can take several types of values: 'auto' :
The controls will be rendered one per column on one row
and the width of each column will be evenly distributed
based on the width of the overall field container. This
is the default. Number : If you specific a number
(e.g., 3) that number of columns will be created and
the contained controls will be automatically
distributed based on the value of vertical. Array :
ObjectYou can also specify an array of column widths,
mixing integer (fixed width) and float (percentage
width) values as needed (e.g., [100, .25, .75]). Any
integer values will be rendered first, then any float
values will be calculated as a percentage of the
remaining space. Float values do not have to add up to
1 (100%) although if you want the controls to take up
the entire field container you should do so.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClass" type="String" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputType" type="String" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputTypeJS" type="JS" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidText" type="String" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="Array" required="false">
					<help><![CDATA[ An Array of Checkboxes or Checkbox config objects to
arrange in the group.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFx" type="String" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFxJS" type="JS" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTarget" type="String" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTargetJS" type="JS" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="readOnly" type="Boolean" required="false">
					<help><![CDATA[ True to mark the field as readOnly in HTML (defaults to
false) -- Note: this only sets the element's readOnly
DOM attribute.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ The tabIndex for this field. Note this only applies to
fields that are rendered, not those which are built via
applyTo (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validateOnBlur" type="Boolean" required="false">
					<help><![CDATA[ Whether the field should validate when it loses focus
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validationDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds after user input
begins until validation is initiated (defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEvent" type="String" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEventJS" type="String/Boolean" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="Mixed" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vertical" type="Boolean" required="false">
					<help><![CDATA[ True to distribute contained controls across columns,
completely filling each column top to bottom before
starting on the next column. The number of controls in
each column will be automatically calculated to keep
columns as even as possible. The default value is
false, so that controls will be added to columns one at
a time, completely filling each row left to right
before starting on the next row.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:rootnode" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowChildren" type="Boolean" required="false">
					<help><![CDATA[ False to not allow this node to have child nodes
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDrag" type="Boolean" required="false">
					<help><![CDATA[ False to make this node undraggable if draggable = true
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDrop" type="Boolean" required="false">
					<help><![CDATA[ False if this node cannot have child nodes dropped on
it (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="checked" type="Boolean" required="false">
					<help><![CDATA[ True to render a checked checkbox for this node, false
to render an unchecked checkbox (defaults to undefined
with no checkbox rendered)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ A css class to be added to the node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ A css class to be added to the node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ true to start the node disabled ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to make this node draggable (defaults to false) ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="dummy" type="String" required="false">
					<help><![CDATA[ This is a dummy attribute. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dummyJS" type="JS" required="false">
					<help><![CDATA[ This is a dummy attribute. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="expandable" type="Boolean" required="false">
					<help><![CDATA[ If set to true, the node will always show a plus/minus
icon, even when empty
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="expanded" type="Boolean" required="false">
					<help><![CDATA[ true to start the node expanded ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="href" type="String" required="false">
					<help><![CDATA[ URL of the link used for the node (defaults to #) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hrefJS" type="JS" required="false">
					<help><![CDATA[ URL of the link used for the node (defaults to #) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hrefTarget" type="String" required="false">
					<help><![CDATA[ target frame for the link ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hrefTargetJS" type="JS" required="false">
					<help><![CDATA[ target frame for the link ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="icon" type="String" required="false">
					<help><![CDATA[ The path to an icon for the node. The preferred way to
do this is to use the cls or iconCls attributes and add
the icon via a CSS background image.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconJS" type="JS" required="false">
					<help><![CDATA[ The path to an icon for the node. The preferred way to
do this is to use the cls or iconCls attributes and add
the icon via a CSS background image.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A css class to be added to the nodes icon element for
applying css background images
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A css class to be added to the nodes icon element for
applying css background images
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The id for this node. If one is not specified, one is
generated.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The id for this node. If one is not specified, one is
generated.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="isTarget" type="Boolean" required="false">
					<help><![CDATA[ False to not allow this node to act as a drop target
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="leaf" type="Boolean" required="false">
					<help><![CDATA[ true if this node is a leaf and does not have children ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="loader" type="TreeLoader" required="false">
					<help><![CDATA[ A TreeLoader to be used by this node (defaults to the
loader defined on the tree)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtip" type="String" required="false">
					<help><![CDATA[ An Ext QuickTip for the node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipJS" type="JS" required="false">
					<help><![CDATA[ An Ext QuickTip for the node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipCfg" type="String" required="false">
					<help><![CDATA[ An Ext QuickTip config for the node (used instead of
qtip)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipCfgJS" type="JS" required="false">
					<help><![CDATA[ An Ext QuickTip config for the node (used instead of
qtip)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="singleClickExpand" type="Boolean" required="false">
					<help><![CDATA[ True for single click expand on this node ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="text" type="String" required="false">
					<help><![CDATA[ The text for this node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textJS" type="JS" required="false">
					<help><![CDATA[ The text for this node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="uiProvider" type="Function" required="false">
					<help><![CDATA[ A UI class to use for this node (defaults to
Ext.tree.TreeNodeUI)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:script" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="collection" type="String" required="false">
					<help><![CDATA[ The data collection to use when assigning the data for
this tag to it's parent tag. Defaults to "items".
 ]]></help>
					<values default="items"></values>
				</parameter>
		</tag>
		<tag name="ext:separator" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
		</tag>
		<tag name="ext:simplestore" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="autoLoad" type="Boolean/Object" required="false">
					<help><![CDATA[ If passed, this store's load method is automatically
called after creation with the autoLoad object
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseParams" type="Object" required="false">
					<help><![CDATA[ An object containing properties which are to be sent as
parameters on any HTTP request
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="data" type="Array" required="false">
					<help><![CDATA[ The multi-dimensional array of data. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fields" type="Array" required="false">
					<help><![CDATA[ An array of field definition objects, or field name
string as specified to Ext.data.Record.create
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="Number" required="false">
					<help><![CDATA[ The array index of the record id. Leave blank to auto
generate ids.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="proxy" type="Ext.data.DataProxy" required="false">
					<help><![CDATA[ The Proxy object which provides access to a data
object.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pruneModifiedRecords" type="boolean" required="false">
					<help><![CDATA[ True to clear all modified record information each time
the store is loaded or when a record is removed.
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="reader" type="Ext.data.DataReader" required="false">
					<help><![CDATA[ The DataReader object which processes the data object
and returns an Array of Ext.data.Record objects which
are cached keyed by their id property.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="remoteSort" type="boolean" required="false">
					<help><![CDATA[ True if sorting is to be handled by requesting the
Proxy to provide a refreshed version of the data object
in sorted order, as opposed to sorting the Record cache
in place (defaults to false). If remote sorting is
specified, then clicking on a column header causes the
current page to be requested from the server with the
addition of the following two parameters:  sort :
StringThe name (as specified in the Record's Field
definition) of the field to sort on. dir : StringThe
direction of the sort, "ASC" or "DESC"
(case-sensitive).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="sortInfo" type="Object" required="false">
					<help><![CDATA[ A config object in the format: {field: "fieldName",
direction: "ASC|DESC"} to specify the sort order in the
request of a remote Store's load operation. Note that
for local sorting, the direction property is
case-sensitive.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="storeId" type="String" required="false">
					<help><![CDATA[ If passed, the id to use to register with the StoreMgr ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="storeIdJS" type="JS" required="false">
					<help><![CDATA[ If passed, the id to use to register with the StoreMgr ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="url" type="String" required="false">
					<help><![CDATA[ If passed, an HttpProxy is created for the passed URL ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="urlJS" type="JS" required="false">
					<help><![CDATA[ If passed, an HttpProxy is created for the passed URL ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:slider" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animate" type="Boolean" required="false">
					<help><![CDATA[ Turn on or off animation. Defaults to true ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clickToChange" type="Boolean" required="false">
					<help><![CDATA[ Determines whether or not clicking on the Slider axis
will change the slider. Defaults to true
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="increment" type="Number" required="false">
					<help><![CDATA[ How many units to change the slider when adjusting by
drag and drop. Use this option to enable 'snapping'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keyIncrement" type="Number" required="false">
					<help><![CDATA[ How many units to change the Slider when adjusting with
keyboard navigation. Defaults to 1. If the increment
config is larger, it will be used instead.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxValue" type="Number" required="false">
					<help><![CDATA[ The maximum value for the Slider. Defaults to 100. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minValue" type="Number" required="false">
					<help><![CDATA[ The minimum value for the Slider. Defaults to 0. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="value" type="Number" required="false">
					<help><![CDATA[ The value to initialize the slider with. Defaults to
minValue.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vertical" type="Boolean" required="false">
					<help><![CDATA[ Orient the Slider vertically rather than horizontally,
defaults to false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:space" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
		</tag>
		<tag name="ext:statusbar" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoClear" type="Number" required="false">
					<help><![CDATA[ The number of milliseconds to wait after setting the
status via setStatus before automatically clearing the
status text and icon (defaults to 5000). Note that this
only applies when passing the clear argument to
setStatus since that is the only way to defer clearing
the status. This can be overridden by specifying a
different wait value in setStatus. Calls to clearStatus
always clear the status bar immediately and ignore this
value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="busyIconCls" type="String" required="false">
					<help><![CDATA[ The default iconCls applied when calling showBusy
(defaults to 'x-status-busy'). It can be overridden at
any time by passing the iconCls argument into showBusy.
See the iconCls docs for additional details about
customizing the icon.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="busyIconClsJS" type="JS" required="false">
					<help><![CDATA[ The default iconCls applied when calling showBusy
(defaults to 'x-status-busy'). It can be overridden at
any time by passing the iconCls argument into showBusy.
See the iconCls docs for additional details about
customizing the icon.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="busyText" type="String" required="false">
					<help><![CDATA[ The default text applied when calling showBusy
(defaults to 'Loading...'). It can be overridden at any
time by passing the text argument into showBusy.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="busyTextJS" type="JS" required="false">
					<help><![CDATA[ The default text applied when calling showBusy
(defaults to 'Loading...'). It can be overridden at any
time by passing the text argument into showBusy.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ The base class applied to the containing element for
this component on render (defaults to 'x-statusbar')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ The base class applied to the containing element for
this component on render (defaults to 'x-statusbar')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultIconCls" type="String" required="false">
					<help><![CDATA[ The default iconCls value (see the iconCls docs for
additional details about customizing the icon). This
will be used anytime the status bar is cleared with the
useDefaults:true option (defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultIconClsJS" type="JS" required="false">
					<help><![CDATA[ The default iconCls value (see the iconCls docs for
additional details about customizing the icon). This
will be used anytime the status bar is cleared with the
useDefaults:true option (defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultText" type="String" required="false">
					<help><![CDATA[ The default text value. This will be used anytime the
status bar is cleared with the useDefaults:true option
(defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTextJS" type="JS" required="false">
					<help><![CDATA[ The default text value. This will be used anytime the
status bar is cleared with the useDefaults:true option
(defaults to '').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will be applied to the status element
and is expected to provide a background image that will
serve as the status bar icon (defaults to ''). The
class is applied directly to the div that also contains
the status text, so the rule should provide the
appropriate padding on the div to make room for the
image. Example usage:// Example CSS rule:.x-statusbar
.x-status-custom {    padding-left: 25px;
background: transparent url(images/custom-icon.gif)
no-repeat 3px 3px;}// Initializing the status bar:var
sb = new Ext.StatusBar({    defaultIconCls:
'x-status-custom'});// Setting it in
code:sb.setStatus({    text: 'New status',    iconCls:
'x-status-custom'});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will be applied to the status element
and is expected to provide a background image that will
serve as the status bar icon (defaults to ''). The
class is applied directly to the div that also contains
the status text, so the rule should provide the
appropriate padding on the div to make room for the
image. Example usage:// Example CSS rule:.x-statusbar
.x-status-custom {    padding-left: 25px;
background: transparent url(images/custom-icon.gif)
no-repeat 3px 3px;}// Initializing the status bar:var
sb = new Ext.StatusBar({    defaultIconCls:
'x-status-custom'});// Setting it in
code:sb.setStatus({    text: 'New status',    iconCls:
'x-status-custom'});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="statusAlign" type="String" required="false">
					<help><![CDATA[ The alignment of the status element within the overall
StatusBar layout. When the StatusBar is rendered, it
creates an internal div containing the status text and
icon. Any additional Toolbar items added in the
StatusBar's items config, or added via add or any of
the supported add* methods, will be rendered, in added
order, to the opposite side. The status element is
greedy, so it will automatically expand to take up all
sapce left over by any other items. Example usage: //
Create a left-aligned status bar containing a button,//
separator and text item that will be right-aligned
(default):new Ext.Panel({    title: 'StatusBar',    //
etc.    bbar: new Ext.StatusBar({        defaultText:
'Default status text',        id: 'status-id',
items: [{            text: 'A Button'        }, '-',
'Plain Text']    })});// By adding the statusAlign
config, this will create the// exact same toolbar,
except the status and toolbar item// layout will be
reversed from the previous example:new Ext.Panel({
title: 'StatusBar',    // etc.    bbar: new
Ext.StatusBar({        defaultText: 'Default status
text',        id: 'status-id',        statusAlign:
'right',        items: [{            text: 'A Button'
}, '-', 'Plain Text']    })});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="statusAlignJS" type="JS" required="false">
					<help><![CDATA[ The alignment of the status element within the overall
StatusBar layout. When the StatusBar is rendered, it
creates an internal div containing the status text and
icon. Any additional Toolbar items added in the
StatusBar's items config, or added via add or any of
the supported add* methods, will be rendered, in added
order, to the opposite side. The status element is
greedy, so it will automatically expand to take up all
sapce left over by any other items. Example usage: //
Create a left-aligned status bar containing a button,//
separator and text item that will be right-aligned
(default):new Ext.Panel({    title: 'StatusBar',    //
etc.    bbar: new Ext.StatusBar({        defaultText:
'Default status text',        id: 'status-id',
items: [{            text: 'A Button'        }, '-',
'Plain Text']    })});// By adding the statusAlign
config, this will create the// exact same toolbar,
except the status and toolbar item// layout will be
reversed from the previous example:new Ext.Panel({
title: 'StatusBar',    // etc.    bbar: new
Ext.StatusBar({        defaultText: 'Default status
text',        id: 'status-id',        statusAlign:
'right',        items: [{            text: 'A Button'
}, '-', 'Plain Text']    })});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="text" type="String" required="false">
					<help><![CDATA[ A string that will be rendered into the status element
as the status message (defaults to '');
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textJS" type="JS" required="false">
					<help><![CDATA[ A string that will be rendered into the status element
as the status message (defaults to '');
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="position" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="bottom"></values>
				</parameter>
		</tag>
		<tag name="ext:store" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="autoLoad" type="Boolean/Object" required="false">
					<help><![CDATA[ If passed, this store's load method is automatically
called after creation with the autoLoad object
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseParams" type="Object" required="false">
					<help><![CDATA[ An object containing properties which are to be sent as
parameters on any HTTP request
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="data" type="Array" required="false">
					<help><![CDATA[ Inline data to be loaded when the store is initialized.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="proxy" type="Ext.data.DataProxy" required="false">
					<help><![CDATA[ The Proxy object which provides access to a data
object.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pruneModifiedRecords" type="boolean" required="false">
					<help><![CDATA[ True to clear all modified record information each time
the store is loaded or when a record is removed.
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="reader" type="Ext.data.DataReader" required="false">
					<help><![CDATA[ The DataReader object which processes the data object
and returns an Array of Ext.data.Record objects which
are cached keyed by their id property.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="remoteSort" type="boolean" required="false">
					<help><![CDATA[ True if sorting is to be handled by requesting the
Proxy to provide a refreshed version of the data object
in sorted order, as opposed to sorting the Record cache
in place (defaults to false). If remote sorting is
specified, then clicking on a column header causes the
current page to be requested from the server with the
addition of the following two parameters:  sort :
StringThe name (as specified in the Record's Field
definition) of the field to sort on. dir : StringThe
direction of the sort, "ASC" or "DESC"
(case-sensitive).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="sortInfo" type="Object" required="false">
					<help><![CDATA[ A config object in the format: {field: "fieldName",
direction: "ASC|DESC"} to specify the sort order in the
request of a remote Store's load operation. Note that
for local sorting, the direction property is
case-sensitive.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="storeId" type="String" required="false">
					<help><![CDATA[ If passed, the id to use to register with the StoreMgr ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="storeIdJS" type="JS" required="false">
					<help><![CDATA[ If passed, the id to use to register with the StoreMgr ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="url" type="String" required="false">
					<help><![CDATA[ If passed, an HttpProxy is created for the passed URL ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="urlJS" type="JS" required="false">
					<help><![CDATA[ If passed, an HttpProxy is created for the passed URL ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:submenu" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="text" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:success" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
		</tag>
		<tag name="ext:tabpanel" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="activeTab" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="0"></values>
				</parameter>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeTab" type="String" required="false">
					<help><![CDATA[ A string id or the numeric index of the tab that should
be initially activated on render (defaults to none).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeTabJS" type="String/Number" required="false">
					<help><![CDATA[ A string id or the numeric index of the tab that should
be initially activated on render (defaults to none).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
true if the Ext.Fx class is available, otherwise
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animFloat" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel that will
close again once the user mouses out of that panel (or
clicks out if autoHide = false). Setting animFloat to
false will prevent the open and close of these floated
panels from being animated (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animScroll" type="Boolean" required="false">
					<help><![CDATA[ True to animate tab scrolling so that hidden tabs slide
smoothly into view (defaults to true). Only applies
when enableTabScroll = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHide" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel. If autoHide
is true, the panel will automatically hide after the
user mouses out of the panel. If autoHide is false, the
panel will continue to display until the user clicks
outside of the panel (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoLoad" type="String" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoLoadJS" type="Object/String/Function" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoScroll" type="Boolean" required="false">
					<help><![CDATA[ True to use overflow:'auto' on the panel's body element
and show scroll bars automatically when necessary,
false to clip any overflowing content (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoTabSelector" type="String" required="false">
					<help><![CDATA[ The CSS selector used to search for tabs in existing
markup when autoTabs = true (defaults to 'div.x-tab').
This can be any valid selector supported by
Ext.DomQuery.select. Note that the query will be
executed within the scope of this tab panel only (so
that multiple tab panels from markup can be supported
on a page).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoTabSelectorJS" type="JS" required="false">
					<help><![CDATA[ The CSS selector used to search for tabs in existing
markup when autoTabs = true (defaults to 'div.x-tab').
This can be any valid selector supported by
Ext.DomQuery.select. Note that the query will be
executed within the scope of this tab panel only (so
that multiple tab panels from markup can be supported
on a page).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoTabs" type="Boolean" required="false">
					<help><![CDATA[ True to query the DOM for any divs with a class of
'x-tab' to be automatically converted to tabs and added
to this panel (defaults to false). Note that the query
will be executed within the scope of the container
element only (so that multiple tab panels from markup
can be supported via this method). This method is only
possible when the markup is structured correctly as a
container with nested divs containing the class
'x-tab'. To create TabPanels without these limitations,
or to pull tab content from other elements on the page,
see the example at the top of the class for generating
tabs from markup. There are a couple of things to note
when using this method: When using the autoTabs config
(as opposed to passing individual tab configs in the
TabPanel's items collection), you must use applyTo to
correctly use the specified id as the tab container.
The autoTabs method replaces existing content with the
TabPanel components. Make sure that you set
deferredRender to false so that the content elements
for each tab will be rendered into the TabPanel
immediately upon page load, otherwise they will not be
transformed until each tab is activated and will be
visible outside the TabPanel. Example usage: var tabs =
new Ext.TabPanel({    applyTo: 'my-tabs',    activeTab:
0,    deferredRender: false,    autoTabs: true});//
This markup will be converted to a TabPanel from the
code above    A simple tab    Another one
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class applied to the panel (defaults to
'x-tab-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class applied to the panel (defaults to
'x-tab-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bbar" type="Object/Array" required="false">
					<help><![CDATA[ The bottom toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
bottom toolbar after render, use getBottomToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyBorder" type="Boolean" required="false">
					<help><![CDATA[ True to display an interior border on the body element
of the panel, false to hide it (defaults to true). This
only applies when border == true. If border == true and
bodyBorder == false, the border will display as a 1px
wide inset border, giving the entire body element an
inset appearance.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyle" type="String" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyleJS" type="String/Object/Function" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the panel's body
element, false to hide them (defaults to true). By
default, the border is a 2px wide inset border, but
this can be further altered by setting bodyBorder to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonAlign" type="String" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonAlignJS" type="JS" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttons" type="Array" required="false">
					<help><![CDATA[ An array of Ext.Buttons or Ext.Button configs used to
add buttons to the footer of this panel.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cmargins" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the collapsed state in the format:{    top:
(top margin),    right: (right margin),    bottom:
(bottom margin)    left: (left margin),} May also be a
string containing space-separated, numeric margin
values. The order of the sides associated with each
value matches the way CSS processes margin values.  If
there is only one value, it applies to all sides. If
there are two values, the top and bottom borders are
set to the first value and the right and left are set
to the second. If there are three values, the top is
set to the first value, the left and right are set to
the second, and the bottom is set to the third. If
there are four values, they apply to the top, right,
bottom, and left, respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseFirst" type="Boolean" required="false">
					<help><![CDATA[ True to make sure the collapse/expand toggle button
always renders first (to the left of) any other tools
in the panel's title bar, false to render it last
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapseMode" type="String" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseModeJS" type="JS" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ By default, collapsible regions will be visible when
rendered. Set the collapsed config to true to render
the region as collapsed.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to allow the user to collapse this region
(defaults to false). If true, an expand/collapse tool
button will automatically be rendered into the title
bar of the region, otherwise the button will not be
shown. Note that a title bar is required to display the
toggle button -- if no region title is specified, the
region will only be collapsible if collapseMode is set
to 'mini'.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsibleSplitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsibleSplitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentEl" type="String" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentElJS" type="JS" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="deferredRender" type="Boolean" required="false">
					<help><![CDATA[ Internally, the TabPanel uses a Ext.layout.CardLayout
to manage its tabs. This property will be passed on to
the layout as its Ext.layout.CardLayout.deferredRender
config value, determining whether or not each tab is
rendered only when first accessed (defaults to true).
Be aware that leaving deferredRender as true means
that, if the TabPanel is within a form, then until a
tab is activated, any Fields within that tab will not
be rendered, and will therefore not be submitted and
will not be available to either getValues or setValues.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of this Panel (defaults to
false). For custom drag/drop implementations, an
Ext.Panel.DD config could also be passed in this config
instead of true. Ext.Panel.DD is an internal,
undocumented class which moves a proxy Element around
in place of the Panel's element, but provides no other
behaviour during dragging or on drop. It is a subclass
of Ext.dd.DragSource, so behaviour may be added by
implementing the interface methods of Ext.dd.DragDrop
eg: new Ext.Panel({    title: 'Drag me',    x: 100,
y: 100,    renderTo: Ext.getBody(),    floating: true,
frame: true,    width: 400,    height: 200,
draggable: {//      Config option of Ext.Panel.DD
class.//      It's a floating Panel, so do not show a
placeholder proxy in the original position.
insertProxy: false,//      Called for each mousemove
event while dragging the DD object.        onDrag :
function(e){//          Record the x,y position of the
drag proxy so that we can//          position the Panel
at end of drag.            var pel =
this.proxy.getEl();            this.x =
pel.getLeft(true);            this.y =
pel.getTop(true);//          Keep the Shadow aligned if
there is one.            var s =
this.panel.getEl().shadow;            if (s) {
s.realign(this.x, this.y, pel.getWidth(),
pel.getHeight());            }        },//      Called
on the mouseup event.        endDrag : function(e){
this.panel.setPosition(this.x, this.y);        }
}}).show();
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="elements" type="String" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="elementsJS" type="JS" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="enableTabScroll" type="Boolean" required="false">
					<help><![CDATA[ True to enable scrolling to tabs that may be invisible
due to overflowing the overall TabPanel width. Only
available with tabPosition:'top' (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="extraCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="floatable" type="Boolean" required="false">
					<help><![CDATA[ True to allow clicking a collapsed region's bar to
display the region's panel floated above the layout,
false to force the user to fully expand a collapsed
region by clicking the expand button to see it again
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="floating" type="Boolean" required="false">
					<help><![CDATA[ True to float the panel (absolute position it with
automatic shimming and shadow), false to display it
inline where it is rendered (defaults to false). Note
that by default, setting floating to true will cause
the panel to display at negative offsets so that it is
hidden -- because the panel is absolute positioned, the
position must be set explicitly after render (e.g.,
myPanel.setPosition(100,100);). Also, when floating a
panel you should always assign a fixed width, otherwise
it will be auto width and will expand to fill to the
right edge of the viewport.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="footer" type="Boolean" required="false">
					<help><![CDATA[ True to create the footer element explicitly, false to
skip creating it. By default, when footer is not
specified, if one or more buttons have been added to
the panel the footer will be created automatically,
otherwise it will not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="frame" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel with custom rounded borders,
false to render with plain 1px square borders (defaults
to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="html" type="String" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="htmlJS" type="String/Object" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutOnTabChange" type="Boolean" required="false">
					<help><![CDATA[ Set to true to do a layout of tab items as tabs are
changed.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="margins" type="String" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="marginsJS" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width in pixels of all buttons in this panel
(defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum allowable height in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minTabWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width in pixels for each tab when
resizeTabs = true (defaults to 30).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum allowable width in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events and
rerender the layout on browser resize (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plain" type="Boolean" required="false">
					<help><![CDATA[ True to render the tab strip without a background
container image (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderHidden" type="Boolean" required="false">
					<help><![CDATA[ True to hide each contained item on render (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="resizeTabs" type="Boolean" required="false">
					<help><![CDATA[ True to automatically resize each tab so that the tabs
will completely fill the tab strip (defaults to false).
Setting this to true may cause specific widths that
might be set per tab to be overridden in order to fit
them all into view (although minTabWidth will always be
honored).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="scrollDuration" type="Float" required="false">
					<help><![CDATA[ The number of milliseconds that each scroll animation
should last (defaults to .35). Only applies when
animScroll = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="scrollIncrement" type="Number" required="false">
					<help><![CDATA[ The number of pixels to scroll each time a tab scroll
button is pressed (defaults to 100, or if resizeTabs =
true, the calculated tab width). Only applies when
enableTabScroll = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="scrollRepeatInterval" type="Number" required="false">
					<help><![CDATA[ Number of milliseconds between each scroll while a tab
scroll button is continuously pressed (defaults to
400).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadowOffset" type="Number" required="false">
					<help><![CDATA[ The number of pixels to offset the shadow if displayed
(defaults to 4). Note that this option only applies
when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shim" type="Boolean" required="false">
					<help><![CDATA[ False to disable the iframe shim in browsers which need
one (defaults to true). Note that this option only
applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="split" type="Boolean" required="false">
					<help><![CDATA[ True to display a Ext.SplitBar between this region and
its neighbor, allowing the user to resize the regions
dynamically (defaults to false). When split == true, it
is common to specify a minSize and maxSize for the
BoxComponent representing the region. These are not
native configs of BoxComponent, and are used only by
this class.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="splitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="splitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabCls" type="String" required="false">
					<help><![CDATA[ This config option is used on child Components of ths
TabPanel. A CSS class name applied to the tab strip
item representing the child Component, allowing special
styling to be applied.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabClsJS" type="JS" required="false">
					<help><![CDATA[ This config option is used on child Components of ths
TabPanel. A CSS class name applied to the tab strip
item representing the child Component, allowing special
styling to be applied.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabMargin" type="Number" required="false">
					<help><![CDATA[ The number of pixels of space to calculate into the
sizing and scrolling of tabs. If you change the margin
in CSS, you will need to update this value so
calculations are correct with either resizeTabs or
scrolling tabs. (defaults to 2)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabPosition" type="String" required="false">
					<help><![CDATA[ The position where the tab strip should be rendered
(defaults to 'top'). The only other supported value is
'bottom'. Note that tab scrolling is only supported for
position 'top'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabPositionJS" type="JS" required="false">
					<help><![CDATA[ The position where the tab strip should be rendered
(defaults to 'top'). The only other supported value is
'bottom'. Note that tab scrolling is only supported for
position 'top'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabWidth" type="Number" required="false">
					<help><![CDATA[ The initial width in pixels of each new tab (defaults
to 120).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tbar" type="Object/Array" required="false">
					<help><![CDATA[ The top toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
top toolbar after render, use getTopToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="useSplitTips" type="Boolean" required="false">
					<help><![CDATA[ True to display a tooltip when the user hovers over a
region's split bar (defaults to false). The tooltip
text will be the value of either splitTip or
collapsibleSplitTip as appropriate.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="wheelIncrement" type="Number" required="false">
					<help><![CDATA[ For scrolling tabs, the number of pixels to increment
on mouse wheel scrolling (defaults to 20).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="region" type="String" required="false">
					<help><![CDATA[ The position within the viewport to attach this
component to. The 'center' region is always required
when using a viewport.
 ]]></help>
					<values default=""><value option="center" /><value option="east" /><value option="north" /><value option="south" /><value option="west" /></values>
				</parameter>
		</tag>
		<tag name="ext:textarea" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="textArea#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="label" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#SeparateCaps(attributes.name)#"></values>
				</parameter>
				<parameter name="fieldLabel" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#attributes.label#"></values>
				</parameter>
				<parameter name="width" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#Application.ColdExt.defaultFieldWidth#"></values>
				</parameter>
				<parameter name="allowBlank" type="Boolean" required="false">
					<help><![CDATA[ False to validate that the value length > 0 (defaults
to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreate" type="String" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "textarea", style:
"width:100px;height:60px;", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreateJS" type="String/Object" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "textarea", style:
"width:100px;height:60px;", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="blankText" type="String" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="blankTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disableKeyFilter" type="Boolean" required="false">
					<help><![CDATA[ True to disable input keystroke filtering (defaults to
false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClass" type="String" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyText" type="String" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyTextJS" type="JS" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClass" type="String" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="grow" type="Boolean" required="false">
					<help><![CDATA[ True if this field should automatically grow and shrink
to its content
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="growMax" type="Number" required="false">
					<help><![CDATA[ The maximum height to allow when grow = true (defaults
to 1000)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="growMin" type="Number" required="false">
					<help><![CDATA[ The minimum height to allow when grow = true (defaults
to 60)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputType" type="String" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputTypeJS" type="JS" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidText" type="String" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskRe" type="RegExp" required="false">
					<help><![CDATA[ An input mask regular expression that will be used to
filter keystrokes that don't match (defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLength" type="Number" required="false">
					<help><![CDATA[ Maximum input field length allowed (defaults to
Number.MAX_VALUE)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLength" type="Number" required="false">
					<help><![CDATA[ Minimum input field length required (defaults to 0) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFx" type="String" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFxJS" type="JS" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTarget" type="String" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTargetJS" type="JS" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="preventScrollbars" type="Boolean" required="false">
					<help><![CDATA[ True to prevent scrollbars from appearing regardless of
how much text is in the field (equivalent to setting
overflow: hidden, defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="readOnly" type="Boolean" required="false">
					<help><![CDATA[ True to mark the field as readOnly in HTML (defaults to
false) -- Note: this only sets the element's readOnly
DOM attribute.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="regex" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object to be tested against the
field value during validation (defaults to null). If
available, this regex will be evaluated only after the
basic validators all return true, and will be passed
the current field value. If the test fails, the field
will be marked invalid using regexText.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexText" type="String" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selectOnFocus" type="Boolean" required="false">
					<help><![CDATA[ True to automatically select any existing field text
when the field receives input focus (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stripCharsRe" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object used to strip unwanted
content from the value before validation (defaults to
null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ The tabIndex for this field. Note this only applies to
fields that are rendered, not those which are built via
applyTo (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validateOnBlur" type="Boolean" required="false">
					<help><![CDATA[ Whether the field should validate when it loses focus
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validationDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds after user input
begins until validation is initiated (defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEvent" type="String" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEventJS" type="String/Boolean" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validator" type="Function" required="false">
					<help><![CDATA[ A custom validation function to be called during field
validation (defaults to null). If specified, this
function will be called only after the built-in
validations (allowBlank, minLength, maxLength) and any
configured vtype all return true. This function will be
passed the current field value and expected to return
boolean true if the value is valid or a string error
message if invalid.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="Mixed" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtype" type="String" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeJS" type="JS" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeText" type="String" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeTextJS" type="JS" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="anchor" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:textfield" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="textField#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="label" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#SeparateCaps(attributes.name)#"></values>
				</parameter>
				<parameter name="fieldLabel" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#attributes.label#"></values>
				</parameter>
				<parameter name="width" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#Application.ColdExt.defaultFieldWidth#"></values>
				</parameter>
				<parameter name="allowBlank" type="Boolean" required="false">
					<help><![CDATA[ False to validate that the value length > 0 (defaults
to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreate" type="String" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreateJS" type="String/Object" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="blankText" type="String" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="blankTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disableKeyFilter" type="Boolean" required="false">
					<help><![CDATA[ True to disable input keystroke filtering (defaults to
false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClass" type="String" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyText" type="String" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyTextJS" type="JS" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClass" type="String" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="grow" type="Boolean" required="false">
					<help><![CDATA[ True if this field should automatically grow and shrink
to its content
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="growMax" type="Number" required="false">
					<help><![CDATA[ The maximum width to allow when grow = true (defaults
to 800)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="growMin" type="Number" required="false">
					<help><![CDATA[ The minimum width to allow when grow = true (defaults
to 30)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputType" type="String" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputTypeJS" type="JS" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidText" type="String" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskRe" type="RegExp" required="false">
					<help><![CDATA[ An input mask regular expression that will be used to
filter keystrokes that don't match (defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLength" type="Number" required="false">
					<help><![CDATA[ Maximum input field length allowed (defaults to
Number.MAX_VALUE)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLength" type="Number" required="false">
					<help><![CDATA[ Minimum input field length required (defaults to 0) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFx" type="String" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFxJS" type="JS" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTarget" type="String" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTargetJS" type="JS" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="readOnly" type="Boolean" required="false">
					<help><![CDATA[ True to mark the field as readOnly in HTML (defaults to
false) -- Note: this only sets the element's readOnly
DOM attribute.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="regex" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object to be tested against the
field value during validation (defaults to null). If
available, this regex will be evaluated only after the
basic validators all return true, and will be passed
the current field value. If the test fails, the field
will be marked invalid using regexText.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexText" type="String" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selectOnFocus" type="Boolean" required="false">
					<help><![CDATA[ True to automatically select any existing field text
when the field receives input focus (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stripCharsRe" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object used to strip unwanted
content from the value before validation (defaults to
null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ The tabIndex for this field. Note this only applies to
fields that are rendered, not those which are built via
applyTo (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validateOnBlur" type="Boolean" required="false">
					<help><![CDATA[ Whether the field should validate when it loses focus
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validationDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds after user input
begins until validation is initiated (defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEvent" type="String" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEventJS" type="String/Boolean" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validator" type="Function" required="false">
					<help><![CDATA[ A custom validation function to be called during field
validation (defaults to null). If specified, this
function will be called only after the built-in
validations (allowBlank, minLength, maxLength) and any
configured vtype all return true. This function will be
passed the current field value and expected to return
boolean true if the value is valid or a string error
message if invalid.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="Mixed" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtype" type="String" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeJS" type="JS" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeText" type="String" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeTextJS" type="JS" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="anchor" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="required" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:textitem" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="activeClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the item becomes activated
(defaults to "x-menu-item-active")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the item becomes activated
(defaults to "x-menu-item-active")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="canActivate" type="Boolean" required="false">
					<help><![CDATA[ True if this item can be visually activated (defaults
to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="handler" type="Function" required="false">
					<help><![CDATA[ A function that will handle the click event of this
menu item (defaults to undefined)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideDelay" type="Number" required="false">
					<help><![CDATA[ Length of time in milliseconds to wait before hiding
after a click (defaults to 100)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideOnClick" type="Boolean" required="false">
					<help><![CDATA[ True to hide the containing menu after this item is
clicked (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ The default CSS class to use for text items (defaults
to "x-menu-text")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class to use for text items (defaults
to "x-menu-text")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="scope" type="Object" required="false">
					<help><![CDATA[ The scope in which the handler function will be called.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="text" type="String" required="false">
					<help><![CDATA[ The text to display for this item (defaults to '') ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textJS" type="JS" required="false">
					<help><![CDATA[ The text to display for this item (defaults to '') ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:timefield" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="timeField#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="label" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#SeparateCaps(attributes.name)#"></values>
				</parameter>
				<parameter name="fieldLabel" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#attributes.label#"></values>
				</parameter>
				<parameter name="width" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#Application.ColdExt.defaultFieldWidth#"></values>
				</parameter>
				<parameter name="allQuery" type="String" required="false">
					<help><![CDATA[ The text query to send to the server to return all
records for the list with no filtering (defaults to '')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allQueryJS" type="JS" required="false">
					<help><![CDATA[ The text query to send to the server to return all
records for the list with no filtering (defaults to '')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowBlank" type="Boolean" required="false">
					<help><![CDATA[ False to validate that the value length > 0 (defaults
to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="altFormats" type="String" required="false">
					<help><![CDATA[ Multiple date formats separated by "|" to try when
parsing a user input value and it doesn't match the
defined format (defaults to 'g:ia|g:iA|g:i a|g:i
A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="altFormatsJS" type="JS" required="false">
					<help><![CDATA[ Multiple date formats separated by "|" to try when
parsing a user input value and it doesn't match the
defined format (defaults to 'g:ia|g:iA|g:i a|g:i
A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreate" type="String" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreateJS" type="String/Object" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="blankText" type="String" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="blankTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disableKeyFilter" type="Boolean" required="false">
					<help><![CDATA[ True to disable input keystroke filtering (defaults to
false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="displayField" type="String" required="false">
					<help><![CDATA[ The underlying data field name to bind to this ComboBox
(defaults to undefined if mode = 'remote' or 'text' if
transforming a select)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="displayFieldJS" type="JS" required="false">
					<help><![CDATA[ The underlying data field name to bind to this ComboBox
(defaults to undefined if mode = 'remote' or 'text' if
transforming a select)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="editable" type="Boolean" required="false">
					<help><![CDATA[ False to prevent the user from typing text directly
into the field, just like a traditional select
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="emptyClass" type="String" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyText" type="String" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyTextJS" type="JS" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClass" type="String" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="forceSelection" type="Boolean" required="false">
					<help><![CDATA[ True to restrict the selected value to one of the
values in the list, false to allow the user to set
arbitrary text into the field (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="format" type="String" required="false">
					<help><![CDATA[ The default time format string which can be overriden
for localization support. The format must be valid
according to Date.parseDate (defaults to 'g:i A', e.g.,
'3:15 PM'). For 24-hour time format try 'H:i' instead.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="formatJS" type="JS" required="false">
					<help><![CDATA[ The default time format string which can be overriden
for localization support. The format must be valid
according to Date.parseDate (defaults to 'g:i A', e.g.,
'3:15 PM'). For 24-hour time format try 'H:i' instead.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="handleHeight" type="Number" required="false">
					<help><![CDATA[ The height in pixels of the dropdown list resize handle
if resizable = true (defaults to 8)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hiddenId" type="String" required="false">
					<help><![CDATA[ If hiddenName is specified, hiddenId can also be
provided to give the hidden field a unique id (defaults
to the hiddenName). The hiddenId and combo id should be
different, since no two DOM nodes should share the same
id.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hiddenIdJS" type="JS" required="false">
					<help><![CDATA[ If hiddenName is specified, hiddenId can also be
provided to give the hidden field a unique id (defaults
to the hiddenName). The hiddenId and combo id should be
different, since no two DOM nodes should share the same
id.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hiddenName" type="String" required="false">
					<help><![CDATA[ If specified, a hidden form field with this name is
dynamically generated to store the field's data value
(defaults to the underlying DOM element's name).
Required for the combo's value to automatically post
during a form submission. Note that the hidden field's
id will also default to this name if hiddenId is not
specified. The combo's id and the hidden field's ids
should be different, since no two DOM nodes should
share the same id, so if the combo and hidden names are
the same, you should specify a unique hiddenId.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hiddenNameJS" type="JS" required="false">
					<help><![CDATA[ If specified, a hidden form field with this name is
dynamically generated to store the field's data value
(defaults to the underlying DOM element's name).
Required for the combo's value to automatically post
during a form submission. Note that the hidden field's
id will also default to this name if hiddenId is not
specified. The combo's id and the hidden field's ids
should be different, since no two DOM nodes should
share the same id, so if the combo and hidden names are
the same, you should specify a unique hiddenId.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideTrigger" type="Boolean" required="false">
					<help><![CDATA[ True to hide the trigger element and display only the
base text field (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="increment" type="Number" required="false">
					<help><![CDATA[ The number of minutes between each time value in the
list (defaults to 15).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputType" type="String" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputTypeJS" type="JS" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidText" type="String" required="false">
					<help><![CDATA[ The error text to display when the time in the field is
invalid (defaults to '{value} is not a valid time').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display when the time in the field is
invalid (defaults to '{value} is not a valid time').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemSelector" type="String" required="false">
					<help><![CDATA[ This setting is required if a custom XTemplate has been
specified in tpl which assigns a class other than
'x-combo-list-item' to dropdown list items. A simple
CSS selector (e.g. div.some-class or span:first-child)
that will be used to determine what nodes the DataView
which handles the dropdown display will be working
with.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemSelectorJS" type="JS" required="false">
					<help><![CDATA[ This setting is required if a custom XTemplate has been
specified in tpl which assigns a class other than
'x-combo-list-item' to dropdown list items. A simple
CSS selector (e.g. div.some-class or span:first-child)
that will be used to determine what nodes the DataView
which handles the dropdown display will be working
with.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="lazyInit" type="Boolean" required="false">
					<help><![CDATA[ True to not initialize the list for this combo until
the field is focused (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="lazyRender" type="Boolean" required="false">
					<help><![CDATA[ True to prevent the ComboBox from rendering until
requested (should always be used when rendering into an
Ext.Editor, defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="listAlign" type="String" required="false">
					<help><![CDATA[ A valid anchor position value. See Ext.Element.alignTo
for details on supported anchor positions (defaults to
'tl-bl')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listAlignJS" type="JS" required="false">
					<help><![CDATA[ A valid anchor position value. See Ext.Element.alignTo
for details on supported anchor positions (defaults to
'tl-bl')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listClass" type="String" required="false">
					<help><![CDATA[ CSS class to apply to the dropdown list element
(defaults to '')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class to apply to the dropdown list element
(defaults to '')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listWidth" type="Number" required="false">
					<help><![CDATA[ The width in pixels of the dropdown list (defaults to
the width of the ComboBox field)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="loadingText" type="String" required="false">
					<help><![CDATA[ The text to display in the dropdown list while data is
loading. Only applies when mode = 'remote' (defaults to
'Loading...')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="loadingTextJS" type="JS" required="false">
					<help><![CDATA[ The text to display in the dropdown list while data is
loading. Only applies when mode = 'remote' (defaults to
'Loading...')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskRe" type="RegExp" required="false">
					<help><![CDATA[ An input mask regular expression that will be used to
filter keystrokes that don't match (defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxHeight" type="Number" required="false">
					<help><![CDATA[ The maximum height in pixels of the dropdown list
before scrollbars are shown (defaults to 300)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLength" type="Number" required="false">
					<help><![CDATA[ Maximum input field length allowed (defaults to
Number.MAX_VALUE)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxText" type="String" required="false">
					<help><![CDATA[ The error text to display when the time is after
maxValue (defaults to 'The time in this field must be
equal to or before {0}').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display when the time is after
maxValue (defaults to 'The time in this field must be
equal to or before {0}').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxValue" type="String" required="false">
					<help><![CDATA[ The maximum allowed time. Can be either a Javascript
date object with a valid time value or a string time in
a valid format -- see format and altFormats (defaults
to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxValueJS" type="Date/String" required="false">
					<help><![CDATA[ The maximum allowed time. Can be either a Javascript
date object with a valid time value or a string time in
a valid format -- see format and altFormats (defaults
to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minChars" type="Number" required="false">
					<help><![CDATA[ The minimum number of characters the user must type
before autocomplete and typeahead activate (defaults to
4 if remote or 0 if local, does not apply if editable =
false)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum height in pixels of the dropdown list when
the list is constrained by its distance to the viewport
edges (defaults to 90)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLength" type="Number" required="false">
					<help><![CDATA[ Minimum input field length required (defaults to 0) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minListWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width of the dropdown list in pixels
(defaults to 70, will be ignored if listWidth has a
higher value)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minText" type="String" required="false">
					<help><![CDATA[ The error text to display when the date in the cell is
before minValue (defaults to 'The time in this field
must be equal to or after {0}').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display when the date in the cell is
before minValue (defaults to 'The time in this field
must be equal to or after {0}').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minValue" type="String" required="false">
					<help><![CDATA[ The minimum allowed time. Can be either a Javascript
date object with a valid time value or a string time in
a valid format -- see format and altFormats (defaults
to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minValueJS" type="Date/String" required="false">
					<help><![CDATA[ The minimum allowed time. Can be either a Javascript
date object with a valid time value or a string time in
a valid format -- see format and altFormats (defaults
to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="mode" type="String" required="false">
					<help><![CDATA[ Set to 'local' if the ComboBox loads local data
(defaults to 'remote' which loads from the server)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="modeJS" type="JS" required="false">
					<help><![CDATA[ Set to 'local' if the ComboBox loads local data
(defaults to 'remote' which loads from the server)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFx" type="String" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFxJS" type="JS" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTarget" type="String" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTargetJS" type="JS" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageSize" type="Number" required="false">
					<help><![CDATA[ If greater than 0, a paging toolbar is displayed in the
footer of the dropdown list and the filter queries will
execute with page start and limit parameters. Only
applies when mode = 'remote' (defaults to 0)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="queryDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds to delay between the
start of typing and sending the query to filter the
dropdown list (defaults to 500 if mode = 'remote' or 10
if mode = 'local')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="queryParam" type="String" required="false">
					<help><![CDATA[ Name of the query as it will be passed on the
querystring (defaults to 'query')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="queryParamJS" type="JS" required="false">
					<help><![CDATA[ Name of the query as it will be passed on the
querystring (defaults to 'query')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="readOnly" type="Boolean" required="false">
					<help><![CDATA[ True to mark the field as readOnly in HTML (defaults to
false) -- Note: this only sets the element's readOnly
DOM attribute.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="regex" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object to be tested against the
field value during validation (defaults to null). If
available, this regex will be evaluated only after the
basic validators all return true, and will be passed
the current field value. If the test fails, the field
will be marked invalid using regexText.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexText" type="String" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="resizable" type="Boolean" required="false">
					<help><![CDATA[ True to add a resize handle to the bottom of the
dropdown list (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="selectOnFocus" type="Boolean" required="false">
					<help><![CDATA[ True to automatically select any existing field text
when the field receives input focus (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="selectedClass" type="String" required="false">
					<help><![CDATA[ CSS class to apply to the selected item in the dropdown
list (defaults to 'x-combo-selected')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selectedClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class to apply to the selected item in the dropdown
list (defaults to 'x-combo-selected')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True or "sides" for the default effect, "frame" for
4-way shadow, and "drop" for bottom-right
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True or "sides" for the default effect, "frame" for
4-way shadow, and "drop" for bottom-right
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="store" type="Ext.data.Store/Array" required="false">
					<help><![CDATA[ The data source to which this combo is bound (defaults
to undefined). This can be any Ext.data.Store subclass,
a 1-dimensional array (e.g., ['Foo','Bar']) or a
2-dimensional array (e.g., [['f','Foo'],['b','Bar']]).
Arrays will be converted to a Ext.data.SimpleStore
internally. 1-dimensional arrays will automatically be
expanded (each array item will be the combo value and
text) and for multi-dimensional arrays, the value in
index 0 of each item will be assumed to be the combo
value, while the value at index 1 is assumed to be the
combo text.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stripCharsRe" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object used to strip unwanted
content from the value before validation (defaults to
null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ The tabIndex for this field. Note this only applies to
fields that are rendered, not those which are built via
applyTo (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ If supplied, a header element is created containing
this text and added into the top of the dropdown list
(defaults to undefined, with no header element)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ If supplied, a header element is created containing
this text and added into the top of the dropdown list
(defaults to undefined, with no header element)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tpl" type="String" required="false">
					<help><![CDATA[ The template string, or Ext.XTemplate instance to use
to display each item in the dropdown list. Use this to
create custom UI layouts for items in the list.  If you
wish to preserve the default visual look of list items,
add the CSS class name x-combo-list-item to the
template's container element.  The template must
contain one or more substitution parameters using field
names from the Combo's Store. An example of a custom
template would be adding an ext:qtip attribute which
might display other fields from the Store.  The
dropdown list is displayed in a DataView. See
Ext.DataView for details.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tplJS" type="String/Ext.XTemplate" required="false">
					<help><![CDATA[ The template string, or Ext.XTemplate instance to use
to display each item in the dropdown list. Use this to
create custom UI layouts for items in the list.  If you
wish to preserve the default visual look of list items,
add the CSS class name x-combo-list-item to the
template's container element.  The template must
contain one or more substitution parameters using field
names from the Combo's Store. An example of a custom
template would be adding an ext:qtip attribute which
might display other fields from the Store.  The
dropdown list is displayed in a DataView. See
Ext.DataView for details.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="transform" type="String" required="false">
					<help><![CDATA[ The id, DOM node or element of an existing HTML SELECT
to convert to a ComboBox. Note that if you specify this
and the combo is going to be in a Ext.form.BasicForm or
Ext.form.FormPanel, you must also set lazyRender =
true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="transformJS" type="Mixed" required="false">
					<help><![CDATA[ The id, DOM node or element of an existing HTML SELECT
to convert to a ComboBox. Note that if you specify this
and the combo is going to be in a Ext.form.BasicForm or
Ext.form.FormPanel, you must also set lazyRender =
true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="triggerAction" type="String" required="false">
					<help><![CDATA[ The action to execute when the trigger is clicked. Use
'all' to run the query specified by the allQuery config
option (defaults to 'query')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="triggerActionJS" type="JS" required="false">
					<help><![CDATA[ The action to execute when the trigger is clicked. Use
'all' to run the query specified by the allQuery config
option (defaults to 'query')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="triggerClass" type="String" required="false">
					<help><![CDATA[ A CSS class to apply to the trigger ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="triggerClassJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to apply to the trigger ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="typeAhead" type="Boolean" required="false">
					<help><![CDATA[ True to populate and autoselect the remainder of the
text being typed after a configurable delay
(typeAheadDelay) if it matches a known value (defaults
to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="typeAheadDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds to wait until the
typeahead text is displayed if typeAhead = true
(defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validateOnBlur" type="Boolean" required="false">
					<help><![CDATA[ Whether the field should validate when it loses focus
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validationDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds after user input
begins until validation is initiated (defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEvent" type="String" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEventJS" type="String/Boolean" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validator" type="Function" required="false">
					<help><![CDATA[ A custom validation function to be called during field
validation (defaults to null). If specified, this
function will be called only after the built-in
validations (allowBlank, minLength, maxLength) and any
configured vtype all return true. This function will be
passed the current field value and expected to return
boolean true if the value is valid or a string error
message if invalid.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="Mixed" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueField" type="String" required="false">
					<help><![CDATA[ The underlying data value name to bind to this ComboBox
(defaults to undefined if mode = 'remote' or 'value' if
transforming a select) Note: use of a valueField
requires the user to make a selection in order for a
value to be mapped.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueFieldJS" type="JS" required="false">
					<help><![CDATA[ The underlying data value name to bind to this ComboBox
(defaults to undefined if mode = 'remote' or 'value' if
transforming a select) Note: use of a valueField
requires the user to make a selection in order for a
value to be mapped.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueNotFoundText" type="String" required="false">
					<help><![CDATA[ When using a name/value combo, if the value passed to
setValue is not found in the store, valueNotFoundText
will be displayed as the field text if defined
(defaults to undefined). If this defaut text is used,
it means there is no value set and no validation will
occur on this field.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueNotFoundTextJS" type="JS" required="false">
					<help><![CDATA[ When using a name/value combo, if the value passed to
setValue is not found in the store, valueNotFoundText
will be displayed as the field text if defined
(defaults to undefined). If this defaut text is used,
it means there is no value set and no validation will
occur on this field.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtype" type="String" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeJS" type="JS" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeText" type="String" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeTextJS" type="JS" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:tool" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="handler" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="on" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtip" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="scope" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:toolbar" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="position" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="top"></values>
				</parameter>
		</tag>
		<tag name="ext:toolbarbutton" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowDepress" type="Boolean" required="false">
					<help><![CDATA[ False to not allow a pressed Button to be depressed
(defaults to undefined). Only valid when enableToggle
is true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonSelector" type="String" required="false">
					<help><![CDATA[ (Optional) A DomQuery selector which is used to extract
the active, clickable element from the DOM structure
created. When a custom template is used, you must
ensure that this selector results in the selection of a
focussable element. Defaults to "button:first-child".
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonSelectorJS" type="JS" required="false">
					<help><![CDATA[ (Optional) A DomQuery selector which is used to extract
the active, clickable element from the DOM structure
created. When a custom template is used, you must
ensure that this selector results in the selection of a
focussable element. Defaults to "button:first-child".
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clickEvent" type="String" required="false">
					<help><![CDATA[ The type of event to map to the button's event handler
(defaults to 'click')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clickEventJS" type="JS" required="false">
					<help><![CDATA[ The type of event to map to the button's event handler
(defaults to 'click')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="enableToggle" type="Boolean" required="false">
					<help><![CDATA[ True to enable pressed/not pressed toggling (defaults
to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="handleMouseEvents" type="Boolean" required="false">
					<help><![CDATA[ False to disable visual cues on mouseover, mouseout and
mousedown (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="handler" type="Function" required="false">
					<help><![CDATA[ A function called when the button is clicked (can be
used instead of click event)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="icon" type="String" required="false">
					<help><![CDATA[ The path to an image to display in the button (the
image will be set as the background-image CSS property
of the button by default, so if you want a mixed
icon/text button, set cls:"x-btn-text-icon")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconJS" type="JS" required="false">
					<help><![CDATA[ The path to an image to display in the button (the
image will be set as the background-image CSS property
of the button by default, so if you want a mixed
icon/text button, set cls:"x-btn-text-icon")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A css class which sets a background image to be used as
the icon for this button
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A css class which sets a background image to be used as
the icon for this button
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menu" type="String" required="false">
					<help><![CDATA[ Standard menu attribute consisting of a reference to a
menu object, a menu id or a menu config blob (defaults
to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuJS" type="Mixed" required="false">
					<help><![CDATA[ Standard menu attribute consisting of a reference to a
menu object, a menu id or a menu config blob (defaults
to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuAlign" type="String" required="false">
					<help><![CDATA[ The position to align the menu to (see
Ext.Element.alignTo for more details, defaults to
'tl-bl?').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuAlignJS" type="JS" required="false">
					<help><![CDATA[ The position to align the menu to (see
Ext.Element.alignTo for more details, defaults to
'tl-bl?').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width for this button (used to give a set
of buttons a common width)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pressed" type="Boolean" required="false">
					<help><![CDATA[ True to start pressed (only if enableToggle = true) ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="repeat" type="Boolean/Object" required="false">
					<help><![CDATA[ True to repeat fire the click event while the mouse is
down. This can also be an Ext.util.ClickRepeater config
object (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="scope" type="Object" required="false">
					<help><![CDATA[ The scope of the handler ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ Set a DOM tabIndex for this button (defaults to
undefined)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="template" type="Ext.Template" required="false">
					<help><![CDATA[ (Optional) An Ext.Template with which to create the
Button's main element. This Template must contain
numeric substitution parameter 0 if it is to display
the text property. Changing the template could require
code modifications if required elements (e.g. a button)
aren't present.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="text" type="String" required="false">
					<help><![CDATA[ The button text ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textJS" type="JS" required="false">
					<help><![CDATA[ The button text ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="toggleGroup" type="String" required="false">
					<help><![CDATA[ The group this toggle button is a member of (only 1 per
group can be pressed)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="toggleGroupJS" type="JS" required="false">
					<help><![CDATA[ The group this toggle button is a member of (only 1 per
group can be pressed)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="toggleHandler" type="Function" required="false">
					<help><![CDATA[ Function called when a Button with enableToggle set to
true is clicked. Two arguments are passed: button :
Ext.Buttonthis Button object state : BooleanThe next
state if the Button, true means pressed.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltip" type="String" required="false">
					<help><![CDATA[ The tooltip for the button - can be a string or
QuickTips config object
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltipJS" type="String/Object" required="false">
					<help><![CDATA[ The tooltip for the button - can be a string or
QuickTips config object
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltipType" type="String" required="false">
					<help><![CDATA[ The type of tooltip to use. Either "qtip" (default) for
QuickTips or "title" for title attribute.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltipTypeJS" type="JS" required="false">
					<help><![CDATA[ The type of tooltip to use. Either "qtip" (default) for
QuickTips or "title" for title attribute.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="type" type="String" required="false">
					<help><![CDATA[ submit, reset or button - defaults to 'button' ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="typeJS" type="JS" required="false">
					<help><![CDATA[ submit, reset or button - defaults to 'button' ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:toolbarfill" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
		</tag>
		<tag name="ext:toolbarsplitbutton" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowDepress" type="Boolean" required="false">
					<help><![CDATA[ False to not allow a pressed Button to be depressed
(defaults to undefined). Only valid when enableToggle
is true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="arrowHandler" type="Function" required="false">
					<help><![CDATA[ A function called when the arrow button is clicked (can
be used instead of click event)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="arrowTooltip" type="String" required="false">
					<help><![CDATA[ The title attribute of the arrow ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="arrowTooltipJS" type="JS" required="false">
					<help><![CDATA[ The title attribute of the arrow ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonSelector" type="String" required="false">
					<help><![CDATA[ (Optional) A DomQuery selector which is used to extract
the active, clickable element from the DOM structure
created. When a custom template is used, you must
ensure that this selector results in the selection of a
focussable element. Defaults to "button:first-child".
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonSelectorJS" type="JS" required="false">
					<help><![CDATA[ (Optional) A DomQuery selector which is used to extract
the active, clickable element from the DOM structure
created. When a custom template is used, you must
ensure that this selector results in the selection of a
focussable element. Defaults to "button:first-child".
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clickEvent" type="String" required="false">
					<help><![CDATA[ The type of event to map to the button's event handler
(defaults to 'click')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clickEventJS" type="JS" required="false">
					<help><![CDATA[ The type of event to map to the button's event handler
(defaults to 'click')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="enableToggle" type="Boolean" required="false">
					<help><![CDATA[ True to enable pressed/not pressed toggling (defaults
to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="handleMouseEvents" type="Boolean" required="false">
					<help><![CDATA[ False to disable visual cues on mouseover, mouseout and
mousedown (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="handler" type="Function" required="false">
					<help><![CDATA[ A function called when the button is clicked (can be
used instead of click event)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="icon" type="String" required="false">
					<help><![CDATA[ The path to an image to display in the button (the
image will be set as the background-image CSS property
of the button by default, so if you want a mixed
icon/text button, set cls:"x-btn-text-icon")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconJS" type="JS" required="false">
					<help><![CDATA[ The path to an image to display in the button (the
image will be set as the background-image CSS property
of the button by default, so if you want a mixed
icon/text button, set cls:"x-btn-text-icon")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A css class which sets a background image to be used as
the icon for this button
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A css class which sets a background image to be used as
the icon for this button
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menu" type="String" required="false">
					<help><![CDATA[ Standard menu attribute consisting of a reference to a
menu object, a menu id or a menu config blob (defaults
to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuJS" type="Mixed" required="false">
					<help><![CDATA[ Standard menu attribute consisting of a reference to a
menu object, a menu id or a menu config blob (defaults
to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuAlign" type="String" required="false">
					<help><![CDATA[ The position to align the menu to (see
Ext.Element.alignTo for more details, defaults to
'tl-bl?').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuAlignJS" type="JS" required="false">
					<help><![CDATA[ The position to align the menu to (see
Ext.Element.alignTo for more details, defaults to
'tl-bl?').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width for this button (used to give a set
of buttons a common width)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pressed" type="Boolean" required="false">
					<help><![CDATA[ True to start pressed (only if enableToggle = true) ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="repeat" type="Boolean/Object" required="false">
					<help><![CDATA[ True to repeat fire the click event while the mouse is
down. This can also be an Ext.util.ClickRepeater config
object (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="scope" type="Object" required="false">
					<help><![CDATA[ The scope of the handler ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ Set a DOM tabIndex for this button (defaults to
undefined)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="template" type="Ext.Template" required="false">
					<help><![CDATA[ (Optional) An Ext.Template with which to create the
Button's main element. This Template must contain
numeric substitution parameter 0 if it is to display
the text property. Changing the template could require
code modifications if required elements (e.g. a button)
aren't present.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="text" type="String" required="false">
					<help><![CDATA[ The button text ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textJS" type="JS" required="false">
					<help><![CDATA[ The button text ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="toggleGroup" type="String" required="false">
					<help><![CDATA[ The group this toggle button is a member of (only 1 per
group can be pressed)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="toggleGroupJS" type="JS" required="false">
					<help><![CDATA[ The group this toggle button is a member of (only 1 per
group can be pressed)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="toggleHandler" type="Function" required="false">
					<help><![CDATA[ Function called when a Button with enableToggle set to
true is clicked. Two arguments are passed: button :
Ext.Buttonthis Button object state : BooleanThe next
state if the Button, true means pressed.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltip" type="String" required="false">
					<help><![CDATA[ The tooltip for the button - can be a string or
QuickTips config object
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltipJS" type="String/Object" required="false">
					<help><![CDATA[ The tooltip for the button - can be a string or
QuickTips config object
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltipType" type="String" required="false">
					<help><![CDATA[ The type of tooltip to use. Either "qtip" (default) for
QuickTips or "title" for title attribute.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltipTypeJS" type="JS" required="false">
					<help><![CDATA[ The type of tooltip to use. Either "qtip" (default) for
QuickTips or "title" for title attribute.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="type" type="String" required="false">
					<help><![CDATA[ submit, reset or button - defaults to 'button' ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="typeJS" type="JS" required="false">
					<help><![CDATA[ submit, reset or button - defaults to 'button' ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:tooltip" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
true if the Ext.Fx class is available, otherwise
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHide" type="Boolean" required="false">
					<help><![CDATA[ True to automatically hide the tooltip after the mouse
exits the target element or after the dismissDelay has
expired if set (defaults to true). If closable = true a
close tool button will be rendered into the tooltip
header.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoLoad" type="String" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoLoadJS" type="Object/String/Function" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoScroll" type="Boolean" required="false">
					<help><![CDATA[ True to use overflow:'auto' on the panel's body element
and show scroll bars automatically when necessary,
false to clip any overflowing content (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bbar" type="Object/Array" required="false">
					<help><![CDATA[ The bottom toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
bottom toolbar after render, use getBottomToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyBorder" type="Boolean" required="false">
					<help><![CDATA[ True to display an interior border on the body element
of the panel, false to hide it (defaults to true). This
only applies when border == true. If border == true and
bodyBorder == false, the border will display as a 1px
wide inset border, giving the entire body element an
inset appearance.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyle" type="String" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyleJS" type="String/Object/Function" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the panel's body
element, false to hide them (defaults to true). By
default, the border is a 2px wide inset border, but
this can be further altered by setting bodyBorder to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonAlign" type="String" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonAlignJS" type="JS" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttons" type="Array" required="false">
					<help><![CDATA[ An array of Ext.Buttons or Ext.Button configs used to
add buttons to the footer of this panel.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="closable" type="Boolean" required="false">
					<help><![CDATA[ True to render a close tool button into the tooltip
header (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseFirst" type="Boolean" required="false">
					<help><![CDATA[ True to make sure the collapse/expand toggle button
always renders first (to the left of) any other tools
in the panel's title bar, false to render it last
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel collapsed, false to render it
expanded (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to make the panel collapsible and have the
expand/collapse toggle button automatically rendered
into the header tool button area, false to keep the
panel statically sized with no button (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="contentEl" type="String" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentElJS" type="JS" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultAlign" type="String" required="false">
					<help><![CDATA[ Experimental. The default Ext.Element.alignTo anchor
position value for this tip relative to its element of
origin (defaults to "tl-bl?").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultAlignJS" type="JS" required="false">
					<help><![CDATA[ Experimental. The default Ext.Element.alignTo anchor
position value for this tip relative to its element of
origin (defaults to "tl-bl?").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dismissDelay" type="Number" required="false">
					<help><![CDATA[ Delay in milliseconds before the tooltip automatically
hides (defaults to 5000). To disable automatic hiding,
set dismissDelay = 0.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of this Panel (defaults to
false). For custom drag/drop implementations, an
Ext.Panel.DD config could also be passed in this config
instead of true. Ext.Panel.DD is an internal,
undocumented class which moves a proxy Element around
in place of the Panel's element, but provides no other
behaviour during dragging or on drop. It is a subclass
of Ext.dd.DragSource, so behaviour may be added by
implementing the interface methods of Ext.dd.DragDrop
eg: new Ext.Panel({    title: 'Drag me',    x: 100,
y: 100,    renderTo: Ext.getBody(),    floating: true,
frame: true,    width: 400,    height: 200,
draggable: {//      Config option of Ext.Panel.DD
class.//      It's a floating Panel, so do not show a
placeholder proxy in the original position.
insertProxy: false,//      Called for each mousemove
event while dragging the DD object.        onDrag :
function(e){//          Record the x,y position of the
drag proxy so that we can//          position the Panel
at end of drag.            var pel =
this.proxy.getEl();            this.x =
pel.getLeft(true);            this.y =
pel.getTop(true);//          Keep the Shadow aligned if
there is one.            var s =
this.panel.getEl().shadow;            if (s) {
s.realign(this.x, this.y, pel.getWidth(),
pel.getHeight());            }        },//      Called
on the mouseup event.        endDrag : function(e){
this.panel.setPosition(this.x, this.y);        }
}}).show();
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="elements" type="String" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="elementsJS" type="JS" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="floating" type="Boolean" required="false">
					<help><![CDATA[ True to float the panel (absolute position it with
automatic shimming and shadow), false to display it
inline where it is rendered (defaults to false). Note
that by default, setting floating to true will cause
the panel to display at negative offsets so that it is
hidden -- because the panel is absolute positioned, the
position must be set explicitly after render (e.g.,
myPanel.setPosition(100,100);). Also, when floating a
panel you should always assign a fixed width, otherwise
it will be auto width and will expand to fill to the
right edge of the viewport.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="footer" type="Boolean" required="false">
					<help><![CDATA[ True to create the footer element explicitly, false to
skip creating it. By default, when footer is not
specified, if one or more buttons have been added to
the panel the footer will be created automatically,
otherwise it will not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="frame" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel with custom rounded borders,
false to render with plain 1px square borders (defaults
to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="Boolean" required="false">
					<help><![CDATA[ True to create the header element explicitly, false to
skip creating it. By default, when header is not
specified, if a title is set the header will be created
automatically, otherwise it will not. If a title is set
but header is explicitly set to false, the header will
not be rendered.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="headerAsText" type="Boolean" required="false">
					<help><![CDATA[ True to display the panel title in the header, false to
hide it (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideCollapseTool" type="Boolean" required="false">
					<help><![CDATA[ True to hide the expand/collapse toggle button when
collapsible = true, false to display it (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideDelay" type="Number" required="false">
					<help><![CDATA[ Delay in milliseconds after the mouse exits the target
element but before the tooltip actually hides (defaults
to 200). Set to 0 for the tooltip to hide immediately.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="html" type="String" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="htmlJS" type="String/Object" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layout" type="String" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutJS" type="JS" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="maxWidth" type="Number" required="false">
					<help><![CDATA[ The maximum width of the tip in pixels (defaults to
300). The maximum supported value is 500.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width in pixels of all buttons in this panel
(defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width of the tip in pixels (defaults to
40).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events to
handle anything that is sensitive to the current size
of the viewport. This value is typically managed by the
chosen layout and should not need to be set manually.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="mouseOffset" type="Array" required="false">
					<help><![CDATA[ An XY offset from the mouse position where the tooltip
should be shown (defaults to [15,18]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadowOffset" type="Number" required="false">
					<help><![CDATA[ The number of pixels to offset the shadow if displayed
(defaults to 4). Note that this option only applies
when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shim" type="Boolean" required="false">
					<help><![CDATA[ False to disable the iframe shim in browsers which need
one (defaults to true). Note that this option only
applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="showDelay" type="Number" required="false">
					<help><![CDATA[ Delay in milliseconds before the tooltip displays after
the mouse enters the target element (defaults to 500)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="target" type="String" required="false">
					<help><![CDATA[ The target HTMLElement, Ext.Element or id to associate
with this tooltip.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="targetJS" type="Mixed" required="false">
					<help><![CDATA[ The target HTMLElement, Ext.Element or id to associate
with this tooltip.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tbar" type="Object/Array" required="false">
					<help><![CDATA[ The top toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
top toolbar after render, use getTopToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to allow expanding and collapsing the panel (when
collapsible = true) by clicking anywhere in the header
bar, false to allow it only by clicking to tool button
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tools" type="Array" required="false">
					<help><![CDATA[ An array of tool button configs to be added to the
header tool area. When rendered, each tool is stored as
an Element referenced by a public property called
tools. Each tool config may contain the following
properties:  id : StringRequired. The type of tool to
create. Values may be toggle (Created by default when
collapsible is true) close minimize maximize restore
gear pin unpin right left up down refresh minus plus
help search save print  handler : FunctionRequired. The
function to call when clicked. Arguments passed are:
event : Ext.EventObjectThe click event. toolEl :
Ext.ElementThe tool Element. Panel : Ext.PanelThe host
Panel  scope : ObjectThe scope in which to call the
handler. qtip : String/ObjectA tip string, or a config
argument to Ext.QuickTip.register hidden : BooleanTrue
to initially render hidden. on : ObjectA listener
config object specifiying event listeners in the format
of an argument to addListener  Example usage: tools:[{
id:'refresh',    qtip: 'Refresh form Data',    //
hidden:true,    handler: function(event, toolEl,
panel){        // refresh logic    }}] Note that apart
from the toggle tool which is provided when a panel is
collapsible, these tools only provide the visual
button. Any required functionality must be provided by
adding handlers that implement the necessary behavior.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="trackMouse" type="Boolean" required="false">
					<help><![CDATA[ True to have the tooltip follow the mouse as it moves
over the target element (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="text" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:treeloader" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="baseAttrs" type="Object" required="false">
					<help><![CDATA[ (optional) An object containing attributes to be added
to all nodes created by this loader. If the attributes
sent by the server have an attribute in this object,
they take priority.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseParams" type="Object" required="false">
					<help><![CDATA[ (optional) An object containing properties which
specify HTTP parameters to be passed to each request
for child nodes.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearOnLoad" type="Boolean" required="false">
					<help><![CDATA[ (optional) Default to true. Remove previously existing
child nodes before loading.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="dataUrl" type="String" required="false">
					<help><![CDATA[ The URL from which to request a Json string which
specifies an array of node definition objects
representing the child nodes to be loaded.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dataUrlJS" type="JS" required="false">
					<help><![CDATA[ The URL from which to request a Json string which
specifies an array of node definition objects
representing the child nodes to be loaded.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="preloadChildren" type="Boolean" required="false">
					<help><![CDATA[ If set to true, the loader recursively loads "children"
attributes when doing the first load on nodes.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="requestMethod" type="String" required="false">
					<help><![CDATA[ The HTTP request method for loading data (defaults to
the value of Ext.Ajax.method).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="requestMethodJS" type="JS" required="false">
					<help><![CDATA[ The HTTP request method for loading data (defaults to
the value of Ext.Ajax.method).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="uiProviders" type="Object" required="false">
					<help><![CDATA[ (optional) An object containing properties which
specify custom Ext.tree.TreeNodeUI implementations. If
the optional uiProvider attribute of a returned child
node is a string rather than a reference to a
TreeNodeUI implementation, then that string value is
used as a property name in the uiProviders object.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="url" type="String" required="false">
					<help><![CDATA[ Equivalent to dataUrl. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="urlJS" type="JS" required="false">
					<help><![CDATA[ Equivalent to dataUrl. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:treenode" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="allowChildren" type="Boolean" required="false">
					<help><![CDATA[ False to not allow this node to have child nodes
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDrag" type="Boolean" required="false">
					<help><![CDATA[ False to make this node undraggable if draggable = true
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDrop" type="Boolean" required="false">
					<help><![CDATA[ False if this node cannot have child nodes dropped on
it (defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="checked" type="Boolean" required="false">
					<help><![CDATA[ True to render a checked checkbox for this node, false
to render an unchecked checkbox (defaults to undefined
with no checkbox rendered)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ A css class to be added to the node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ A css class to be added to the node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ true to start the node disabled ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to make this node draggable (defaults to false) ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="expandable" type="Boolean" required="false">
					<help><![CDATA[ If set to true, the node will always show a plus/minus
icon, even when empty
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="expanded" type="Boolean" required="false">
					<help><![CDATA[ true to start the node expanded ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="href" type="String" required="false">
					<help><![CDATA[ URL of the link used for the node (defaults to #) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hrefJS" type="JS" required="false">
					<help><![CDATA[ URL of the link used for the node (defaults to #) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hrefTarget" type="String" required="false">
					<help><![CDATA[ target frame for the link ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hrefTargetJS" type="JS" required="false">
					<help><![CDATA[ target frame for the link ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="icon" type="String" required="false">
					<help><![CDATA[ The path to an icon for the node. The preferred way to
do this is to use the cls or iconCls attributes and add
the icon via a CSS background image.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconJS" type="JS" required="false">
					<help><![CDATA[ The path to an icon for the node. The preferred way to
do this is to use the cls or iconCls attributes and add
the icon via a CSS background image.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A css class to be added to the nodes icon element for
applying css background images
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A css class to be added to the nodes icon element for
applying css background images
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The id for this node. If one is not specified, one is
generated.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The id for this node. If one is not specified, one is
generated.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="isTarget" type="Boolean" required="false">
					<help><![CDATA[ False to not allow this node to act as a drop target
(defaults to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="leaf" type="Boolean" required="false">
					<help><![CDATA[ true if this node is a leaf and does not have children ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtip" type="String" required="false">
					<help><![CDATA[ An Ext QuickTip for the node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipJS" type="JS" required="false">
					<help><![CDATA[ An Ext QuickTip for the node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipCfg" type="String" required="false">
					<help><![CDATA[ An Ext QuickTip config for the node (used instead of
qtip)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipCfgJS" type="JS" required="false">
					<help><![CDATA[ An Ext QuickTip config for the node (used instead of
qtip)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="singleClickExpand" type="Boolean" required="false">
					<help><![CDATA[ True for single click expand on this node ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="text" type="String" required="false">
					<help><![CDATA[ The text for this node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textJS" type="JS" required="false">
					<help><![CDATA[ The text for this node ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="uiProvider" type="Function" required="false">
					<help><![CDATA[ A UI class to use for this node (defaults to
Ext.tree.TreeNodeUI)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:treepanel" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
true if the Ext.Fx class is available, otherwise
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animFloat" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel that will
close again once the user mouses out of that panel (or
clicks out if autoHide = false). Setting animFloat to
false will prevent the open and close of these floated
panels from being animated (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animate" type="Boolean" required="false">
					<help><![CDATA[ true to enable animated expand/collapse (defaults to
the value of Ext.enableFx)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHide" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel. If autoHide
is true, the panel will automatically hide after the
user mouses out of the panel. If autoHide is false, the
panel will continue to display until the user clicks
outside of the panel (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoScroll" type="Boolean" required="false">
					<help><![CDATA[ True to use overflow:'auto' on the panel's body element
and show scroll bars automatically when necessary,
false to clip any overflowing content (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bbar" type="Object/Array" required="false">
					<help><![CDATA[ The bottom toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
bottom toolbar after render, use getBottomToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyBorder" type="Boolean" required="false">
					<help><![CDATA[ True to display an interior border on the body element
of the panel, false to hide it (defaults to true). This
only applies when border == true. If border == true and
bodyBorder == false, the border will display as a 1px
wide inset border, giving the entire body element an
inset appearance.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyle" type="String" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyleJS" type="String/Object/Function" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the panel's body
element, false to hide them (defaults to true). By
default, the border is a 2px wide inset border, but
this can be further altered by setting bodyBorder to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonAlign" type="String" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonAlignJS" type="JS" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttons" type="Array" required="false">
					<help><![CDATA[ An array of Ext.Buttons or Ext.Button configs used to
add buttons to the footer of this panel.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cmargins" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the collapsed state in the format:{    top:
(top margin),    right: (right margin),    bottom:
(bottom margin)    left: (left margin),} May also be a
string containing space-separated, numeric margin
values. The order of the sides associated with each
value matches the way CSS processes margin values.  If
there is only one value, it applies to all sides. If
there are two values, the top and bottom borders are
set to the first value and the right and left are set
to the second. If there are three values, the top is
set to the first value, the left and right are set to
the second, and the bottom is set to the third. If
there are four values, they apply to the top, right,
bottom, and left, respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseFirst" type="Boolean" required="false">
					<help><![CDATA[ True to make sure the collapse/expand toggle button
always renders first (to the left of) any other tools
in the panel's title bar, false to render it last
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapseMode" type="String" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseModeJS" type="JS" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ By default, collapsible regions will be visible when
rendered. Set the collapsed config to true to render
the region as collapsed.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel collapsed, false to render it
expanded (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to allow the user to collapse this region
(defaults to false). If true, an expand/collapse tool
button will automatically be rendered into the title
bar of the region, otherwise the button will not be
shown. Note that a title bar is required to display the
toggle button -- if no region title is specified, the
region will only be collapsible if collapseMode is set
to 'mini'.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to make the panel collapsible and have the
expand/collapse toggle button automatically rendered
into the header tool button area, false to keep the
panel statically sized with no button (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsibleSplitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsibleSplitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="containerScroll" type="Boolean" required="false">
					<help><![CDATA[ true to register this container with ScrollManager ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ddAppendOnly" type="String" required="false">
					<help><![CDATA[ True if the tree should only allow append drops (use
for trees which are sorted)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ddAppendOnlyJS" type="JS" required="false">
					<help><![CDATA[ True if the tree should only allow append drops (use
for trees which are sorted)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ddGroup" type="String" required="false">
					<help><![CDATA[ The DD group this TreePanel belongs to ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ddGroupJS" type="JS" required="false">
					<help><![CDATA[ The DD group this TreePanel belongs to ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ddScroll" type="Boolean" required="false">
					<help><![CDATA[ true to enable body scrolling ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="dragConfig" type="Object" required="false">
					<help><![CDATA[ Custom config to pass to the Ext.tree.TreeDragZone
instance
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of this Panel (defaults to
false). For custom drag/drop implementations, an
Ext.Panel.DD config could also be passed in this config
instead of true. Ext.Panel.DD is an internal,
undocumented class which moves a proxy Element around
in place of the Panel's element, but provides no other
behaviour during dragging or on drop. It is a subclass
of Ext.dd.DragSource, so behaviour may be added by
implementing the interface methods of Ext.dd.DragDrop
eg: new Ext.Panel({    title: 'Drag me',    x: 100,
y: 100,    renderTo: Ext.getBody(),    floating: true,
frame: true,    width: 400,    height: 200,
draggable: {//      Config option of Ext.Panel.DD
class.//      It's a floating Panel, so do not show a
placeholder proxy in the original position.
insertProxy: false,//      Called for each mousemove
event while dragging the DD object.        onDrag :
function(e){//          Record the x,y position of the
drag proxy so that we can//          position the Panel
at end of drag.            var pel =
this.proxy.getEl();            this.x =
pel.getLeft(true);            this.y =
pel.getTop(true);//          Keep the Shadow aligned if
there is one.            var s =
this.panel.getEl().shadow;            if (s) {
s.realign(this.x, this.y, pel.getWidth(),
pel.getHeight());            }        },//      Called
on the mouseup event.        endDrag : function(e){
this.panel.setPosition(this.x, this.y);        }
}}).show();
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="dropConfig" type="Object" required="false">
					<help><![CDATA[ Custom config to pass to the Ext.tree.TreeDropZone
instance
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="enableDD" type="Boolean" required="false">
					<help><![CDATA[ true to enable drag and drop ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableDrag" type="Boolean" required="false">
					<help><![CDATA[ true to enable just drag ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="enableDrop" type="Boolean" required="false">
					<help><![CDATA[ true to enable just drop ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="extraCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="floatable" type="Boolean" required="false">
					<help><![CDATA[ True to allow clicking a collapsed region's bar to
display the region's panel floated above the layout,
false to force the user to fully expand a collapsed
region by clicking the expand button to see it again
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="floating" type="Boolean" required="false">
					<help><![CDATA[ True to float the panel (absolute position it with
automatic shimming and shadow), false to display it
inline where it is rendered (defaults to false). Note
that by default, setting floating to true will cause
the panel to display at negative offsets so that it is
hidden -- because the panel is absolute positioned, the
position must be set explicitly after render (e.g.,
myPanel.setPosition(100,100);). Also, when floating a
panel you should always assign a fixed width, otherwise
it will be auto width and will expand to fill to the
right edge of the viewport.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="footer" type="Boolean" required="false">
					<help><![CDATA[ True to create the footer element explicitly, false to
skip creating it. By default, when footer is not
specified, if one or more buttons have been added to
the panel the footer will be created automatically,
otherwise it will not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="frame" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel with custom rounded borders,
false to render with plain 1px square borders (defaults
to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="Boolean" required="false">
					<help><![CDATA[ True to create the header element explicitly, false to
skip creating it. By default, when header is not
specified, if a title is set the header will be created
automatically, otherwise it will not. If a title is set
but header is explicitly set to false, the header will
not be rendered.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="headerAsText" type="Boolean" required="false">
					<help><![CDATA[ True to display the panel title in the header, false to
hide it (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideCollapseTool" type="Boolean" required="false">
					<help><![CDATA[ True to hide the expand/collapse toggle button when
collapsible = true, false to display it (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hlColor" type="String" required="false">
					<help><![CDATA[ The color of the node highlight (defaults to C3DAF9) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hlColorJS" type="JS" required="false">
					<help><![CDATA[ The color of the node highlight (defaults to C3DAF9) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hlDrop" type="Boolean" required="false">
					<help><![CDATA[ false to disable node highlight on drop (defaults to
the value of Ext.enableFx)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="lines" type="Boolean" required="false">
					<help><![CDATA[ false to disable tree lines (defaults to true) ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="loader" type="Ext.tree.TreeLoader" required="false">
					<help><![CDATA[ A Ext.tree.TreeLoader for use with this TreePanel ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="margins" type="String" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="marginsJS" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width in pixels of all buttons in this panel
(defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum allowable height in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum allowable width in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pathSeparator" type="String" required="false">
					<help><![CDATA[ The token used to separate sub-paths in path strings
(defaults to '/')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pathSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The token used to separate sub-paths in path strings
(defaults to '/')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderHidden" type="Boolean" required="false">
					<help><![CDATA[ True to hide each contained item on render (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="root" type="Ext.tree.TreeNode" required="false">
					<help><![CDATA[ The root node for the tree. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="rootVisible" type="Boolean" required="false">
					<help><![CDATA[ false to hide the root node (defaults to true) ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="selModel" type="Boolean" required="false">
					<help><![CDATA[ A tree selection model to use with this TreePanel
(defaults to a Ext.tree.DefaultSelectionModel)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadowOffset" type="Number" required="false">
					<help><![CDATA[ The number of pixels to offset the shadow if displayed
(defaults to 4). Note that this option only applies
when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shim" type="Boolean" required="false">
					<help><![CDATA[ False to disable the iframe shim in browsers which need
one (defaults to true). Note that this option only
applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="singleExpand" type="Boolean" required="false">
					<help><![CDATA[ true if only 1 node per branch may be expanded ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="split" type="Boolean" required="false">
					<help><![CDATA[ True to display a Ext.SplitBar between this region and
its neighbor, allowing the user to resize the regions
dynamically (defaults to false). When split == true, it
is common to specify a minSize and maxSize for the
BoxComponent representing the region. These are not
native configs of BoxComponent, and are used only by
this class.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="splitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="splitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tbar" type="Object/Array" required="false">
					<help><![CDATA[ The top toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
top toolbar after render, use getTopToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to allow expanding and collapsing the panel (when
collapsible = true) by clicking anywhere in the header
bar, false to allow it only by clicking to tool button
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tools" type="Array" required="false">
					<help><![CDATA[ An array of tool button configs to be added to the
header tool area. When rendered, each tool is stored as
an Element referenced by a public property called
tools. Each tool config may contain the following
properties:  id : StringRequired. The type of tool to
create. Values may be toggle (Created by default when
collapsible is true) close minimize maximize restore
gear pin unpin right left up down refresh minus plus
help search save print  handler : FunctionRequired. The
function to call when clicked. Arguments passed are:
event : Ext.EventObjectThe click event. toolEl :
Ext.ElementThe tool Element. Panel : Ext.PanelThe host
Panel  scope : ObjectThe scope in which to call the
handler. qtip : String/ObjectA tip string, or a config
argument to Ext.QuickTip.register hidden : BooleanTrue
to initially render hidden. on : ObjectA listener
config object specifiying event listeners in the format
of an argument to addListener  Example usage: tools:[{
id:'refresh',    qtip: 'Refresh form Data',    //
hidden:true,    handler: function(event, toolEl,
panel){        // refresh logic    }}] Note that apart
from the toggle tool which is provided when a panel is
collapsible, these tools only provide the visual
button. Any required functionality must be provided by
adding handlers that implement the necessary behavior.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="trackMouseOver" type="Boolean" required="false">
					<help><![CDATA[ False to disable mouse over highlighting ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="useArrows" type="Boolean" required="false">
					<help><![CDATA[ True to use Vista-style arrows in the tree (defaults to
false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="useSplitTips" type="Boolean" required="false">
					<help><![CDATA[ True to display a tooltip when the user hovers over a
region's split bar (defaults to false). The tooltip
text will be the value of either splitTip or
collapsibleSplitTip as appropriate.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="region" type="String" required="false">
					<help><![CDATA[ The position within the viewport to attach this
component to. The 'center' region is always required
when using a viewport.
 ]]></help>
					<values default=""><value option="center" /><value option="east" /><value option="north" /><value option="south" /><value option="west" /></values>
				</parameter>
		</tag>
		<tag name="ext:viewport" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="layout" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="border"></values>
				</parameter>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layout" type="String" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutJS" type="JS" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events to
handle anything that is sensitive to the current size
of the viewport. This value is typically managed by the
chosen layout and should not need to be set manually.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:window" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="minHeight" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="50"></values>
				</parameter>
				<parameter name="minWidth" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="100"></values>
				</parameter>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
true if the Ext.Fx class is available, otherwise
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animateTarget" type="String" required="false">
					<help><![CDATA[ Id or element from which the window should animate
while opening (defaults to null with no animation).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="animateTargetJS" type="String/Element" required="false">
					<help><![CDATA[ Id or element from which the window should animate
while opening (defaults to null with no animation).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoLoad" type="String" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoLoadJS" type="Object/String/Function" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoScroll" type="Boolean" required="false">
					<help><![CDATA[ True to use overflow:'auto' on the panel's body element
and show scroll bars automatically when necessary,
false to clip any overflowing content (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-window').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-window').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bbar" type="Object/Array" required="false">
					<help><![CDATA[ The bottom toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
bottom toolbar after render, use getBottomToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyBorder" type="Boolean" required="false">
					<help><![CDATA[ True to display an interior border on the body element
of the panel, false to hide it (defaults to true). This
only applies when border == true. If border == true and
bodyBorder == false, the border will display as a 1px
wide inset border, giving the entire body element an
inset appearance.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyle" type="String" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyleJS" type="String/Object/Function" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the panel's body
element, false to hide them (defaults to true). By
default, the border is a 2px wide inset border, but
this can be further altered by setting bodyBorder to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonAlign" type="String" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonAlignJS" type="JS" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttons" type="Array" required="false">
					<help><![CDATA[ An array of Ext.Buttons or Ext.Button configs used to
add buttons to the footer of this panel.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="closable" type="Boolean" required="false">
					<help><![CDATA[ True to display the 'close' tool button and allow the
user to close the window, false to hide the button and
disallow closing the window (default to true). By
default, when close is requested by either clicking the
close button in the header or pressing ESC when the
Window has focus, the close method will be called. This
will destroy the Window and its content meaning that it
may not be reused. To make closing a Window hide the
Window so that it may be reused, set closeAction to
'hide'.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="closeAction" type="String" required="false">
					<help><![CDATA[ The action to take when the close button is clicked.
The default action is 'close' which will actually
remove the window from the DOM and destroy it. The
other valid option is 'hide' which will simply hide the
window by setting visibility to hidden and applying
negative offsets, keeping the window available to be
redisplayed via the show method.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="closeActionJS" type="JS" required="false">
					<help><![CDATA[ The action to take when the close button is clicked.
The default action is 'close' which will actually
remove the window from the DOM and destroy it. The
other valid option is 'hide' which will simply hide the
window by setting visibility to hidden and applying
negative offsets, keeping the window available to be
redisplayed via the show method.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseFirst" type="Boolean" required="false">
					<help><![CDATA[ True to make sure the collapse/expand toggle button
always renders first (to the left of) any other tools
in the panel's title bar, false to render it last
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ True to render the window collapsed, false to render it
expanded (defaults to false). Note that if expandOnShow
is true (the default) it will override the collapsed
config and the window will always be expanded when
shown.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to make the panel collapsible and have the
expand/collapse toggle button automatically rendered
into the header tool button area, false to keep the
panel statically sized with no button (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="constrain" type="Boolean" required="false">
					<help><![CDATA[ True to constrain the window to the viewport, false to
allow it to fall outside of the viewport (defaults to
false). Optionally the header only can be constrained
using constrainHeader.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="constrainHeader" type="Boolean" required="false">
					<help><![CDATA[ True to constrain the window header to the viewport,
allowing the window body to fall outside of the
viewport, false to allow the header to fall outside the
viewport (defaults to false). Optionally the entire
window can be constrained using constrain.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="contentEl" type="String" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentElJS" type="JS" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultButton" type="String" required="false">
					<help><![CDATA[ The id / index of a button or a button instance to
focus when this window received the focus.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultButtonJS" type="String/Number/Button" required="false">
					<help><![CDATA[ The id / index of a button or a button instance to
focus when this window received the focus.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to allow the window to be dragged by the header
bar, false to disable dragging (defaults to true). Note
that by default the window will be centered in the
viewport, so if dragging is disabled the window may
need to be positioned programmatically after render
(e.g., myWindow.setPosition(100, 100);).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="elements" type="String" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the window is rendered. Normally, this list will
be generated automatically based on the items added to
the window at config time, but sometimes it might be
useful to make sure a structural element is rendered
even if not specified at config time (for example, you
may want to add a button or toolbar dynamically after
the window has been rendered). Adding those elements to
this list will allocate the required placeholders in
the window when it is rendered. Valid values are header
(required) tbar (top bar) body (required) bbar (bottom
bar) footer  Defaults to 'header,body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="elementsJS" type="JS" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the window is rendered. Normally, this list will
be generated automatically based on the items added to
the window at config time, but sometimes it might be
useful to make sure a structural element is rendered
even if not specified at config time (for example, you
may want to add a button or toolbar dynamically after
the window has been rendered). Adding those elements to
this list will allocate the required placeholders in
the window when it is rendered. Valid values are header
(required) tbar (top bar) body (required) bbar (bottom
bar) footer  Defaults to 'header,body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="expandOnShow" type="Boolean" required="false">
					<help><![CDATA[ True to always expand the window when it is displayed,
false to keep it in its current state (which may be
collapsed) when displayed (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="footer" type="Boolean" required="false">
					<help><![CDATA[ True to create the footer element explicitly, false to
skip creating it. By default, when footer is not
specified, if one or more buttons have been added to
the panel the footer will be created automatically,
otherwise it will not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="Boolean" required="false">
					<help><![CDATA[ True to create the header element explicitly, false to
skip creating it. By default, when header is not
specified, if a title is set the header will be created
automatically, otherwise it will not. If a title is set
but header is explicitly set to false, the header will
not be rendered.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="headerAsText" type="Boolean" required="false">
					<help><![CDATA[ True to display the panel title in the header, false to
hide it (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideCollapseTool" type="Boolean" required="false">
					<help><![CDATA[ True to hide the expand/collapse toggle button when
collapsible = true, false to display it (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="html" type="String" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="htmlJS" type="String/Object" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layout" type="String" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutJS" type="JS" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="manager" type="Ext.WindowGroup" required="false">
					<help><![CDATA[ A reference to the WindowGroup that should manage this
window (defaults to Ext.WindowMgr).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="maximizable" type="Boolean" required="false">
					<help><![CDATA[ True to display the 'maximize' tool button and allow
the user to maximize the window, false to hide the
button and disallow maximizing the window (defaults to
false). Note that when a window is maximized, the tool
button will automatically change to a 'restore' button
with the appropriate behavior already built-in that
will restore the window to its previous size.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="maximized" type="Boolean" required="false">
					<help><![CDATA[ True to initially display the window in a maximized
state. (Defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width in pixels of all buttons in this panel
(defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum height in pixels allowed for this window
(defaults to 100). Only applies when resizable = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum width in pixels allowed for this window
(defaults to 200). Only applies when resizable = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minimizable" type="Boolean" required="false">
					<help><![CDATA[ True to display the 'minimize' tool button and allow
the user to minimize the window, false to hide the
button and disallow minimizing the window (defaults to
false). Note that this button provides no
implementation -- the behavior of minimizing a window
is implementation-specific, so the minimize event must
be handled and a custom minimize behavior implemented
for this option to be useful.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="modal" type="Boolean" required="false">
					<help><![CDATA[ True to make the window modal and mask everything
behind it when displayed, false to display it without
restricting access to other UI elements (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="onEsc" type="Function" required="false">
					<help><![CDATA[ Allows override of the built-in processing for the
escape key. Default action is to close the Window
(performing whatever action is specified in
closeAction. To prevent the Window closing when the
escape key is pressed, specify this as Ext.emptyFn (See
Ext.emptyFn).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plain" type="Boolean" required="false">
					<help><![CDATA[ True to render the window body with a transparent
background so that it will blend into the framing
elements, false to add a lighter background color to
visually highlight the body element and separate it
more distinctly from the surrounding frame (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="resizable" type="Boolean" required="false">
					<help><![CDATA[ True to allow user resizing at each edge and corner of
the window, false to disable resizing (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="resizeHandles" type="String" required="false">
					<help><![CDATA[ A valid Ext.Resizable handles config string (defaults
to 'all'). Only applies when resizable = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="resizeHandlesJS" type="JS" required="false">
					<help><![CDATA[ A valid Ext.Resizable handles config string (defaults
to 'all'). Only applies when resizable = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadowOffset" type="Number" required="false">
					<help><![CDATA[ The number of pixels to offset the shadow if displayed
(defaults to 4). Note that this option only applies
when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shim" type="Boolean" required="false">
					<help><![CDATA[ False to disable the iframe shim in browsers which need
one (defaults to true). Note that this option only
applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tbar" type="Object/Array" required="false">
					<help><![CDATA[ The top toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
top toolbar after render, use getTopToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to allow expanding and collapsing the panel (when
collapsible = true) by clicking anywhere in the header
bar, false to allow it only by clicking to tool button
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tools" type="Array" required="false">
					<help><![CDATA[ An array of tool button configs to be added to the
header tool area. When rendered, each tool is stored as
an Element referenced by a public property called
tools. Each tool config may contain the following
properties:  id : StringRequired. The type of tool to
create. Values may be toggle (Created by default when
collapsible is true) close minimize maximize restore
gear pin unpin right left up down refresh minus plus
help search save print  handler : FunctionRequired. The
function to call when clicked. Arguments passed are:
event : Ext.EventObjectThe click event. toolEl :
Ext.ElementThe tool Element. Panel : Ext.PanelThe host
Panel  scope : ObjectThe scope in which to call the
handler. qtip : String/ObjectA tip string, or a config
argument to Ext.QuickTip.register hidden : BooleanTrue
to initially render hidden. on : ObjectA listener
config object specifiying event listeners in the format
of an argument to addListener  Example usage: tools:[{
id:'refresh',    qtip: 'Refresh form Data',    //
hidden:true,    handler: function(event, toolEl,
panel){        // refresh logic    }}] Note that apart
from the toggle tool which is provided when a panel is
collapsible, these tools only provide the visual
button. Any required functionality must be provided by
adding handlers that implement the necessary behavior.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The X position of the left edge of the Window on
initial showing. Defaults to centering the Window
within the width of the Window's container {@link
Ext.Element Element) (The Element that the Window is
rendered to).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The Y position of the top edge of the Window on initial
showing. Defaults to centering the Window within the
height of the Window's container {@link Ext.Element
Element) (The Element that the Window is rendered to).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="show" type="Boolean" required="false">
					<help><![CDATA[ (ColdExt attribute) True to show the window immediately
upon creation (defaults to false)
 ]]></help>
					<values default="false"><value option="true" /><value option="false" /></values>
				</parameter>
		</tag>
		<tag name="ext:xmlreader" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The DomQuery path relative from the record element to
the element that contains a record identifier value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The DomQuery path relative from the record element to
the element that contains a record identifier value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="record" type="String" required="false">
					<help><![CDATA[ The DomQuery path to the repeated element which
contains record information.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="recordJS" type="JS" required="false">
					<help><![CDATA[ The DomQuery path to the repeated element which
contains record information.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="success" type="String" required="false">
					<help><![CDATA[ The DomQuery path to the success attribute used by
forms.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="successJS" type="JS" required="false">
					<help><![CDATA[ The DomQuery path to the success attribute used by
forms.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="totalRecords" type="String" required="false">
					<help><![CDATA[ The DomQuery path from which to retrieve the total
number of records in the dataset. This is only needed
if the whole dataset is not passed in one go, but is
being paged from the remote server.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="totalRecordsJS" type="JS" required="false">
					<help><![CDATA[ The DomQuery path from which to retrieve the total
number of records in the dataset. This is only needed
if the whole dataset is not passed in one go, but is
being paged from the remote server.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ext:xtemplate" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:fileuploadfield" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="name" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="fileUploadField#Int(Rand()*1000)#"></values>
				</parameter>
				<parameter name="label" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#SeparateCaps(attributes.name)#"></values>
				</parameter>
				<parameter name="fieldLabel" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#attributes.label#"></values>
				</parameter>
				<parameter name="width" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="#Application.ColdExt.defaultFieldWidth#"></values>
				</parameter>
				<parameter name="allowBlank" type="Boolean" required="false">
					<help><![CDATA[ False to validate that the value length > 0 (defaults
to true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some structural markup for this
component. When applyTo is used, constituent parts of
the component can also be specified by id or CSS class
name within the main element, and the component being
created may attempt to create its subcomponents from
that markup if applicable. Using this config, a call to
render() is not required. If applyTo is specified, any
value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the component's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreate" type="String" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoCreateJS" type="String/Object" required="false">
					<help><![CDATA[ A DomHelper element spec, or true for a default element
spec (defaults to {tag: "input", type: "text", size:
"20", autocomplete: "off"})
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoEl" type="String" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoElJS" type="String/Object" required="false">
					<help><![CDATA[ A tag name or DomHelper spec to create an element with.
This is intended to create shorthand utility components
inline via JSON. It should not be used for higher level
components which already create their own elements.
Example usage: {xtype:'box', autoEl: 'div',
cls:'my-class'}{xtype:'box', autoEl: {tag:'blockquote',
html:'autoEl is cool!'}} // with DomHelper
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a height of 'auto'. Setting
autoHeight:true means that the browser will manage
height based on the element's contents, and that Ext
will not manage it at all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="blankText" type="String" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="blankTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the allow blank validation
fails (defaults to "This field is required")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonOffset" type="Boolean" required="false">
					<help><![CDATA[ The number of pixels of space reserved between the
button and the text field (defaults to 3). Note that
this only applies if buttonOnly = false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonOnly" type="Boolean" required="false">
					<help><![CDATA[ True to display the file upload field as a button with
no visible text field (defaults to false). If true, all
inherited TextField members will still be available.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonText" type="String" required="false">
					<help><![CDATA[ The button text to display on the upload button
(defaults to 'Browse...'). Note that if you supply a
value for buttonCfg the buttonCfg.text value will be
used instead if available.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonTextJS" type="JS" required="false">
					<help><![CDATA[ The button text to display on the upload button
(defaults to 'Browse...'). Note that if you supply a
value for buttonCfg the buttonCfg.text value will be
used instead if available.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disableKeyFilter" type="Boolean" required="false">
					<help><![CDATA[ True to disable input keystroke filtering (defaults to
false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this component disabled (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClass" type="String" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to apply to an empty field to style the
emptyText (defaults to 'x-form-empty-field'). This
class is automatically added and removed as needed
depending on the current field value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyText" type="String" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="emptyTextJS" type="JS" required="false">
					<help><![CDATA[ The default text to place into an empty field (defaults
to null). Note that this value will be submitted to the
server if this field is enabled and configured with a
name.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClass" type="String" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldClassJS" type="JS" required="false">
					<help><![CDATA[ The default CSS class for the field (defaults to
"x-form-field")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="focusClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when the field receives focus
(defaults to "x-form-focus")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="grow" type="Boolean" required="false">
					<help><![CDATA[ True if this field should automatically grow and shrink
to its content
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="growMax" type="Number" required="false">
					<help><![CDATA[ The maximum width to allow when grow = true (defaults
to 800)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="growMin" type="Number" required="false">
					<help><![CDATA[ The minimum width to allow when grow = true (defaults
to 30)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputType" type="String" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="inputTypeJS" type="JS" required="false">
					<help><![CDATA[ The type attribute for input fields -- e.g. radio,
text, password, file (defaults to "text"). The types
"file" and "password" must be used to render those
field types currently -- there are no separate Ext
components for those. Note that if you use
inputType:'file', emptyText is not supported and should
be avoided.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClass" type="String" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidClassJS" type="JS" required="false">
					<help><![CDATA[ The CSS class to use when marking a field invalid
(defaults to "x-form-invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidText" type="String" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="invalidTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to use when marking a field invalid and
no message is provided (defaults to "The value in this
field is invalid")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskRe" type="RegExp" required="false">
					<help><![CDATA[ An input mask regular expression that will be used to
filter keystrokes that don't match (defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLength" type="Number" required="false">
					<help><![CDATA[ Maximum input field length allowed (defaults to
Number.MAX_VALUE)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maxLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the maximum length validation
fails (defaults to "The maximum length for this field
is {maxLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLength" type="Number" required="false">
					<help><![CDATA[ Minimum input field length required (defaults to 0) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthText" type="String" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minLengthTextJS" type="JS" required="false">
					<help><![CDATA[ Error text to display if the minimum length validation
fails (defaults to "The minimum length for this field
is {minLength}")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFx" type="String" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgFxJS" type="JS" required="false">
					<help><![CDATA[ Experimental The effect used when displaying a
validation message under the field (defaults to
'normal').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTarget" type="String" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="msgTargetJS" type="JS" required="false">
					<help><![CDATA[ The location where error text should display. Should be
one of the following values (defaults to 'qtip'): Value
Description-----------
-------------------------------------------------------
---------------qtip          Display a quick tip when
the user hovers over the fieldtitle         Display a
default browser title attribute popupunder         Add
a block div beneath the field containing the error
textside          Add an error icon to the right of
the field with a popup on hover[element id]  Add the
error text directly to the innerHTML of the specified
element
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="name" type="String" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="nameJS" type="JS" required="false">
					<help><![CDATA[ The field's HTML name attribute (defaults to ""). ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="readOnly" type="Boolean" required="false">
					<help><![CDATA[ True to mark the field as readOnly in HTML (defaults to
false) -- Note: this only sets the element's readOnly
DOM attribute.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="regex" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object to be tested against the
field value during validation (defaults to null). If
available, this regex will be evaluated only after the
basic validators all return true, and will be passed
the current field value. If the test fails, the field
will be marked invalid using regexText.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexText" type="String" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="regexTextJS" type="JS" required="false">
					<help><![CDATA[ The error text to display if regex is used and the test
fails during validation (defaults to "")
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selectOnFocus" type="Boolean" required="false">
					<help><![CDATA[ True to automatically select any existing field text
when the field receives input focus (defaults to false)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="stripCharsRe" type="RegExp" required="false">
					<help><![CDATA[ A JavaScript RegExp object used to strip unwanted
content from the value before validation (defaults to
null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabIndex" type="Number" required="false">
					<help><![CDATA[ The tabIndex for this field. Note this only applies to
fields that are rendered, not those which are built via
applyTo (defaults to undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validateOnBlur" type="Boolean" required="false">
					<help><![CDATA[ Whether the field should validate when it loses focus
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validationDelay" type="Number" required="false">
					<help><![CDATA[ The length of time in milliseconds after user input
begins until validation is initiated (defaults to 250)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEvent" type="String" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="validationEventJS" type="String/Boolean" required="false">
					<help><![CDATA[ The event that should initiate field validation. Set to
false to disable automatic validation (defaults to
"keyup").
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="validator" type="Function" required="false">
					<help><![CDATA[ A custom validation function to be called during field
validation (defaults to null). If specified, this
function will be called only after the built-in
validations (allowBlank, minLength, maxLength) and any
configured vtype all return true. This function will be
passed the current field value and expected to return
boolean true if the value is valid or a string error
message if invalid.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="value" type="String" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="valueJS" type="Mixed" required="false">
					<help><![CDATA[ A value to initialize this field with (defaults to
undefined).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtype" type="String" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeJS" type="JS" required="false">
					<help><![CDATA[ A validation type name as defined in Ext.form.VTypes
(defaults to null)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeText" type="String" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="vtypeTextJS" type="JS" required="false">
					<help><![CDATA[ A custom error message to display in place of the
default message provided for the vtype currently set
for this field (defaults to ''). Only applies if vtype
is set, else ignored.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:filtercolumn" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="active" type="Boolean" required="false">
					<help><![CDATA[ Indicates the default status of the filter (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="dataIndex" type="String" required="false">
					<help><![CDATA[ The Ext.data.Store data index of the field this filter
represents. The dataIndex does not actually have to
exist in the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dataIndexJS" type="JS" required="false">
					<help><![CDATA[ The Ext.data.Store data index of the field this filter
represents. The dataIndex does not actually have to
exist in the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="type" type="String" required="false">
					<help><![CDATA[ The type of field to use for filtering; boolean, date,
list, numeric or string.
 ]]></help>
					<values default=""><value option="boolean" /><value option="date" /><value option="list" /><value option="numeric" /><value option="string" /></values>
				</parameter>
				<parameter name="typeJS" type="JS" required="false">
					<help><![CDATA[ The type of field to use for filtering; boolean, date,
list, numeric or string.
 ]]></help>
					<values default=""><value option="boolean" /><value option="date" /><value option="list" /><value option="numeric" /><value option="string" /></values>
				</parameter>
				<parameter name="options" type="Array" required="false">
					<help><![CDATA[ An array of strings to use as options in the filter
picklist when type="list"
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:gridaction" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="callback" type="Function" required="false">
					<help><![CDATA[ Optional. Function to call if the action icon is
clicked. This function is called with same signature as
action event and in its original scope. If you need to
call it in different scope or with another signature
use createCallback or createDelegate functions. Works
for statically defined actions. Use callbacks
configuration options for store bound actions.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cb" type="Function" required="false">
					<help><![CDATA[ Shortcut for callback. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconIndex" type="String" required="false">
					<help><![CDATA[ Optional, however either iconIndex or iconCls must be
configured. Field name of the field of the grid store
record that contains css class of the icon to show. If
configured, shown icons can vary depending of the value
of this field.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconIndexJS" type="JS" required="false">
					<help><![CDATA[ Optional, however either iconIndex or iconCls must be
configured. Field name of the field of the grid store
record that contains css class of the icon to show. If
configured, shown icons can vary depending of the value
of this field.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ css class of the icon to show. It is ignored if
iconIndex is configured. Use this if you want static
icons that are not base on the values in the record.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ css class of the icon to show. It is ignored if
iconIndex is configured. Use this if you want static
icons that are not base on the values in the record.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hide" type="Boolean" required="false">
					<help><![CDATA[ Optional. True to hide this action while still have a
space in  the grid column allocated to it. IMO, it
doesn't make too much sense, use hideIndex instead.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideIndex" type="String" required="false">
					<help><![CDATA[ Optional. Field name of the field of the grid store
record that contains hide flag (falsie [null, '', 0,
false, undefined] to show, anything else to hide).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideIndexJS" type="JS" required="false">
					<help><![CDATA[ Optional. Field name of the field of the grid store
record that contains hide flag (falsie [null, '', 0,
false, undefined] to show, anything else to hide).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipIndex" type="String" required="false">
					<help><![CDATA[ Optional. Field name of the field of the grid store
record that contains tooltip text. If configured, the
tooltip texts are taken from the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipIndexJS" type="JS" required="false">
					<help><![CDATA[ Optional. Field name of the field of the grid store
record that contains tooltip text. If configured, the
tooltip texts are taken from the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltip" type="String" required="false">
					<help><![CDATA[ Optional. Tooltip text to use as icon tooltip. It is
ignored if qtipIndex is configured. Use this if you
want static tooltips that are not taken from the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltipJS" type="JS" required="false">
					<help><![CDATA[ Optional. Tooltip text to use as icon tooltip. It is
ignored if qtipIndex is configured. Use this if you
want static tooltips that are not taken from the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtip" type="String" required="false">
					<help><![CDATA[ Synonym for tooltip. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipJS" type="JS" required="false">
					<help><![CDATA[ Synonym for tooltip. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textIndex" type="String" required="false">
					<help><![CDATA[ Optional. Field name of the field of the grids store
record that contains text to display on the right side
of the icon. If configured, the text shown is taken
from record.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textIndexJS" type="JS" required="false">
					<help><![CDATA[ Optional. Field name of the field of the grids store
record that contains text to display on the right side
of the icon. If configured, the text shown is taken
from record.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="text" type="String" required="false">
					<help><![CDATA[ Optional. Text to display on the right side of the
icon. Use this if you want static text that are not
taken from record. Ignored if textIndex is set.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textJS" type="JS" required="false">
					<help><![CDATA[ Optional. Text to display on the right side of the
icon. Use this if you want static text that are not
taken from record. Ignored if textIndex is set.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ Optional. Style to apply to action icon container. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ Optional. Style to apply to action icon container. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:gridcellactions" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="callback" type="Function callback (optional) Function to call if the action icon is clicked. This function is called with same signature as action event and in its original scope. If you need to call it in different scope or with another signature use createCallback or createDelegate functions. Works for statically defined actions. Use callbacks configuration options for store bound actions." required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cb" type="Function cb Shortcut for callback." required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconIndex" type="String" required="false">
					<help><![CDATA[ (optional) However either iconIndex or iconCls must be
configured. Field name of the field of the grid store
record that contains css class of the icon to show. If
configured, shown icons can vary depending of the value
of this field.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ iconCls. css class of the icon to show. It is ignored
if iconIndex is configured. Use this if you want static
icons that are not base on the values in the record.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipIndex" type="String" required="false">
					<help><![CDATA[ (optional) Field name of the field of the grid store
record that contains tooltip text. If configured, the
tooltip texts are taken from the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltip" type="String" required="false">
					<help><![CDATA[ (optional) Tooltip text to use as icon tooltip. It is
ignored if qtipIndex is configured. Use this if you
want static tooltips that are not taken from the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtip" type="String}" required="false">
					<help><![CDATA[ (optional) Synonym for tooltip ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ (optional) Style to apply to action icon container. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hide" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="false"></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ (optional) ??. ]]></help>
					<values default="display"></values>
				</parameter>
		</tag>
		<tag name="ux:gridcolumncellactions" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="align" type="String" required="false">
					<help><![CDATA[ (optional) Set the CSS text-align property of the
column. Defaults to undefined.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="css" type="String" required="false">
					<help><![CDATA[ (optional) Set custom CSS for all table cells in the
column (excluding headers). Defaults to undefined.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dataIndex" type="String" required="false">
					<help><![CDATA[ (optional) The name of the field in the grid's
Ext.data.Store's Ext.data.Record definition from which
to draw the column's value. If not specified, the
column's index is used as an index into the Record's
data Array.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="editor" type="Ext.form.Field" required="false">
					<help><![CDATA[ (optional) The Ext.form.Field to use when editing
values in this column if editing is supported by the
grid.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fixed" type="Boolean" required="false">
					<help><![CDATA[ (optional) True if the column width cannot be changed.
Defaults to false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="String" required="false">
					<help><![CDATA[ The header text to display in the Grid view. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ (optional) True to hide the column. Defaults to false. ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideable" type="Boolean" required="false">
					<help><![CDATA[ (optional) Specify as false to prevent the user from
hiding this column. Defaults to true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ (optional) Defaults to the column's initial ordinal
position. A name which identifies this column. The id
is used to create a CSS class name which is applied to
all table cells (including headers) in that column. The
class name takes the form of x-grid3-td-idHeader cells
will also recieve this class name, but will also have
the class x-grid3-hd, so to target header cells, use
CSS selectors such as:.x-grid3-hd.x-grid3-td-idThe
Ext.grid.Grid.autoExpandColumn grid config option
references the column via this identifier.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ A config object containing one or more event handlers
to be added to this object during initialization. This
should be a valid listeners config object as specified
in the addListener example for attaching multiple
handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuDisabled" type="Boolean" required="false">
					<help><![CDATA[ (optional) True to disable the column menu. Defaults to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderer" type="Function" required="false">
					<help><![CDATA[ (optional) A function used to generate HTML markup for
a cell given the cell's data value. See setRenderer. If
not specified, the default renderer uses the raw data
value.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="resizable" type="Boolean" required="false">
					<help><![CDATA[ (optional) False to disable column resizing. Defaults
to true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="sortable" type="Boolean" required="false">
					<help><![CDATA[ (optional) True if sorting is to be allowed on this
column. Defaults to the value of the defaultSortable
property. Whether local/remote sorting is used is
specified in Ext.data.Store.remoteSort.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tooltip" type="String" required="false">
					<help><![CDATA[ (optional) A text string to use as the column header's
tooltip. If Quicktips are enabled, this value will be
used as the text of the quick tip, otherwise it will be
set as the header's HTML title attribute. Defaults to
''.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ (optional) The initial width in pixels of the column.
Using this instead of Ext.grid.Grid.autoSizeColumns is
more efficient.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:gridfilters" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="filters" type="Array" required="false">
					<help><![CDATA[ An array of objects which define the type and dataIndex
properties of the filter which matches the dataIndex of
the grid columns.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:gridgroupaction" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="align" type="String" required="false">
					<help><![CDATA[ Set it to 'left' to place action icon next to the group
header text. (defaults to undefined = icons are placed
at the right side of the group header.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="alignJS" type="JS" required="false">
					<help><![CDATA[ Set it to 'left' to place action icon next to the group
header text. (defaults to undefined = icons are placed
at the right side of the group header.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="callback" type="Function" required="false">
					<help><![CDATA[ Optional. Function to call if the action icon is
clicked. This function is called with same signature as
action event and in its original scope. If you need to
call it in different scope or with another signature
use createCallback or createDelegate functions. Works
for statically defined actions. Use callbacks
configuration options for store bound actions.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cb" type="Function" required="false">
					<help><![CDATA[ Shortcut for callback. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconIndex" type="String" required="false">
					<help><![CDATA[ Optional, however either iconIndex or iconCls must be
configured. Field name of the field of the grid store
record that contains css class of the icon to show. If
configured, shown icons can vary depending of the value
of this field.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconIndexJS" type="JS" required="false">
					<help><![CDATA[ Optional, however either iconIndex or iconCls must be
configured. Field name of the field of the grid store
record that contains css class of the icon to show. If
configured, shown icons can vary depending of the value
of this field.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ css class of the icon to show. It is ignored if
iconIndex is configured. Use this if you want static
icons that are not base on the values in the record.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ css class of the icon to show. It is ignored if
iconIndex is configured. Use this if you want static
icons that are not base on the values in the record.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hide" type="Boolean" required="false">
					<help><![CDATA[ Optional. True to hide this action while still have a
space in  the grid column allocated to it. IMO, it
doesn't make too much sense, use hideIndex instead.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideIndex" type="String" required="false">
					<help><![CDATA[ Optional. Field name of the field of the grid store
record that contains hide flag (falsie [null, '', 0,
false, undefined] to show, anything else to hide).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideIndexJS" type="JS" required="false">
					<help><![CDATA[ Optional. Field name of the field of the grid store
record that contains hide flag (falsie [null, '', 0,
false, undefined] to show, anything else to hide).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipIndex" type="String" required="false">
					<help><![CDATA[ Optional. Field name of the field of the grid store
record that contains tooltip text. If configured, the
tooltip texts are taken from the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipIndexJS" type="JS" required="false">
					<help><![CDATA[ Optional. Field name of the field of the grid store
record that contains tooltip text. If configured, the
tooltip texts are taken from the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltip" type="String" required="false">
					<help><![CDATA[ Optional. Tooltip text to use as icon tooltip. It is
ignored if qtipIndex is configured. Use this if you
want static tooltips that are not taken from the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tooltipJS" type="JS" required="false">
					<help><![CDATA[ Optional. Tooltip text to use as icon tooltip. It is
ignored if qtipIndex is configured. Use this if you
want static tooltips that are not taken from the store.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtip" type="String" required="false">
					<help><![CDATA[ Synonym for tooltip. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="qtipJS" type="JS" required="false">
					<help><![CDATA[ Synonym for tooltip. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textIndex" type="String" required="false">
					<help><![CDATA[ Optional. Field name of the field of the grids store
record that contains text to display on the right side
of the icon. If configured, the text shown is taken
from record.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textIndexJS" type="JS" required="false">
					<help><![CDATA[ Optional. Field name of the field of the grids store
record that contains text to display on the right side
of the icon. If configured, the text shown is taken
from record.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="text" type="String" required="false">
					<help><![CDATA[ Optional. Text to display on the right side of the
icon. Use this if you want static text that are not
taken from record. Ignored if textIndex is set.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="textJS" type="JS" required="false">
					<help><![CDATA[ Optional. Text to display on the right side of the
icon. Use this if you want static text that are not
taken from record. Ignored if textIndex is set.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ Optional. Style to apply to action icon container. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ Optional. Style to apply to action icon container. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:gridgroupsummary" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="dummy" type="Boolean" required="false">
					<help><![CDATA[ This is a dummy attribute. ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:gridpanelresizer" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum height of the grid panel in pixels. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:gridrowactions" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="actions" type="Array" required="false">
					<help><![CDATA[ Array of action configuration objects. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="actionEvent" type="String" required="false">
					<help><![CDATA[ Event to trigger actions, e.g. click, dblclick,
mouseover (defaults to 'click').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="actionEventJS" type="JS" required="false">
					<help><![CDATA[ Event to trigger actions, e.g. click, dblclick,
mouseover (defaults to 'click').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ true to calculate field width for iconic actions only
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="callbacks" type="Object" required="false">
					<help><![CDATA[ iconCls keyed object that contains callback functions.
For example: callbacks:{ 'icon-open':function(...)
{...}, 'icon-save':function(...) {...} }
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="groupActions" type="Array" required="false">
					<help><![CDATA[ Array of action to use for group headers of grouping
grids. These actions support static icons, texts and
tooltips same way as actions.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="header" type="String" required="false">
					<help><![CDATA[ Text to be displayed in the Actions column header. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="headerJS" type="JS" required="false">
					<help><![CDATA[ Text to be displayed in the Actions column header. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuDisabled" type="Boolean" required="false">
					<help><![CDATA[ No sense to display header menu for this column. ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="sortable" type="Boolean" required="false">
					<help><![CDATA[ Usually it has no sense to sort by this column. ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tplGroup" type="Template" required="false">
					<help><![CDATA[ Template for group actions. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tplRow" type="Template" required="false">
					<help><![CDATA[ Template for row actions. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ Width of the actions column in pixels. ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:gridrowexpander" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="tpl" type="Template" required="false">
					<help><![CDATA[ The Template to use for the body of the row when
expanded.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:gridsearch" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="iconCls" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoFocus" type="Boolean" required="false">
					<help><![CDATA[ true to try to focus the input field on each store load
(defaults to undefined)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="searchText" type="String" required="false">
					<help><![CDATA[ Text to display on menu button ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="searchTextJS" type="JS" required="false">
					<help><![CDATA[ Text to display on menu button ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="searchTipText" type="String" required="false">
					<help><![CDATA[ Text to display as input tooltip. Set to '' for no
tooltip
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="searchTipTextJS" type="JS" required="false">
					<help><![CDATA[ Text to display as input tooltip. Set to '' for no
tooltip
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selectAllText" type="String" required="false">
					<help><![CDATA[ Text to display on menu item that selects all fields ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="selectAllTextJS" type="JS" required="false">
					<help><![CDATA[ Text to display on menu item that selects all fields ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="position" type="String" required="false">
					<help><![CDATA[ Where to display the search controls. Valid values are
top and bottom (defaults to bottom). Corresponding
toolbar has to exist at least with mimimum
configuration tbar:[] for position:top or bbar:[] for
position bottom. Plugin does NOT create any toolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="positionJS" type="JS" required="false">
					<help><![CDATA[ Where to display the search controls. Valid values are
top and bottom (defaults to bottom). Corresponding
toolbar has to exist at least with mimimum
configuration tbar:[] for position:top or bbar:[] for
position bottom. Plugin does NOT create any toolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ Icon class for menu button (defaults to icon-magnifier)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ Icon class for menu button (defaults to icon-magnifier)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="checkIndexes" type="String" required="false">
					<help><![CDATA[ Which indexes to check by default. Can be either 'all'
for all indexes or array of dataIndex names, e.g.
['persFirstName', 'persLastName']
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="checkIndexesJS" type="String/Array" required="false">
					<help><![CDATA[ Which indexes to check by default. Can be either 'all'
for all indexes or array of dataIndex names, e.g.
['persFirstName', 'persLastName']
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disableIndexes" type="Array" required="false">
					<help><![CDATA[ Array of index names to disable (not show in the menu),
e.g. ['persTitle', 'persTitle2']
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dateFormat" type="String" required="false">
					<help><![CDATA[ how to format date values. If undefined (the default)
date is formatted as configured in colummn model
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="dateFormatJS" type="JS" required="false">
					<help><![CDATA[ how to format date values. If undefined (the default)
date is formatted as configured in colummn model
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="showSelectAll" type="Boolean" required="false">
					<help><![CDATA[ Select All item is shown in menu if true (defaults to
true)
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="menuStyle" type="String" required="false">
					<help><![CDATA[ Valid values are 'checkbox' and 'radio'. If menuStyle
is radio then only one field can be searched at a time
and selectAll is automatically switched off.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="menuStyleJS" type="JS" required="false">
					<help><![CDATA[ Valid values are 'checkbox' and 'radio'. If menuStyle
is radio then only one field can be searched at a time
and selectAll is automatically switched off.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minChars" type="Number" required="false">
					<help><![CDATA[ minimum characters to type before the request is made.
If undefined (the default) the trigger field shows
magnifier icon and you need to click it or press enter
for search to start. If it is defined and greater than
0 then maginfier is not shown and search starts after
minChars are typed.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minCharsTipText" type="String" required="false">
					<help><![CDATA[ Tooltip to display if minChars is > 0 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minCharsTipTextJS" type="JS" required="false">
					<help><![CDATA[ Tooltip to display if minChars is > 0 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="mode" type="String" required="false">
					<help><![CDATA[ Use 'remote' for remote stores or 'local' for local
stores. If mode is local no data requests are sent to
server the grid's store is filtered instead (defaults
to 'remote')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="modeJS" type="JS" required="false">
					<help><![CDATA[ Use 'remote' for remote stores or 'local' for local
stores. If mode is local no data requests are sent to
server the grid's store is filtered instead (defaults
to 'remote')
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="readonlyIndexes" type="Array" required="false">
					<help><![CDATA[ Array of index names to disable (show in menu
disabled), e.g. ['persTitle', 'persTitle2']
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ Width of input field in pixels (defaults to 100) ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ xtype is usually not used to instantiate this plugin
but you have a chance to identify it
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ xtype is usually not used to instantiate this plugin
but you have a chance to identify it
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="paramNames" type="Object" required="false">
					<help><![CDATA[ Params name map (defaults to {fields:'fields',
query:'query'}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:portal" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="xtype" type="undefined" required="false">
					<help><![CDATA[  ]]></help>
					<values default="portal"></values>
				</parameter>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
true if the Ext.Fx class is available, otherwise
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animFloat" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel that will
close again once the user mouses out of that panel (or
clicks out if autoHide = false). Setting animFloat to
false will prevent the open and close of these floated
panels from being animated (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some panel-specific structural
markup. When applyTo is used, constituent parts of the
panel can be specified by CSS class name within the
main element, and the panel will automatically create
those components from that markup. Any required
components not specified in the markup will be
autogenerated if necessary. The following class names
are supported (baseCls will be replaced by baseCls):
baseCls + '-header' baseCls + '-header-text' baseCls +
'-bwrap' baseCls + '-tbar' baseCls + '-body' baseCls +
'-bbar' baseCls + '-footer' Using this config, a call
to render() is not required. If applyTo is specified,
any value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the panel's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some panel-specific structural
markup. When applyTo is used, constituent parts of the
panel can be specified by CSS class name within the
main element, and the panel will automatically create
those components from that markup. Any required
components not specified in the markup will be
autogenerated if necessary. The following class names
are supported (baseCls will be replaced by baseCls):
baseCls + '-header' baseCls + '-header-text' baseCls +
'-bwrap' baseCls + '-tbar' baseCls + '-body' baseCls +
'-bbar' baseCls + '-footer' Using this config, a call
to render() is not required. If applyTo is specified,
any value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the panel's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Setting autoHeight:true
means that the browser will manage the panel's height
based on its contents, and that Ext will not manage it
at all. If the panel is within a layout that manages
dimensions (fit, border, etc.) then setting
autoHeight:true can cause issues with scrolling and
will not generally work as expected since the panel
will take on the height of its contents rather than the
height required by the Ext layout.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHide" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel. If autoHide
is true, the panel will automatically hide after the
user mouses out of the panel. If autoHide is false, the
panel will continue to display until the user clicks
outside of the panel (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoLoad" type="String" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoLoadJS" type="Object/String/Function" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoScroll" type="Boolean" required="false">
					<help><![CDATA[ True to use overflow:'auto' on the panel's body element
and show scroll bars automatically when necessary,
false to clip any overflowing content (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bbar" type="Object/Array" required="false">
					<help><![CDATA[ The bottom toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
bottom toolbar after render, use getBottomToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyBorder" type="Boolean" required="false">
					<help><![CDATA[ True to display an interior border on the body element
of the panel, false to hide it (defaults to true). This
only applies when border == true. If border == true and
bodyBorder == false, the border will display as a 1px
wide inset border, giving the entire body element an
inset appearance.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyle" type="String" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyleJS" type="String/Object/Function" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the panel's body
element, false to hide them (defaults to true). By
default, the border is a 2px wide inset border, but
this can be further altered by setting bodyBorder to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonAlign" type="String" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonAlignJS" type="JS" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttons" type="Array" required="false">
					<help><![CDATA[ An array of Ext.Buttons or Ext.Button configs used to
add buttons to the footer of this panel.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cmargins" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the collapsed state in the format:{    top:
(top margin),    right: (right margin),    bottom:
(bottom margin)    left: (left margin),} May also be a
string containing space-separated, numeric margin
values. The order of the sides associated with each
value matches the way CSS processes margin values.  If
there is only one value, it applies to all sides. If
there are two values, the top and bottom borders are
set to the first value and the right and left are set
to the second. If there are three values, the top is
set to the first value, the left and right are set to
the second, and the bottom is set to the third. If
there are four values, they apply to the top, right,
bottom, and left, respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseFirst" type="Boolean" required="false">
					<help><![CDATA[ True to make sure the collapse/expand toggle button
always renders first (to the left of) any other tools
in the panel's title bar, false to render it last
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapseMode" type="String" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseModeJS" type="JS" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ By default, collapsible regions will be visible when
rendered. Set the collapsed config to true to render
the region as collapsed.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel collapsed, false to render it
expanded (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to allow the user to collapse this region
(defaults to false). If true, an expand/collapse tool
button will automatically be rendered into the title
bar of the region, otherwise the button will not be
shown. Note that a title bar is required to display the
toggle button -- if no region title is specified, the
region will only be collapsible if collapseMode is set
to 'mini'.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to make the panel collapsible and have the
expand/collapse toggle button automatically rendered
into the header tool button area, false to keep the
panel statically sized with no button (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsibleSplitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsibleSplitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentEl" type="String" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentElJS" type="JS" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this panel disabled (default is false). An
important note when using the disabled config on panels
is that IE will often fail to initialize the disabled
mask element correectly if the panel's layout has not
yet completed by the time the Panel is disabled during
the render process. If you experience this issue, you
may need to instead use the afterlayout event to
initialize the disabled state: new Ext.Panel({    ...
listeners: {        'afterlayout': {            fn:
function(p){                p.disable();            },
single: true // important, as many layouts
can occur        }    }});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of this Panel (defaults to
false). For custom drag/drop implementations, an
Ext.Panel.DD config could also be passed in this config
instead of true. Ext.Panel.DD is an internal,
undocumented class which moves a proxy Element around
in place of the Panel's element, but provides no other
behaviour during dragging or on drop. It is a subclass
of Ext.dd.DragSource, so behaviour may be added by
implementing the interface methods of Ext.dd.DragDrop
eg: new Ext.Panel({    title: 'Drag me',    x: 100,
y: 100,    renderTo: Ext.getBody(),    floating: true,
frame: true,    width: 400,    height: 200,
draggable: {//      Config option of Ext.Panel.DD
class.//      It's a floating Panel, so do not show a
placeholder proxy in the original position.
insertProxy: false,//      Called for each mousemove
event while dragging the DD object.        onDrag :
function(e){//          Record the x,y position of the
drag proxy so that we can//          position the Panel
at end of drag.            var pel =
this.proxy.getEl();            this.x =
pel.getLeft(true);            this.y =
pel.getTop(true);//          Keep the Shadow aligned if
there is one.            var s =
this.panel.getEl().shadow;            if (s) {
s.realign(this.x, this.y, pel.getWidth(),
pel.getHeight());            }        },//      Called
on the mouseup event.        endDrag : function(e){
this.panel.setPosition(this.x, this.y);        }
}}).show();
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="elements" type="String" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="elementsJS" type="JS" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="floatable" type="Boolean" required="false">
					<help><![CDATA[ True to allow clicking a collapsed region's bar to
display the region's panel floated above the layout,
false to force the user to fully expand a collapsed
region by clicking the expand button to see it again
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="floating" type="Boolean" required="false">
					<help><![CDATA[ True to float the panel (absolute position it with
automatic shimming and shadow), false to display it
inline where it is rendered (defaults to false). Note
that by default, setting floating to true will cause
the panel to display at negative offsets so that it is
hidden -- because the panel is absolute positioned, the
position must be set explicitly after render (e.g.,
myPanel.setPosition(100,100);). Also, when floating a
panel you should always assign a fixed width, otherwise
it will be auto width and will expand to fill to the
right edge of the viewport.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="footer" type="Boolean" required="false">
					<help><![CDATA[ True to create the footer element explicitly, false to
skip creating it. By default, when footer is not
specified, if one or more buttons have been added to
the panel the footer will be created automatically,
otherwise it will not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="frame" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel with custom rounded borders,
false to render with plain 1px square borders (defaults
to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="Boolean" required="false">
					<help><![CDATA[ True to create the header element explicitly, false to
skip creating it. By default, when header is not
specified, if a title is set the header will be created
automatically, otherwise it will not. If a title is set
but header is explicitly set to false, the header will
not be rendered.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="headerAsText" type="Boolean" required="false">
					<help><![CDATA[ True to display the panel title in the header, false to
hide it (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideCollapseTool" type="Boolean" required="false">
					<help><![CDATA[ True to hide the expand/collapse toggle button when
collapsible = true, false to display it (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="html" type="String" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="htmlJS" type="String/Object" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layout" type="String" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutJS" type="JS" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="margins" type="String" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="marginsJS" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width in pixels of all buttons in this panel
(defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum allowable height in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum allowable width in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events to
handle anything that is sensitive to the current size
of the viewport. This value is typically managed by the
chosen layout and should not need to be set manually.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="region" type="String" required="false">
					<help><![CDATA[ The position within the viewport to attach this
component to. The 'center' region is always required
when using a viewport.
 ]]></help>
					<values default=""><value option="center" /><value option="east" /><value option="north" /><value option="south" /><value option="west" /></values>
				</parameter>
				<parameter name="regionJS" type="JS" required="false">
					<help><![CDATA[ The position within the viewport to attach this
component to. The 'center' region is always required
when using a viewport.
 ]]></help>
					<values default=""><value option="center" /><value option="east" /><value option="north" /><value option="south" /><value option="west" /></values>
				</parameter>
				<parameter name="renderHidden" type="Boolean" required="false">
					<help><![CDATA[ True to hide each contained item on render (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadowOffset" type="Number" required="false">
					<help><![CDATA[ The number of pixels to offset the shadow if displayed
(defaults to 4). Note that this option only applies
when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shim" type="Boolean" required="false">
					<help><![CDATA[ False to disable the iframe shim in browsers which need
one (defaults to true). Note that this option only
applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="split" type="Boolean" required="false">
					<help><![CDATA[ True to display a Ext.SplitBar between this region and
its neighbor, allowing the user to resize the regions
dynamically (defaults to false). When split == true, it
is common to specify a minSize and maxSize for the
BoxComponent representing the region. These are not
native configs of BoxComponent, and are used only by
this class.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="splitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="splitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tbar" type="Object/Array" required="false">
					<help><![CDATA[ The top toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
top toolbar after render, use getTopToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to allow expanding and collapsing the panel (when
collapsible = true) by clicking anywhere in the header
bar, false to allow it only by clicking to tool button
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tools" type="Array" required="false">
					<help><![CDATA[ An array of tool button configs to be added to the
header tool area. When rendered, each tool is stored as
an Element referenced by a public property called
tools. Each tool config may contain the following
properties:  id : StringRequired. The type of tool to
create. Values may be toggle (Created by default when
collapsible is true) close minimize maximize restore
gear pin unpin right left up down refresh minus plus
help search save print  handler : FunctionRequired. The
function to call when clicked. Arguments passed are:
event : Ext.EventObjectThe click event. toolEl :
Ext.ElementThe tool Element. Panel : Ext.PanelThe host
Panel  scope : ObjectThe scope in which to call the
handler. qtip : String/ObjectA tip string, or a config
argument to Ext.QuickTip.register hidden : BooleanTrue
to initially render hidden. on : ObjectA listener
config object specifiying event listeners in the format
of an argument to addListener  Example usage: tools:[{
id:'refresh',    qtip: 'Refresh form Data',    //
hidden:true,    handler: function(event, toolEl,
panel){        // refresh logic    }}] Note that apart
from the toggle tool which is provided when a panel is
collapsible, these tools only provide the visual
button. Any required functionality must be provided by
adding handlers that implement the necessary behavior.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="useSplitTips" type="Boolean" required="false">
					<help><![CDATA[ True to display a tooltip when the user hovers over a
region's split bar (defaults to false). The tooltip
text will be the value of either splitTip or
collapsibleSplitTip as appropriate.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:portalcolumn" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="var" type="JS Variable" required="false">
					<help><![CDATA[ The JavaScript variable name that this component will
be assigned to. NOTE: You should only use the var
attribute when this tags parent is the onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
		<tag name="ux:portlet" creator="8" single="false" xmlstyle="true">
			<help><![CDATA[ ]]></help>
				<parameter name="activeItem" type="String" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="activeItemJS" type="String/Number" required="false">
					<help><![CDATA[ A string component id or the numeric index of the
component that should be initially activated within the
container's layout on render. For example, activeItem:
'item-1' or activeItem: 0 (index 0 = the first item in
the container's collection). activeItem only applies to
layout styles that can display items one at a time
(like Ext.layout.Accordion, Ext.layout.CardLayout and
Ext.layout.FitLayout). Related to
Ext.layout.ContainerLayout.activeItem.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="allowDomMove" type="Boolean" required="false">
					<help><![CDATA[ Whether the component can move the Dom node when
rendering (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to animate the transition when the panel is
collapsed, false to skip the animation (defaults to
true if the Ext.Fx class is available, otherwise
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="animFloat" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel that will
close again once the user mouses out of that panel (or
clicks out if autoHide = false). Setting animFloat to
false will prevent the open and close of these floated
panels from being animated (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="applyTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some panel-specific structural
markup. When applyTo is used, constituent parts of the
panel can be specified by CSS class name within the
main element, and the panel will automatically create
those components from that markup. Any required
components not specified in the markup will be
autogenerated if necessary. The following class names
are supported (baseCls will be replaced by baseCls):
baseCls + '-header' baseCls + '-header-text' baseCls +
'-bwrap' baseCls + '-tbar' baseCls + '-body' baseCls +
'-bbar' baseCls + '-footer' Using this config, a call
to render() is not required. If applyTo is specified,
any value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the panel's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="applyToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
corresponding to a DIV that is already present in the
document that specifies some panel-specific structural
markup. When applyTo is used, constituent parts of the
panel can be specified by CSS class name within the
main element, and the panel will automatically create
those components from that markup. Any required
components not specified in the markup will be
autogenerated if necessary. The following class names
are supported (baseCls will be replaced by baseCls):
baseCls + '-header' baseCls + '-header-text' baseCls +
'-bwrap' baseCls + '-tbar' baseCls + '-body' baseCls +
'-bbar' baseCls + '-footer' Using this config, a call
to render() is not required. If applyTo is specified,
any value passed for renderTo will be ignored and the
target element's parent node will automatically be used
as the panel's container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoDestroy" type="Boolean" required="false">
					<help><![CDATA[ If true the container will automatically destroy any
contained component that is removed from it, else
destruction must be handled manually (defaults to
true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHeight" type="Boolean" required="false">
					<help><![CDATA[ True to use height:'auto', false to use fixed height
(defaults to false). Note: Setting autoHeight:true
means that the browser will manage the panel's height
based on its contents, and that Ext will not manage it
at all. If the panel is within a layout that manages
dimensions (fit, border, etc.) then setting
autoHeight:true can cause issues with scrolling and
will not generally work as expected since the panel
will take on the height of its contents rather than the
height required by the Ext layout.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoHide" type="Boolean" required="false">
					<help><![CDATA[ When a collapsed region's bar is clicked, the region's
panel will be displayed as a floated panel. If autoHide
is true, the panel will automatically hide after the
user mouses out of the panel. If autoHide is false, the
panel will continue to display until the user clicks
outside of the panel (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoLoad" type="String" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoLoadJS" type="Object/String/Function" required="false">
					<help><![CDATA[ A valid url spec according to the Updater
Ext.Updater.update method. If autoLoad is not null, the
panel will attempt to load its contents immediately
upon render. The URL will become the default URL for
this panel's body element, so it may be refreshed at
any time.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="autoScroll" type="Boolean" required="false">
					<help><![CDATA[ True to use overflow:'auto' on the panel's body element
and show scroll bars automatically when necessary,
false to clip any overflowing content (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoShow" type="Boolean" required="false">
					<help><![CDATA[ True if the component should check for hidden classes
(e.g. 'x-hidden' or 'x-hide-display') and remove them
on render (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="autoWidth" type="Boolean" required="false">
					<help><![CDATA[ True to use width:'auto', false to use fixed width
(defaults to false). Note: Although many components
inherit this config option, not all will function as
expected with a width of 'auto'. Setting autoWidth:true
means that the browser will manage width based on the
element's contents, and that Ext will not manage it at
all.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="baseCls" type="String" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="baseClsJS" type="JS" required="false">
					<help><![CDATA[ The base CSS class to apply to this panel's element
(defaults to 'x-panel').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bbar" type="Object/Array" required="false">
					<help><![CDATA[ The bottom toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
bottom toolbar after render, use getBottomToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyBorder" type="Boolean" required="false">
					<help><![CDATA[ True to display an interior border on the body element
of the panel, false to hide it (defaults to true). This
only applies when border == true. If border == true and
bodyBorder == false, the border will display as a 1px
wide inset border, giving the entire body element an
inset appearance.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bodyCfg" type="Object" required="false">
					<help><![CDATA[ A DomHelper configuration object specifying the element
structure of this Panel's body Element. This may be
used to force the body Element to use a different form
of markup than is created automatically. An example of
this might be to create a child Panel containing custom
content, such as a header, or forcing centering of all
Panel content by having the body be a  element:new
Ext.Panel({    title: 'New Message',    collapsible:
true,    renderTo: Ext.getBody(),    width: 400,
bodyCfg: {        tag: 'center',        cls:
'x-panel-body'    },    items: [{        border: false,
header: false,        bodyCfg: {tag: 'h2', html:
'Message'}    }, {        xtype: 'textarea',
style: {            width: '95%',
marginBottom: '10px'        }    },        new
Ext.Button({            text: 'Send',
minWidth: '100',            style: {
marginBottom: '10px'            }        })    ]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyle" type="String" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="bodyStyleJS" type="String/Object/Function" required="false">
					<help><![CDATA[ Custom CSS styles to be applied to the body element in
the format expected by Ext.Element.applyStyles
(defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="border" type="Boolean" required="false">
					<help><![CDATA[ True to display the borders of the panel's body
element, false to hide them (defaults to true). By
default, the border is a 2px wide inset border, but
this can be further altered by setting bodyBorder to
false.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="bufferResize" type="Boolean/Number" required="false">
					<help><![CDATA[ When set to true (100 milliseconds) or a number of
milliseconds, the layout assigned for this container
will buffer the frequency it calculates and does a
re-layout of components. This is useful for heavy
containers or containers with a large quantity of
sub-components for which frequent layout calls would be
expensive.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="buttonAlign" type="String" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttonAlignJS" type="JS" required="false">
					<help><![CDATA[ The alignment of any buttons added to this panel. Valid
values are 'right,' 'left' and 'center' (defaults to
'right').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="buttons" type="Array" required="false">
					<help><![CDATA[ An array of Ext.Buttons or Ext.Button configs used to
add buttons to the footer of this panel.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearCls" type="String" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clearClsJS" type="JS" required="false">
					<help><![CDATA[ The CSS class used to provide field clearing (defaults
to 'x-form-clear-left'). This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="clsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element (defaults to ''). This can be
useful for adding customized styles to the component or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="cmargins" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the collapsed state in the format:{    top:
(top margin),    right: (right margin),    bottom:
(bottom margin)    left: (left margin),} May also be a
string containing space-separated, numeric margin
values. The order of the sides associated with each
value matches the way CSS processes margin values.  If
there is only one value, it applies to all sides. If
there are two values, the top and bottom borders are
set to the first value and the right and left are set
to the second. If there are three values, the top is
set to the first value, the left and right are set to
the second, and the bottom is set to the third. If
there are four values, they apply to the top, right,
bottom, and left, respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseFirst" type="Boolean" required="false">
					<help><![CDATA[ True to make sure the collapse/expand toggle button
always renders first (to the left of) any other tools
in the panel's title bar, false to render it last
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapseMode" type="String" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapseModeJS" type="JS" required="false">
					<help><![CDATA[ By default, collapsible regions are collapsed by
clicking the expand/collapse tool button that renders
into the region's title bar. Optionally, when
collapseMode is set to 'mini' the region's split bar
will also display a small collapse button in the center
of the bar. In 'mini' mode the region will collapse to
a thinner bar than in normal mode. By default
collapseMode is undefined, and the only two supported
values are undefined and 'mini'. Note that if a
collapsible region does not have a title bar, then
collapseMode must be set to 'mini' in order for the
region to be collapsible by the user as the tool button
will not be rendered.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ By default, collapsible regions will be visible when
rendered. Set the collapsed config to true to render
the region as collapsed.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsed" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel collapsed, false to render it
expanded (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsedCls" type="String" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsedClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class to add to the panel's element after it has
been collapsed (defaults to 'x-panel-collapsed').
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to allow the user to collapse this region
(defaults to false). If true, an expand/collapse tool
button will automatically be rendered into the title
bar of the region, otherwise the button will not be
shown. Note that a title bar is required to display the
toggle button -- if no region title is specified, the
region will only be collapsible if collapseMode is set
to 'mini'.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsible" type="Boolean" required="false">
					<help><![CDATA[ True to make the panel collapsible and have the
expand/collapse toggle button automatically rendered
into the header tool button area, false to keep the
panel statically sized with no button (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="collapsibleSplitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="collapsibleSplitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
collapsible region's split bar (defaults to "Drag to
resize. Double click to hide."). Only applies if
useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentEl" type="String" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="contentElJS" type="JS" required="false">
					<help><![CDATA[ The id of an existing HTML node to use as the panel's
body content (defaults to ''). The specified Element is
appended to the Panel's body Element by the Panel's
afterRender method after any configured HTML has been
inserted, and so the document will not contain this
HTML at the time the render event is fired.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="ctClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's container (defaults to ''). This can be
useful for adding customized styles to the container or
any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultType" type="String" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaultTypeJS" type="JS" required="false">
					<help><![CDATA[ The default xtype of child Components to create in this
Container when a child item is specified as a raw
configuration object, rather than as an instantiated
Component. Defaults to 'panel'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="defaults" type="Object" required="false">
					<help><![CDATA[ A config object that will be applied to all components
added to this container either via the items config or
via the add or insert methods. The defaults config can
contain any number of name/value property pairs to be
added to each item, and should be valid for the types
of items being added to the container. For example, to
automatically apply padding to the body of each of a
set of contained Ext.Panel items, you could pass:
defaults: {bodyStyle:'padding:15px'}.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabled" type="Boolean" required="false">
					<help><![CDATA[ Render this panel disabled (default is false). An
important note when using the disabled config on panels
is that IE will often fail to initialize the disabled
mask element correectly if the panel's layout has not
yet completed by the time the Panel is disabled during
the render process. If you experience this issue, you
may need to instead use the afterlayout event to
initialize the disabled state: new Ext.Panel({    ...
listeners: {        'afterlayout': {            fn:
function(p){                p.disable();            },
single: true // important, as many layouts
can occur        }    }});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="disabledClass" type="String" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="disabledClassJS" type="JS" required="false">
					<help><![CDATA[ CSS class added to the component when it is disabled
(defaults to "x-item-disabled").
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="draggable" type="Boolean" required="false">
					<help><![CDATA[ True to enable dragging of this Panel (defaults to
false). For custom drag/drop implementations, an
Ext.Panel.DD config could also be passed in this config
instead of true. Ext.Panel.DD is an internal,
undocumented class which moves a proxy Element around
in place of the Panel's element, but provides no other
behaviour during dragging or on drop. It is a subclass
of Ext.dd.DragSource, so behaviour may be added by
implementing the interface methods of Ext.dd.DragDrop
eg: new Ext.Panel({    title: 'Drag me',    x: 100,
y: 100,    renderTo: Ext.getBody(),    floating: true,
frame: true,    width: 400,    height: 200,
draggable: {//      Config option of Ext.Panel.DD
class.//      It's a floating Panel, so do not show a
placeholder proxy in the original position.
insertProxy: false,//      Called for each mousemove
event while dragging the DD object.        onDrag :
function(e){//          Record the x,y position of the
drag proxy so that we can//          position the Panel
at end of drag.            var pel =
this.proxy.getEl();            this.x =
pel.getLeft(true);            this.y =
pel.getTop(true);//          Keep the Shadow aligned if
there is one.            var s =
this.panel.getEl().shadow;            if (s) {
s.realign(this.x, this.y, pel.getWidth(),
pel.getHeight());            }        },//      Called
on the mouseup event.        endDrag : function(e){
this.panel.setPosition(this.x, this.y);        }
}}).show();
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="elements" type="String" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="elementsJS" type="JS" required="false">
					<help><![CDATA[ A comma-delimited list of panel elements to initialize
when the panel is rendered. Normally, this list will be
generated automatically based on the items added to the
panel at config time, but sometimes it might be useful
to make sure a structural element is rendered even if
not specified at config time (for example, you may want
to add a button or toolbar dynamically after the panel
has been rendered). Adding those elements to this list
will allocate the required placeholders in the panel
when it is rendered. Valid values are header tbar (top
bar) body (required) bbar (bottom bar) footer  Defaults
to 'body'.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="extraClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to the
container (defaults to ''). This can be useful for
adding customized styles to the container or any of its
children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabel" type="String" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="fieldLabelJS" type="JS" required="false">
					<help><![CDATA[ The label text to display next to this Component
(defaults to '') This config is only used when this
Component is rendered by a Container which has been
configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="floatable" type="Boolean" required="false">
					<help><![CDATA[ True to allow clicking a collapsed region's bar to
display the region's panel floated above the layout,
false to force the user to fully expand a collapsed
region by clicking the expand button to see it again
(defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="floating" type="Boolean" required="false">
					<help><![CDATA[ True to float the panel (absolute position it with
automatic shimming and shadow), false to display it
inline where it is rendered (defaults to false). Note
that by default, setting floating to true will cause
the panel to display at negative offsets so that it is
hidden -- because the panel is absolute positioned, the
position must be set explicitly after render (e.g.,
myPanel.setPosition(100,100);). Also, when floating a
panel you should always assign a fixed width, otherwise
it will be auto width and will expand to fill to the
right edge of the viewport.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="footer" type="Boolean" required="false">
					<help><![CDATA[ True to create the footer element explicitly, false to
skip creating it. By default, when footer is not
specified, if one or more buttons have been added to
the panel the footer will be created automatically,
otherwise it will not.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="frame" type="Boolean" required="false">
					<help><![CDATA[ True to render the panel with custom rounded borders,
false to render with plain 1px square borders (defaults
to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="header" type="Boolean" required="false">
					<help><![CDATA[ True to create the header element explicitly, false to
skip creating it. By default, when header is not
specified, if a title is set the header will be created
automatically, otherwise it will not. If a title is set
but header is explicitly set to false, the header will
not be rendered.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="headerAsText" type="Boolean" required="false">
					<help><![CDATA[ True to display the panel title in the header, false to
hide it (defaults to true).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="height" type="Number" required="false">
					<help><![CDATA[ The height of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hidden" type="Boolean" required="false">
					<help><![CDATA[ Render this component hidden (default is false). ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideBorders" type="Boolean" required="false">
					<help><![CDATA[ True to hide the borders of each contained component,
false to defer to the component's existing border
settings (defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideCollapseTool" type="Boolean" required="false">
					<help><![CDATA[ True to hide the expand/collapse toggle button when
collapsible = true, false to display it (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideLabel" type="Boolean" required="false">
					<help><![CDATA[ True to completely hide the label element (defaults to
false). By default, even if you do not specify a
fieldLabel the space will still be reserved so that the
field will line up with other fields that do have
labels. Setting this to true will cause the field to
not reserve that space. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield'        hideLabel: true    }]});
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="hideMode" type="String" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideModeJS" type="JS" required="false">
					<help><![CDATA[ How this component should be hidden. Supported values
are "visibility" (css visibility), "offsets" (negative
offset position) and "display" (css display) - defaults
to "display". For Containers which may be hidden and
shown as part of a card layout Container such as a
TabPanel, it is recommended that hideMode is configured
as "offsets". This ensures that hidden Components still
have height and width so that layout managers can
perform measurements when calculating layouts.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="hideParent" type="Boolean" required="false">
					<help><![CDATA[ True to hide and show the component's container when
hide/show is called on the component, false to hide and
show the component itself (defaults to false). For
example, this can be used as a shortcut for a hide
button on a window by setting hide:true on the button
when adding it to its parent container.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="html" type="String" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="htmlJS" type="String/Object" required="false">
					<help><![CDATA[ An HTML fragment, or a DomHelper specification to use
as the panel's body content (defaults to ''). The HTML
content is added by the Panel's afterRender method, and
so the document will not contain this HTML at the time
the render event is fired. This content is inserted
into the body before any configured contentEl is
appended.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconCls" type="String" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="iconClsJS" type="JS" required="false">
					<help><![CDATA[ A CSS class that will provide a background image to be
used as the header icon (defaults to ''). An example
custom icon class would be something like: .my-icon {
background: url(../images/my-icon.gif) 0 6px no-repeat
!important;}
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="id" type="String" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="idJS" type="JS" required="false">
					<help><![CDATA[ The unique id of this component (defaults to an
auto-assigned id). You should assign an id if you need
to be able to access the component later and you do not
have an object reference available (e.g., using
Ext.ComponentMgr.getCmp). Note that this id will also
be used as the element id for the containing HTML
element that is rendered to the page for this
component. This allows you to write id-based CSS rules
to style the specific instance of this component
uniquely, and also to select sub-elements using this
component's id as the parent.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemCls" type="String" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemClsJS" type="JS" required="false">
					<help><![CDATA[ An additional CSS class to apply to the wrapper's form
item element of this field (defaults to the container's
itemCls value if set, or ''). Since it is applied to
the item wrapper, it allows you to write standard CSS
rules that can apply to the field, the label (if
specified) or any other element within the markup for
the field. This config is only used when this Component
is rendered by a Container which has been configured to
use the FormLayout layout manager. Example use:// Apply
a style to the field's label:    .required
.x-form-item-label {font-weight:bold;color:red;}new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        itemCls: 'required'
//this label will be styled    },{        xtype:
'textfield',        fieldLabel: 'Favorite Color'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="items" type="String" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="itemsJS" type="Mixed" required="false">
					<help><![CDATA[ A single item, or an array of child Components to be
added to this container. Each item can be any type of
object based on Ext.Component. Component config objects
may also be specified in order to avoid the overhead of
constructing a real Component object if lazy rendering
might mean that the added Component will not be
rendered immediately. To take advantage of this "lazy
instantiation", set the Ext.Component.xtype config
property to the registered type of the Component
wanted. For a list of all available xtypes, see
Ext.Component. If a single item is being passed, it
should be passed directly as an object reference (e.g.,
items: {...}). Multiple items should be passed as an
array of objects (e.g., items: [{...}, {...}]).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="keys" type="Object/Array" required="false">
					<help><![CDATA[ A KeyMap config object (in the format expected by
Ext.KeyMap.addBinding used to assign custom key
handling to this panel (defaults to null).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparator" type="String" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelSeparatorJS" type="JS" required="false">
					<help><![CDATA[ The standard separator to display after the text of
each form label (defaults to the value of
Ext.layout.FormLayout.labelSeparator, which is a colon
':' by default). To display no separator for this
field's label specify empty string ''. This config is
only used when this Component is rendered by a
Container which has been configured to use the
FormLayout layout manager. Example use:new
Ext.FormPanel({    height: 100,    renderTo:
Ext.getBody(),    items: [{        xtype: 'textfield',
fieldLabel: 'Name',        labelSeparator: '...'
}]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyle" type="String" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="labelStyleJS" type="JS" required="false">
					<help><![CDATA[ A CSS style specification to apply directly to this
field's label (defaults to the container's labelStyle
value if set, or '').. This config is only used when
this Component is rendered by a Container which has
been configured to use the FormLayout layout manager.
Example use:new Ext.FormPanel({    height: 100,
renderTo: Ext.getBody(),    items: [{        xtype:
'textfield',        fieldLabel: 'Name',
labelStyle: 'font-weight:bold;'    }]});
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layout" type="String" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutJS" type="JS" required="false">
					<help><![CDATA[ The layout type to be used in this container. If not
specified, a default Ext.layout.ContainerLayout will be
created and used. Specific config values for the chosen
layout type can be specified using layoutConfig. Valid
values are: absolute accordion anchor border card
column fit form table
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="layoutConfig" type="Object" required="false">
					<help><![CDATA[ This is a config object containing properties specific
to the chosen layout (to be used in conjunction with
the layout config value). For complete details
regarding the valid config options for each layout
type, see the layout class corresponding to the type
specified: Ext.layout.Absolute Ext.layout.Accordion
Ext.layout.AnchorLayout Ext.layout.BorderLayout
Ext.layout.CardLayout Ext.layout.ColumnLayout
Ext.layout.FitLayout Ext.layout.FormLayout
Ext.layout.TableLayout
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="listeners" type="Object" required="false">
					<help><![CDATA[ (optional) A config object containing one or more event
handlers to be added to this object during
initialization. This should be a valid listeners config
object as specified in the addListener example for
attaching multiple handlers at once.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="margins" type="String" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="marginsJS" type="Object" required="false">
					<help><![CDATA[ An object containing margins to apply to the region
when in the expanded state in the format:{    top: (top
margin),    right: (right margin),    bottom: (bottom
margin)    left: (left margin),} May also be a string
containing space-separated, numeric margin values. The
order of the sides associated with each value matches
the way CSS processes margin values:  If there is only
one value, it applies to all sides. If there are two
values, the top and bottom borders are set to the first
value and the right and left are set to the second. If
there are three values, the top is set to the first
value, the left and right are set to the second, and
the bottom is set to the third. If there are four
values, they apply to the top, right, bottom, and left,
respectively.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="maskDisabled" type="Boolean" required="false">
					<help><![CDATA[ True to mask the panel when it is disabled, false to
not mask it (defaults to true). Either way, the panel
will always tell its contained elements to disable
themselves when it is disabled, but masking the panel
can provide an additional visual cue that the panel is
disabled.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="minButtonWidth" type="Number" required="false">
					<help><![CDATA[ Minimum width in pixels of all buttons in this panel
(defaults to 75)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minHeight" type="Number" required="false">
					<help><![CDATA[ The minimum allowable height in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="minWidth" type="Number" required="false">
					<help><![CDATA[ The minimum allowable width in pixels for this region
(defaults to 50)
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="monitorResize" type="Boolean" required="false">
					<help><![CDATA[ True to automatically monitor window resize events to
handle anything that is sensitive to the current size
of the viewport. This value is typically managed by the
chosen layout and should not need to be set manually.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="overCls" type="String" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="overClsJS" type="JS" required="false">
					<help><![CDATA[ An optional extra CSS class that will be added to this
component's Element when the mouse moves over the
Element, and removed when the mouse moves out.
(defaults to ''). This can be useful for adding
customized "active" or "hover" styles to the component
or any of its children using standard CSS rules.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageX" type="Number" required="false">
					<help><![CDATA[ The page level x coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="pageY" type="Number" required="false">
					<help><![CDATA[ The page level y coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="plugins" type="Object/Array" required="false">
					<help><![CDATA[ An object or array of objects that will provide custom
functionality for this component. The only requirement
for a valid plugin is that it contain an init method
that accepts a reference of type Ext.Component. When a
component is created, if any plugins are available, the
component will call the init method on each plugin,
passing a reference to itself. Each plugin can then
call methods or respond to events on the component as
needed to provide its functionality.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderHidden" type="Boolean" required="false">
					<help><![CDATA[ True to hide each contained item on render (defaults to
false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="renderTo" type="String" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="renderToJS" type="Mixed" required="false">
					<help><![CDATA[ The id of the node, a DOM node or an existing Element
that will be the container to render this component
into. Using this config, a call to render() is not
required.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadow" type="String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shadowJS" type="Boolean/String" required="false">
					<help><![CDATA[ True (or a valid Ext.Shadow Ext.Shadow.mode value) to
display a shadow behind the panel, false to display no
shadow (defaults to 'sides'). Note that this option
only applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="shadowOffset" type="Number" required="false">
					<help><![CDATA[ The number of pixels to offset the shadow if displayed
(defaults to 4). Note that this option only applies
when floating = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="shim" type="Boolean" required="false">
					<help><![CDATA[ False to disable the iframe shim in browsers which need
one (defaults to true). Note that this option only
applies when floating = true.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="split" type="Boolean" required="false">
					<help><![CDATA[ True to display a Ext.SplitBar between this region and
its neighbor, allowing the user to resize the regions
dynamically (defaults to false). When split == true, it
is common to specify a minSize and maxSize for the
BoxComponent representing the region. These are not
native configs of BoxComponent, and are used only by
this class.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="splitTip" type="String" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="splitTipJS" type="JS" required="false">
					<help><![CDATA[ The tooltip to display when the user hovers over a
non-collapsible region's split bar (defaults to "Drag
to resize."). Only applies if useSplitTips = true.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateEvents" type="Array" required="false">
					<help><![CDATA[ An array of events that, when fired, should trigger
this component to save its state (defaults to none).
These can be any types of events supported by this
component, including browser or custom events (e.g.,
['click', 'customerchange']). See stateful for an
explanation of saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateId" type="String" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateIdJS" type="JS" required="false">
					<help><![CDATA[ The unique id for this component to use for state
management purposes (defaults to the component id if
one was set, otherwise null if the component is using a
generated id). See stateful for an explanation of
saving and restoring Component state.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="stateful" type="Boolean" required="false">
					<help><![CDATA[ A flag which causes the Component to attempt to restore
the state of internal properties from a saved state on
startup. The component must have either a stateId or id
assigned for state to be managed. Auto-generated ids
are not guaranteed to be stable across page loads and
cannot be relied upon to save and restore the same
state for a component. For state saving to work, the
state manager's provider must have been set to an
implementation of Ext.state.Provider which overrides
the set and get methods to save and recall name/value
pairs. A built-in implementation,
Ext.state.CookieProvider is available. To set the state
provider for the current page:
Ext.state.Manager.setProvider(new
Ext.state.CookieProvider()); Components attempt to save
state when one of the events listed in the stateEvents
configuration fires. You can perform extra processing
on state save and restore by attaching handlers to the
beforestaterestore, staterestore, beforestatesave and
statesave events
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="style" type="String" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="styleJS" type="JS" required="false">
					<help><![CDATA[ A custom style specification to be applied to this
component's Element. Should be a valid argument to
Ext.Element.applyStyles.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTip" type="String" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tabTipJS" type="JS" required="false">
					<help><![CDATA[ Adds a tooltip when mousing over the tab of a Ext.Panel
which is an item of a Ext.TabPanel.
Ext.QuickTips.init() must be called in order for the
tips to render.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="tbar" type="Object/Array" required="false">
					<help><![CDATA[ The top toolbar of the panel. This can be either an
Ext.Toolbar object or an array of buttons/button
configs to be added to the toolbar. Note that this is
not available as a property after render. To access the
top toolbar after render, use getTopToolbar.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="title" type="String" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleJS" type="JS" required="false">
					<help><![CDATA[ The title text to display in the panel header (defaults
to ''). When a title is specified the header element
will automatically be created and displayed unless
header is explicitly set to false. If you don't want to
specify a title at config time, but you may want one
later, you must either specify a non-empty title (a
blank space ' ' will do) or header:true so that the
container element will get created.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="titleCollapse" type="Boolean" required="false">
					<help><![CDATA[ True to allow expanding and collapsing the panel (when
collapsible = true) by clicking anywhere in the header
bar, false to allow it only by clicking to tool button
(defaults to false).
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="tools" type="Array" required="false">
					<help><![CDATA[ An array of tool button configs to be added to the
header tool area. When rendered, each tool is stored as
an Element referenced by a public property called
tools. Each tool config may contain the following
properties:  id : StringRequired. The type of tool to
create. Values may be toggle (Created by default when
collapsible is true) close minimize maximize restore
gear pin unpin right left up down refresh minus plus
help search save print  handler : FunctionRequired. The
function to call when clicked. Arguments passed are:
event : Ext.EventObjectThe click event. toolEl :
Ext.ElementThe tool Element. Panel : Ext.PanelThe host
Panel  scope : ObjectThe scope in which to call the
handler. qtip : String/ObjectA tip string, or a config
argument to Ext.QuickTip.register hidden : BooleanTrue
to initially render hidden. on : ObjectA listener
config object specifiying event listeners in the format
of an argument to addListener  Example usage: tools:[{
id:'refresh',    qtip: 'Refresh form Data',    //
hidden:true,    handler: function(event, toolEl,
panel){        // refresh logic    }}] Note that apart
from the toggle tool which is provided when a panel is
collapsible, these tools only provide the visual
button. Any required functionality must be provided by
adding handlers that implement the necessary behavior.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="useSplitTips" type="Boolean" required="false">
					<help><![CDATA[ True to display a tooltip when the user hovers over a
region's split bar (defaults to false). The tooltip
text will be the value of either splitTip or
collapsibleSplitTip as appropriate.
 ]]></help>
					<values default=""><value option="true" /><value option="false" /></values>
				</parameter>
				<parameter name="width" type="Number" required="false">
					<help><![CDATA[ The width of this component in pixels (defaults to
auto).
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="x" type="Number" required="false">
					<help><![CDATA[ The local x (left) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtype" type="String" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="xtypeJS" type="JS" required="false">
					<help><![CDATA[ The registered xtype to create. This config option is
not used when passing a config object into a
constructor. This config option is used only when lazy
instantiation is being used, and a child item of a
Container is being specified not as a fully
instantiated Component, but as a Component config
object. The xtype will be looked up at render time up
to determine what type of child Component to create.
The predefined xtypes are listed here.  If you subclass
Components to create your own Components, you may
register them using Ext.ComponentMgr.registerType in
order to be able to take advantage of lazy
instantiation and rendering.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="y" type="Number" required="false">
					<help><![CDATA[ The local y (top) coordinate for this component if
contained within a positioning container.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="passThrough" type="JS" required="false">
					<help><![CDATA[ (ColdExt attribute) A comma separated list of
JavaScript name:value pairs that will be written
directly to the Ext component config. This is useful
for storing custom properties in Ext components.
 ]]></help>
					<values default=""></values>
				</parameter>
				<parameter name="var" type="JS Variable Name" required="false">
					<help><![CDATA[ (ColdExt attribute) The JavaScript variable name that
this component will be assigned to. NOTE: You should
only use the var attribute when this tags parent is the
onReady tag.
 ]]></help>
					<values default=""></values>
				</parameter>
		</tag>
	</tags>
</dictionary>